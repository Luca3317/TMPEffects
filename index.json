{
  "api/TMPEffects.CharacterData.CharData.Info.html": {
    "href": "api/TMPEffects.CharacterData.CharData.Info.html",
    "title": "Struct CharData.Info | TMPEffects documentation",
    "keywords": "Struct CharData.Info Namespace TMPEffects.CharacterData Holds a selection of data of TMP_CharacterInfo, as well as some data about the initial mesh of the character. public struct CharData.Info Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Info(int, TMP_CharacterInfo, int, TMP_WordInfo) public Info(int index, TMP_CharacterInfo cInfo, int wordIndex, TMP_WordInfo wInfo) Parameters index int cInfo TMP_CharacterInfo wordIndex int wInfo TMP_WordInfo Fields ascender The ascender of the character. public readonly float ascender Field Value float baseLine The baseline of the character. public readonly float baseLine Field Value float character The actual character. public readonly char character Field Value char color The color of this character. public readonly Color32 color Field Value Color32 descender The descender of the character. public readonly float descender Field Value float elementType public readonly TMP_TextElementType elementType Field Value TMP_TextElementType fontAsset The font asset used for this character. public readonly TMP_FontAsset fontAsset Field Value TMP_FontAsset index The index of the character within the source text. public readonly int index Field Value int isVisible Whether the character is inherently visible; i.e. is no whitespace. public readonly bool isVisible Field Value bool lineNumber The line number of the line this character belongs to. public readonly int lineNumber Field Value int origin public readonly float origin Field Value float pageNumber The page number of the page this character belongs to. public readonly int pageNumber Field Value int pointSize The point size. public readonly float pointSize Field Value float referenceScale The reference scale of this character. public readonly float referenceScale Field Value float spriteAsset The sprite asset used for this sprite. public readonly TMP_SpriteAsset spriteAsset Field Value TMP_SpriteAsset wordFirstIndex The first index of the word this character belongs to. public readonly int wordFirstIndex Field Value int wordLastIndex The last index of the word this character belongs to. public readonly int wordLastIndex Field Value int wordLen The length of the word this character belongs to. public readonly int wordLen Field Value int wordNumber The inde public readonly int wordNumber Field Value int xAdvance The xAdvance factor of the character. public readonly float xAdvance Field Value float"
  },
  "api/TMPEffects.CharacterData.CharData.html": {
    "href": "api/TMPEffects.CharacterData.CharData.html",
    "title": "Class CharData | TMPEffects documentation",
    "keywords": "Class CharData Namespace TMPEffects.CharacterData Holds information about a character. In addition to holding a selection of data supplied by the respective TMP_CharacterInfo, accessible through the info field, also holds TMPEffects specific data and methods to manipulate said data. public class CharData Inheritance object CharData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CharData(int, TMP_CharacterInfo, int) public CharData(int index, TMP_CharacterInfo cInfo, int wordIndex) Parameters index int cInfo TMP_CharacterInfo wordIndex int CharData(int, TMP_CharacterInfo, int, TMP_WordInfo?) public CharData(int index, TMP_CharacterInfo cInfo, int wordIndex, TMP_WordInfo? wInfo = null) Parameters index int cInfo TMP_CharacterInfo wordIndex int wInfo TMP_WordInfo? Fields InitialPosition The initial position of this character. public readonly Vector3 InitialPosition Field Value Vector3 InitialRotation The initial rotation of this character. public readonly Quaternion InitialRotation Field Value Quaternion InitialScale The initial scale of this character. public readonly Vector3 InitialScale Field Value Vector3 defaultRotation The default rotation of any CharData. public static readonly Quaternion defaultRotation Field Value Quaternion defaultScale The default scale of any CharData. public static readonly Vector3 defaultScale Field Value Vector3 info Holds a selection of TMP_CharacterInfo data. public readonly CharData.Info info Field Value CharData.Info mesh The mesh of the character. public readonly VertexData mesh Field Value VertexData Properties Position The character's position. public Vector3 Position { get; } Property Value Vector3 Rotation The character's rotation. public Quaternion Rotation { get; } Property Value Quaternion RotationPivot The character's rotation pivot. public Vector3 RotationPivot { get; } Property Value Vector3 Scale The character's scale. public Vector3 Scale { get; } Property Value Vector3 alphasDirty Whether the vertex alphas have been manipulated. public bool alphasDirty { get; } Property Value bool colorsDirty Whether the vertex colors have been manipulated. public bool colorsDirty { get; } Property Value bool initialMesh The initial mesh of this character. public ReadOnlyVertexData initialMesh { get; } Property Value ReadOnlyVertexData positionDirty Whether the position has been manipulated from the character's initial position. public bool positionDirty { get; } Property Value bool rotationDirty Whether the rotation has been manipulated from the character's initial rotation. public bool rotationDirty { get; } Property Value bool scaleDirty Whether the scale has been manipulated from the character's initial scale. public bool scaleDirty { get; } Property Value bool uvsDirty Whether the UVs have been manipulated. public bool uvsDirty { get; } Property Value bool verticesDirty Whether the vertices have been manipulated. public bool verticesDirty { get; } Property Value bool Methods AddPivotDelta(Vector3) Add a delta to the pivot of the character. Note that the pivot is independent of the character's position, rotation and scale. public void AddPivotDelta(Vector3 delta) Parameters delta Vector3 The delta to add to the position of the pivot. AddPositionDelta(Vector3) Add a delta to the position of the character. public void AddPositionDelta(Vector3 delta) Parameters delta Vector3 The delta to add to the position of the character. AddVertexDelta(int, Vector3) Add a positon delta to the vertex at the given index. public void AddVertexDelta(int index, Vector3 delta) Parameters index int The index of the vertex. delta Vector3 The delta to add to the position of the vertex. Reset() Reset changes made to the character's mesh, position, rotation, scale and pivot. public void Reset() ResetColors() Reset the character's vertex colors. public void ResetColors() ResetPivot() Reset the character's pivot. public void ResetPivot() ResetPosition() Reset the character's position. public void ResetPosition() ResetRotation() Reset the character's rotation. public void ResetRotation() ResetScale() Reset the character's scale. public void ResetScale() ResetUVs() Reset the character's UVs. public void ResetUVs() ResetVertices() Reset the character's vertices. public void ResetVertices() SetPivot(Vector3) Set the pivot of this character. Note that the pivot is independent of the character's position, scale and rotation. public void SetPivot(Vector3 pivot) Parameters pivot Vector3 The new position of the pivot. SetPosition(Vector3) Set the position of the character. public void SetPosition(Vector3 position) Parameters position Vector3 The new position of the character. SetRotation(Quaternion) Set the rotation of this character. public void SetRotation(Quaternion rotation) Parameters rotation Quaternion The new rotation of this character. SetScale(Vector3) Set the scale of this character. public void SetScale(Vector3 scale) Parameters scale Vector3 The new scale of this character. SetVertex(int, Vector3) Set the position of the vertex at the given index. public void SetVertex(int index, Vector3 position) Parameters index int The index of the vertex. position Vector3 The new position of the vertex."
  },
  "api/TMPEffects.CharacterData.CharDataState.html": {
    "href": "api/TMPEffects.CharacterData.CharDataState.html",
    "title": "Class CharDataState | TMPEffects documentation",
    "keywords": "Class CharDataState Namespace TMPEffects.CharacterData Utility class that stores a CharData and modifications to it, allowing you to make multiple modifications iteratively and to apply at once. Used in TMPAnimator to apply animations. public class CharDataState : ICharDataState Inheritance object CharDataState Implements ICharDataState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields cData public CharData cData Field Value CharData context public AnimatorContext context Field Value AnimatorContext Properties BL The position of the bottomleft vertex. public Vector3 BL { get; set; } Property Value Vector3 BLMax The maximum position modification of the bottomleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. public Vector3 BLMax { get; set; } Property Value Vector3 BLMin The minimum position modification of the bottomleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. public Vector3 BLMin { get; set; } Property Value Vector3 BL_Color The color value of the bottomleft vertex. public Color32 BL_Color { get; } Property Value Color32 BL_Result Contains the calculated position of the bottomleft vertex after calling CalculateVertexPositions(). public Vector3 BL_Result { get; set; } Property Value Vector3 BL_UV The UV value of the bottomleft vertex. public Vector2 BL_UV { get; set; } Property Value Vector2 BL_UV2 The UV2 value of the bottomleft vertex. public Vector2 BL_UV2 { get; set; } Property Value Vector2 BR The position of the bottomright vertex. public Vector3 BR { get; set; } Property Value Vector3 BRMax The maximum position modification of the bottomright vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. public Vector3 BRMax { get; set; } Property Value Vector3 BRMin The minimum position modification of the bottomleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. public Vector3 BRMin { get; set; } Property Value Vector3 BR_Color The color value of the bottomright vertex. public Color32 BR_Color { get; } Property Value Color32 BR_Result Contains the calculated position of the bottomright vertex after calling CalculateVertexPositions(). public Vector3 BR_Result { get; set; } Property Value Vector3 BR_UV The UV value of the bottomright vertex. public Vector2 BR_UV { get; set; } Property Value Vector2 BR_UV2 The UV2 value of the bottomright vertex. public Vector2 BR_UV2 { get; set; } Property Value Vector2 Rotations All rotations and the pivot they will be applied around. public IEnumerable<(Quaternion, Vector3)> Rotations { get; } Property Value IEnumerable<(Quaternion, Vector3)> TL The position of the topleft vertex. public Vector3 TL { get; set; } Property Value Vector3 TLMax The maximum position modification of the topleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. public Vector3 TLMax { get; set; } Property Value Vector3 TLMin The minimum position modification of the topleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. public Vector3 TLMin { get; set; } Property Value Vector3 TL_Color The color value of the topleft vertex. public Color32 TL_Color { get; } Property Value Color32 TL_Result Contains the calculated position of the topleft vertex after calling CalculateVertexPositions(). public Vector3 TL_Result { get; set; } Property Value Vector3 TL_UV The UV value of the topleft vertex. public Vector2 TL_UV { get; set; } Property Value Vector2 TL_UV2 The UV2 value of the topleft vertex. public Vector2 TL_UV2 { get; set; } Property Value Vector2 TR The position of the topright vertex. public Vector3 TR { get; set; } Property Value Vector3 TRMax The maximum position modification of the topright vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. public Vector3 TRMax { get; set; } Property Value Vector3 TRMin The minimum position modification of the topright vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. public Vector3 TRMin { get; set; } Property Value Vector3 TR_Color The color value of the topright vertex. public Color32 TR_Color { get; } Property Value Color32 TR_Result Contains the calculated position of the topright vertex after calling CalculateVertexPositions(). public Vector3 TR_Result { get; set; } Property Value Vector3 TR_UV The UV value of the topright vertex. public Vector2 TR_UV { get; set; } Property Value Vector2 TR_UV2 The UV2 value of the topright vertex. public Vector2 TR_UV2 { get; set; } Property Value Vector2 positionDelta The accumulated position delta of all modifications. public Vector3 positionDelta { get; set; } Property Value Vector3 scaleDelta The accumulated scale delta of all modifications. public Matrix4x4 scaleDelta { get; set; } Property Value Matrix4x4 Methods CalculateVertexPositions() Calculate the vertex positions, applying all rotations, transformations and scale operations. Will set BL_Result, TL_Result, TR_Result and BR_Result. public void CalculateVertexPositions() Reset(AnimatorContext, CharData) public void Reset(AnimatorContext context, CharData cData) Parameters context AnimatorContext cData CharData UpdateVertexOffsets() public void UpdateVertexOffsets()"
  },
  "api/TMPEffects.CharacterData.ICharDataState.html": {
    "href": "api/TMPEffects.CharacterData.ICharDataState.html",
    "title": "Interface ICharDataState | TMPEffects documentation",
    "keywords": "Interface ICharDataState Namespace TMPEffects.CharacterData Exposes vertex state of a CharData to allow iterative modifications. Used in CharDataState and ReadOnlyCharDataState. public interface ICharDataState Properties BL The position of the bottomleft vertex. Vector3 BL { get; } Property Value Vector3 BLMax The maximum position modification of the bottomleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Vector3 BLMax { get; } Property Value Vector3 BLMin The minimum position modification of the bottomleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Vector3 BLMin { get; } Property Value Vector3 BL_Color The color value of the bottomleft vertex. Color32 BL_Color { get; } Property Value Color32 BL_Result Contains the calculated position of the bottomleft vertex after calling CalculateVertexPositions(). Vector3 BL_Result { get; } Property Value Vector3 BL_UV The UV value of the bottomleft vertex. Vector2 BL_UV { get; } Property Value Vector2 BL_UV2 The UV2 value of the bottomleft vertex. Vector2 BL_UV2 { get; } Property Value Vector2 BR The position of the bottomright vertex. Vector3 BR { get; } Property Value Vector3 BRMax The maximum position modification of the bottomright vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Vector3 BRMax { get; } Property Value Vector3 BRMin The minimum position modification of the bottomleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Vector3 BRMin { get; } Property Value Vector3 BR_Color The color value of the bottomright vertex. Color32 BR_Color { get; } Property Value Color32 BR_Result Contains the calculated position of the bottomright vertex after calling CalculateVertexPositions(). Vector3 BR_Result { get; } Property Value Vector3 BR_UV The UV value of the bottomright vertex. Vector2 BR_UV { get; } Property Value Vector2 BR_UV2 The UV2 value of the bottomright vertex. Vector2 BR_UV2 { get; } Property Value Vector2 Rotations All rotations and the pivot they will be applied around. IEnumerable<(Quaternion, Vector3)> Rotations { get; } Property Value IEnumerable<(Quaternion, Vector3)> TL The position of the topleft vertex. Vector3 TL { get; } Property Value Vector3 TLMax The maximum position modification of the topleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Vector3 TLMax { get; } Property Value Vector3 TLMin The minimum position modification of the topleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Vector3 TLMin { get; } Property Value Vector3 TL_Color The color value of the topleft vertex. Color32 TL_Color { get; } Property Value Color32 TL_Result Contains the calculated position of the topleft vertex after calling CalculateVertexPositions(). Vector3 TL_Result { get; } Property Value Vector3 TL_UV The UV value of the topleft vertex. Vector2 TL_UV { get; } Property Value Vector2 TL_UV2 The UV2 value of the topleft vertex. Vector2 TL_UV2 { get; } Property Value Vector2 TR The position of the topright vertex. Vector3 TR { get; } Property Value Vector3 TRMax The maximum position modification of the topright vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Vector3 TRMax { get; } Property Value Vector3 TRMin The minimum position modification of the topright vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Vector3 TRMin { get; } Property Value Vector3 TR_Color The color value of the topright vertex. Color32 TR_Color { get; } Property Value Color32 TR_Result Contains the calculated position of the topright vertex after calling CalculateVertexPositions(). Vector3 TR_Result { get; } Property Value Vector3 TR_UV The UV value of the topright vertex. Vector2 TR_UV { get; } Property Value Vector2 TR_UV2 The UV2 value of the topright vertex. Vector2 TR_UV2 { get; } Property Value Vector2 positionDelta The accumulated position delta of all modifications. Vector3 positionDelta { get; } Property Value Vector3 scaleDelta The accumulated scale delta of all modifications. Matrix4x4 scaleDelta { get; } Property Value Matrix4x4 Methods CalculateVertexPositions() Calculate the vertex positions, applying all rotations, transformations and scale operations. Will set BL_Result, TL_Result, TR_Result and BR_Result. void CalculateVertexPositions()"
  },
  "api/TMPEffects.CharacterData.ReadOnlyCharDataState.html": {
    "href": "api/TMPEffects.CharacterData.ReadOnlyCharDataState.html",
    "title": "Class ReadOnlyCharDataState | TMPEffects documentation",
    "keywords": "Class ReadOnlyCharDataState Namespace TMPEffects.CharacterData Readonly version of CharDataState. Used to expose the current state of the CharData in IAnimationContext, allowing you to take it into account in your animations (ideally with late animations, see the docs). public class ReadOnlyCharDataState : ICharDataState Inheritance object ReadOnlyCharDataState Implements ICharDataState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOnlyCharDataState(CharDataState) public ReadOnlyCharDataState(CharDataState state) Parameters state CharDataState Properties BL The position of the bottomleft vertex. public Vector3 BL { get; } Property Value Vector3 BLMax The maximum position modification of the bottomleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. public Vector3 BLMax { get; } Property Value Vector3 BLMin The minimum position modification of the bottomleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. public Vector3 BLMin { get; } Property Value Vector3 BL_Color The color value of the bottomleft vertex. public Color32 BL_Color { get; } Property Value Color32 BL_Result Contains the calculated position of the bottomleft vertex after calling CalculateVertexPositions(). public Vector3 BL_Result { get; } Property Value Vector3 BL_UV The UV value of the bottomleft vertex. public Vector2 BL_UV { get; } Property Value Vector2 BL_UV2 The UV2 value of the bottomleft vertex. public Vector2 BL_UV2 { get; } Property Value Vector2 BR The position of the bottomright vertex. public Vector3 BR { get; } Property Value Vector3 BRMax The maximum position modification of the bottomright vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. public Vector3 BRMax { get; } Property Value Vector3 BRMin The minimum position modification of the bottomleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. public Vector3 BRMin { get; } Property Value Vector3 BR_Color The color value of the bottomright vertex. public Color32 BR_Color { get; } Property Value Color32 BR_Result Contains the calculated position of the bottomright vertex after calling CalculateVertexPositions(). public Vector3 BR_Result { get; } Property Value Vector3 BR_UV The UV value of the bottomright vertex. public Vector2 BR_UV { get; } Property Value Vector2 BR_UV2 The UV2 value of the bottomright vertex. public Vector2 BR_UV2 { get; } Property Value Vector2 Rotations All rotations and the pivot they will be applied around. public IEnumerable<(Quaternion, Vector3)> Rotations { get; } Property Value IEnumerable<(Quaternion, Vector3)> TL The position of the topleft vertex. public Vector3 TL { get; } Property Value Vector3 TLMax The maximum position modification of the topleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. public Vector3 TLMax { get; } Property Value Vector3 TLMin The minimum position modification of the topleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. public Vector3 TLMin { get; } Property Value Vector3 TL_Color The color value of the topleft vertex. public Color32 TL_Color { get; } Property Value Color32 TL_Result Contains the calculated position of the topleft vertex after calling CalculateVertexPositions(). public Vector3 TL_Result { get; } Property Value Vector3 TL_UV The UV value of the topleft vertex. public Vector2 TL_UV { get; } Property Value Vector2 TL_UV2 The UV2 value of the topleft vertex. public Vector2 TL_UV2 { get; } Property Value Vector2 TR The position of the topright vertex. public Vector3 TR { get; } Property Value Vector3 TRMax The maximum position modification of the topright vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. public Vector3 TRMax { get; } Property Value Vector3 TRMin The minimum position modification of the topright vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. public Vector3 TRMin { get; } Property Value Vector3 TR_Color The color value of the topright vertex. public Color32 TR_Color { get; } Property Value Color32 TR_Result Contains the calculated position of the topright vertex after calling CalculateVertexPositions(). public Vector3 TR_Result { get; } Property Value Vector3 TR_UV The UV value of the topright vertex. public Vector2 TR_UV { get; } Property Value Vector2 TR_UV2 The UV2 value of the topright vertex. public Vector2 TR_UV2 { get; } Property Value Vector2 positionDelta The accumulated position delta of all modifications. public Vector3 positionDelta { get; } Property Value Vector3 scaleDelta The accumulated scale delta of all modifications. public Matrix4x4 scaleDelta { get; } Property Value Matrix4x4 Methods CalculateVertexPositions() Calculate the vertex positions, applying all rotations, transformations and scale operations. Will set BL_Result, TL_Result, TR_Result and BR_Result. public void CalculateVertexPositions()"
  },
  "api/TMPEffects.CharacterData.ReadOnlyVertexData.html": {
    "href": "api/TMPEffects.CharacterData.ReadOnlyVertexData.html",
    "title": "Class ReadOnlyVertexData | TMPEffects documentation",
    "keywords": "Class ReadOnlyVertexData Namespace TMPEffects.CharacterData Holds data about a character's mesh. public class ReadOnlyVertexData Inheritance object ReadOnlyVertexData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOnlyVertexData(TMP_CharacterInfo) public ReadOnlyVertexData(TMP_CharacterInfo info) Parameters info TMP_CharacterInfo ReadOnlyVertexData(TMP_Vertex, TMP_Vertex, TMP_Vertex, TMP_Vertex) public ReadOnlyVertexData(TMP_Vertex bl, TMP_Vertex tl, TMP_Vertex tr, TMP_Vertex br) Parameters bl TMP_Vertex tl TMP_Vertex tr TMP_Vertex br TMP_Vertex Fields initial The initial vertex of the character. public readonly ReadOnlyVertexData initial Field Value ReadOnlyVertexData Properties BL_Alpha Get or set the alpha of the bottom left vertex. public byte BL_Alpha { get; } Property Value byte BL_Color Get or set the color of the bottom left vertex. Note that this will mark both colors and alphas as dirty. Use SetColor(int, Color32, bool) if you want to only set color. public Color32 BL_Color { get; } Property Value Color32 BL_Position Get or set the position of the bottom left vertex. public Vector3 BL_Position { get; } Property Value Vector3 BL_UV0 Get or set the UV0 of the bottom left vertex. public Vector3 BL_UV0 { get; } Property Value Vector3 BL_UV2 Get or set the UV2 of the bottom left vertex. public Vector3 BL_UV2 { get; } Property Value Vector3 BR_Alpha Get or set the alpha of the bottom right vertex. public byte BR_Alpha { get; } Property Value byte BR_Color Get or set the color of the bottom right vertex. Note that this will mark both colors and alphas as dirty. Use SetColor(int, Color32, bool) if you want to only set color. public Color32 BR_Color { get; } Property Value Color32 BR_Position Get or set the position of the bottom right vertex. public Vector3 BR_Position { get; } Property Value Vector3 BR_UV0 Get or set the UV0 of the bottom right vertex. public Vector3 BR_UV0 { get; } Property Value Vector3 BR_UV2 Get or set the UV2 of the bottom right vertex. public Vector3 BR_UV2 { get; } Property Value Vector3 TL_Alpha Get or set the alpha of the top left vertex. public byte TL_Alpha { get; } Property Value byte TL_Color Get or set the color of the top left vertex. Note that this will mark both colors and alphas as dirty. Use SetColor(int, Color32, bool) if you want to only set color. public Color32 TL_Color { get; } Property Value Color32 TL_Position Get or set the position of the top left vertex. public Vector3 TL_Position { get; } Property Value Vector3 TL_UV0 Get or set the UV0 of the bottom right vertex. public Vector3 TL_UV0 { get; } Property Value Vector3 TL_UV2 Get or set the UV2 of the bottom right vertex. public Vector3 TL_UV2 { get; } Property Value Vector3 TR_Alpha Get or set the alpha of the top right vertex. public byte TR_Alpha { get; } Property Value byte TR_Color Get or set the color of the top right vertex. Note that this will mark both colors and alphas as dirty. Use SetColor(int, Color32, bool) if you want to only set color. public Color32 TR_Color { get; } Property Value Color32 TR_Position Get or set the position of the top right vertex. public Vector3 TR_Position { get; } Property Value Vector3 TR_UV0 Get or set the UV0 of the top right vertex. public Vector3 TR_UV0 { get; } Property Value Vector3 TR_UV2 Get or set the UV2 of the top right vertex. public Vector3 TR_UV2 { get; } Property Value Vector3 Methods GetAlpha(int) Get the alpha of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right public byte GetAlpha(int i) Parameters i int The index. Returns byte The alpha of the vertex associated with the index. Exceptions ArgumentOutOfRangeException GetColor(int) Get the color of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right public Color32 GetColor(int i) Parameters i int The index. Returns Color32 The color of the vertex associated with the index. Exceptions ArgumentOutOfRangeException GetPosition(int) Get the position of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right public Vector3 GetPosition(int i) Parameters i int The index. Returns Vector3 The position of the vertex associated with the index. Exceptions ArgumentOutOfRangeException GetUV0(int) Get the UV0 of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right public Vector2 GetUV0(int i) Parameters i int The index. Returns Vector2 The UV0 of the vertex associated with the index. Exceptions ArgumentOutOfRangeException GetUV2(int) Get the UV2 of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right public Vector2 GetUV2(int i) Parameters i int The index. Returns Vector2 The UV2 of the vertex associated with the index. Exceptions ArgumentOutOfRangeException"
  },
  "api/TMPEffects.CharacterData.VertexData.html": {
    "href": "api/TMPEffects.CharacterData.VertexData.html",
    "title": "Class VertexData | TMPEffects documentation",
    "keywords": "Class VertexData Namespace TMPEffects.CharacterData Holds data about a character's mesh. public class VertexData Inheritance object VertexData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors VertexData(TMP_CharacterInfo) public VertexData(TMP_CharacterInfo info) Parameters info TMP_CharacterInfo VertexData(TMP_Vertex, TMP_Vertex, TMP_Vertex, TMP_Vertex) public VertexData(TMP_Vertex bl, TMP_Vertex tl, TMP_Vertex tr, TMP_Vertex br) Parameters bl TMP_Vertex tl TMP_Vertex tr TMP_Vertex br TMP_Vertex Fields initial The initial vertex of the character. public readonly ReadOnlyVertexData initial Field Value ReadOnlyVertexData Properties BL_Alpha Get or set the alpha of the bottom left vertex. public byte BL_Alpha { get; set; } Property Value byte BL_Color Get or set the color of the bottom left vertex. Note that this will mark both colors and alphas as dirty. Use SetColor(int, Color32, bool) if you want to only set color. public Color32 BL_Color { get; set; } Property Value Color32 BL_Position Get or set the position of the bottom left vertex. public Vector3 BL_Position { get; set; } Property Value Vector3 BL_UV0 Get or set the UV0 of the bottom left vertex. public Vector3 BL_UV0 { get; set; } Property Value Vector3 BL_UV2 Get or set the UV2 of the bottom left vertex. public Vector3 BL_UV2 { get; set; } Property Value Vector3 BR_Alpha Get or set the alpha of the bottom right vertex. public byte BR_Alpha { get; set; } Property Value byte BR_Color Get or set the color of the bottom right vertex. Note that this will mark both colors and alphas as dirty. Use SetColor(int, Color32, bool) if you want to only set color. public Color32 BR_Color { get; set; } Property Value Color32 BR_Position Get or set the position of the bottom right vertex. public Vector3 BR_Position { get; set; } Property Value Vector3 BR_UV0 Get or set the UV0 of the bottom right vertex. public Vector3 BR_UV0 { get; set; } Property Value Vector3 BR_UV2 Get or set the UV2 of the bottom right vertex. public Vector3 BR_UV2 { get; set; } Property Value Vector3 TL_Alpha Get or set the alpha of the top left vertex. public byte TL_Alpha { get; set; } Property Value byte TL_Color Get or set the color of the top left vertex. Note that this will mark both colors and alphas as dirty. Use SetColor(int, Color32, bool) if you want to only set color. public Color32 TL_Color { get; set; } Property Value Color32 TL_Position Get or set the position of the top left vertex. public Vector3 TL_Position { get; set; } Property Value Vector3 TL_UV0 Get or set the UV0 of the bottom right vertex. public Vector3 TL_UV0 { get; set; } Property Value Vector3 TL_UV2 Get or set the UV2 of the bottom right vertex. public Vector3 TL_UV2 { get; set; } Property Value Vector3 TR_Alpha Get or set the alpha of the top right vertex. public byte TR_Alpha { get; set; } Property Value byte TR_Color Get or set the color of the top right vertex. Note that this will mark both colors and alphas as dirty. Use SetColor(int, Color32, bool) if you want to only set color. public Color32 TR_Color { get; set; } Property Value Color32 TR_Position Get or set the position of the top right vertex. public Vector3 TR_Position { get; set; } Property Value Vector3 TR_UV0 Get or set the UV0 of the top right vertex. public Vector3 TR_UV0 { get; set; } Property Value Vector3 TR_UV2 Get or set the UV2 of the top right vertex. public Vector3 TR_UV2 { get; set; } Property Value Vector3 alphasDirty Whether the vertex alphas have been manipulated. public bool alphasDirty { get; } Property Value bool colorsDirty Whether the vertex colors have been manipulated. public bool colorsDirty { get; } Property Value bool positionsDirty Whether the positions have been manipulated. public bool positionsDirty { get; } Property Value bool uvsDirty Whether the UVs have been manipulated. public bool uvsDirty { get; } Property Value bool Methods GetAlpha(int) Get the alpha of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right public byte GetAlpha(int i) Parameters i int The index. Returns byte The alpha of the vertex associated with the index. Exceptions ArgumentOutOfRangeException GetColor(int) Get the color of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right public Color32 GetColor(int i) Parameters i int The index. Returns Color32 The color of the vertex associated with the index. Exceptions ArgumentOutOfRangeException GetPosition(int) Get the position of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right public Vector3 GetPosition(int i) Parameters i int The index. Returns Vector3 The position of the vertex associated with the index. Exceptions ArgumentOutOfRangeException GetUV0(int) Get the UV0 of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right public Vector2 GetUV0(int i) Parameters i int The index. Returns Vector2 The UV0 of the vertex associated with the index. Exceptions ArgumentOutOfRangeException GetUV2(int) Get the UV2 of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right public Vector2 GetUV2(int i) Parameters i int The index. Returns Vector2 The UV2 of the vertex associated with the index. Exceptions ArgumentOutOfRangeException Reset() Reset the mesh to initial. public void Reset() ResetAlphas() public void ResetAlphas() ResetColors() Reset the vertex colors to initial. public void ResetColors() ResetPositions() Reset the vertices to initial. public void ResetPositions() ResetUVs() Reset the UVs to initial. public void ResetUVs() SetAlpha(int, float) Set the alpha of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right public void SetAlpha(int i, float value) Parameters i int The index. value float Exceptions ArgumentOutOfRangeException SetColor(int, Color32, bool) Set the color of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right public void SetColor(int i, Color32 value, bool ignoreAlpha = false) Parameters i int The index. value Color32 The color to set the vertex too. ignoreAlpha bool Whether to ignore the alpha of the passed in color. Exceptions ArgumentOutOfRangeException SetPosition(int, Vector3) Set the position of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right public void SetPosition(int i, Vector3 value) Parameters i int The index. value Vector3 Exceptions ArgumentOutOfRangeException SetUV0(int, Vector2) Set the UV0 of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right public void SetUV0(int i, Vector2 value) Parameters i int The index. value Vector2 Exceptions ArgumentOutOfRangeException SetUV2(int, Vector2) Set the UV2 of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right public void SetUV2(int i, Vector2 value) Parameters i int The index. value Vector2 Exceptions ArgumentOutOfRangeException"
  },
  "api/TMPEffects.CharacterData.VisibilityState.html": {
    "href": "api/TMPEffects.CharacterData.VisibilityState.html",
    "title": "Enum VisibilityState | TMPEffects documentation",
    "keywords": "Enum VisibilityState Namespace TMPEffects.CharacterData A character's visibility state. A character can be either fully shown or hidden, or in the process of being shown or hidden. public enum VisibilityState Fields Hidden = -10 The character is fully hidden. Hiding = -5 The character is in the process of being hidden. Showing = 5 The character is in the process of being shown. Shown = 10 The character is fully shown."
  },
  "api/TMPEffects.CharacterData.html": {
    "href": "api/TMPEffects.CharacterData.html",
    "title": "Namespace TMPEffects.CharacterData | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.CharacterData Classes CharData Holds information about a character. In addition to holding a selection of data supplied by the respective TMP_CharacterInfo, accessible through the info field, also holds TMPEffects specific data and methods to manipulate said data. CharDataState Utility class that stores a CharData and modifications to it, allowing you to make multiple modifications iteratively and to apply at once. Used in TMPAnimator to apply animations. ReadOnlyCharDataState Readonly version of CharDataState. Used to expose the current state of the CharData in IAnimationContext, allowing you to take it into account in your animations (ideally with late animations, see the docs). ReadOnlyVertexData Holds data about a character's mesh. VertexData Holds data about a character's mesh. Structs CharData.Info Holds a selection of data of TMP_CharacterInfo, as well as some data about the initial mesh of the character. Interfaces ICharDataState Exposes vertex state of a CharData to allow iterative modifications. Used in CharDataState and ReadOnlyCharDataState. Enums VisibilityState A character's visibility state. A character can be either fully shown or hidden, or in the process of being shown or hidden."
  },
  "api/TMPEffects.Components.Animator.AnimationUpdater.html": {
    "href": "api/TMPEffects.Components.Animator.AnimationUpdater.html",
    "title": "Class AnimationUpdater | TMPEffects documentation",
    "keywords": "Class AnimationUpdater Namespace TMPEffects.Components.Animator [Serializable] public class AnimationUpdater Inheritance object AnimationUpdater Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AnimationUpdater(Action<float>, uint) public AnimationUpdater(Action<float> updateAction, uint maxUpdatesPerSecond) Parameters updateAction Action<float> maxUpdatesPerSecond uint Properties MaxUpdatesPerSecond public uint MaxUpdatesPerSecond { get; } Property Value uint Methods Reset() public void Reset() SetMaxUpdatesPerSecond(uint) public void SetMaxUpdatesPerSecond(uint maxUpdatesPerSecond) Parameters maxUpdatesPerSecond uint Update(float) public bool Update(float deltaTime) Parameters deltaTime float Returns bool"
  },
  "api/TMPEffects.Components.Animator.AnimatorContext.html": {
    "href": "api/TMPEffects.Components.Animator.AnimatorContext.html",
    "title": "Class AnimatorContext | TMPEffects documentation",
    "keywords": "Class AnimatorContext Namespace TMPEffects.Components.Animator To be used with TMPAnimator. Contains context data of the respective TMPAnimator. [Serializable] public class AnimatorContext : IAnimatorContext Inheritance object AnimatorContext Implements IAnimatorContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AnimatorContext() public AnimatorContext() AnimatorContext(TMPAnimator) public AnimatorContext(TMPAnimator animator) Parameters animator TMPAnimator AnimatorContext(TMPAnimator, bool, bool, bool, Func<int, float>, Func<int, float>) public AnimatorContext(TMPAnimator animator, bool scaleAnimations, bool useScaledTime, bool scaleUniformly, Func<int, float> getVisibleTime, Func<int, float> getStateTime) Parameters animator TMPAnimator scaleAnimations bool useScaledTime bool scaleUniformly bool getVisibleTime Func<int, float> getStateTime Func<int, float> Fields _StateTime [NonSerialized] public Func<int, float> _StateTime Field Value Func<int, float> _VisibleTime [NonSerialized] public Func<int, float> _VisibleTime Field Value Func<int, float> deltaTime [NonSerialized] public float deltaTime Field Value float passed [NonSerialized] public float passed Field Value float Properties Animator The animating TMPAnimator. public TMPAnimator Animator { get; set; } Property Value TMPAnimator DeltaTime The current delta time (=> time since last animation update). public float DeltaTime { get; set; } Property Value float PassedTime The time that has passed since the animator began animating. public float PassedTime { get; set; } Property Value float ScaleAnimations Whether animations are scaled. public bool ScaleAnimations { get; set; } Property Value bool ScaleUniformly Whether to scale animations uniformly (based on the default font size of the animator) or on a per character basis. Ignored if ScaleAnimations is false. public bool ScaleUniformly { get; set; } Property Value bool UseScaledTime Whether animations use scaled time. public bool UseScaledTime { get; set; } Property Value bool Methods StateTime(int) Check how long the CharData at the given index has been in its current VisibilityState. Generally, to be used with show and hide animations. public float StateTime(int index) Parameters index int The index of the character to check. Returns float How long the CharData at the given index has been in its current VisibilityState. StateTime(CharData) Check how long the passed CharData has been in its current VisibilityState. Generally, to be used with show and hide animations. public float StateTime(CharData cData) Parameters cData CharData The character to check. Returns float How long the passed CharData has been in its current VisibilityState. VisibleTime(int) Check how long the CharData at the given index has been visible. public float VisibleTime(int index) Parameters index int Returns float How long the CharData at the given index has been visible. VisibleTime(CharData) Check how long the passed CharData has been visible. public float VisibleTime(CharData cData) Parameters cData CharData The character to check. Returns float How long the passed CharData has been visible."
  },
  "api/TMPEffects.Components.Animator.IAnimatorContext.html": {
    "href": "api/TMPEffects.Components.Animator.IAnimatorContext.html",
    "title": "Interface IAnimatorContext | TMPEffects documentation",
    "keywords": "Interface IAnimatorContext Namespace TMPEffects.Components.Animator To be used with TMPAnimator. Contains context data of the respective TMPAnimator. public interface IAnimatorContext Properties Animator The animating TMPAnimator. TMPAnimator Animator { get; } Property Value TMPAnimator DeltaTime The current delta time (=> time since last animation update). float DeltaTime { get; } Property Value float PassedTime The time that has passed since the animator began animating. float PassedTime { get; } Property Value float ScaleAnimations Whether animations are scaled. bool ScaleAnimations { get; } Property Value bool ScaleUniformly Whether to scale animations uniformly (based on the default font size of the animator) or on a per character basis. Ignored if ScaleAnimations is false. bool ScaleUniformly { get; } Property Value bool UseScaledTime Whether animations use scaled time. bool UseScaledTime { get; } Property Value bool Methods StateTime(int) Check how long the CharData at the given index has been in its current VisibilityState. Generally, to be used with show and hide animations. float StateTime(int index) Parameters index int The index of the character to check. Returns float How long the CharData at the given index has been in its current VisibilityState. StateTime(CharData) Check how long the passed CharData has been in its current VisibilityState. Generally, to be used with show and hide animations. float StateTime(CharData cData) Parameters cData CharData The character to check. Returns float How long the passed CharData has been in its current VisibilityState. VisibleTime(int) Check how long the CharData at the given index has been visible. float VisibleTime(int index) Parameters index int Returns float How long the CharData at the given index has been visible. VisibleTime(CharData) Check how long the passed CharData has been visible. float VisibleTime(CharData cData) Parameters cData CharData The character to check. Returns float How long the passed CharData has been visible."
  },
  "api/TMPEffects.Components.Animator.ReadOnlyAnimatorContext.html": {
    "href": "api/TMPEffects.Components.Animator.ReadOnlyAnimatorContext.html",
    "title": "Class ReadOnlyAnimatorContext | TMPEffects documentation",
    "keywords": "Class ReadOnlyAnimatorContext Namespace TMPEffects.Components.Animator To be used with TMPAnimator. Contains readonly context data of the respective TMPAnimator. [Serializable] public class ReadOnlyAnimatorContext : IAnimatorContext Inheritance object ReadOnlyAnimatorContext Implements IAnimatorContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOnlyAnimatorContext(IAnimatorContext) public ReadOnlyAnimatorContext(IAnimatorContext context) Parameters context IAnimatorContext ReadOnlyAnimatorContext(TMPAnimator, bool, bool, bool, Func<int, float>, Func<int, float>) public ReadOnlyAnimatorContext(TMPAnimator animator, bool scaleAnimations, bool useScaledTime, bool scaleUniformly, Func<int, float> getVisibleTime, Func<int, float> getStateTime) Parameters animator TMPAnimator scaleAnimations bool useScaledTime bool scaleUniformly bool getVisibleTime Func<int, float> getStateTime Func<int, float> Properties Animator The animating TMPAnimator. public TMPAnimator Animator { get; } Property Value TMPAnimator DeltaTime The current delta time (=> time since last animation update). public float DeltaTime { get; } Property Value float PassedTime The time that has passed since the animator began animating. public float PassedTime { get; } Property Value float ScaleAnimations Whether animations are scaled. public bool ScaleAnimations { get; } Property Value bool ScaleUniformly Whether to scale animations uniformly (based on the default font size of the animator) or on a per character basis. Ignored if ScaleAnimations is false. public bool ScaleUniformly { get; } Property Value bool UseScaledTime Whether animations use scaled time. public bool UseScaledTime { get; } Property Value bool Methods StateTime(int) Check how long the CharData at the given index has been in its current VisibilityState. Generally, to be used with show and hide animations. public float StateTime(int index) Parameters index int The index of the character to check. Returns float How long the CharData at the given index has been in its current VisibilityState. StateTime(CharData) Check how long the passed CharData has been in its current VisibilityState. Generally, to be used with show and hide animations. public float StateTime(CharData cData) Parameters cData CharData The character to check. Returns float How long the passed CharData has been in its current VisibilityState. VisibleTime(int) Check how long the CharData at the given index has been visible. public float VisibleTime(int index) Parameters index int Returns float How long the CharData at the given index has been visible. VisibleTime(CharData) Check how long the passed CharData has been visible. public float VisibleTime(CharData cData) Parameters cData CharData The character to check. Returns float How long the passed CharData has been visible."
  },
  "api/TMPEffects.Components.Animator.SegmentData.html": {
    "href": "api/TMPEffects.Components.Animator.SegmentData.html",
    "title": "Struct SegmentData | TMPEffects documentation",
    "keywords": "Struct SegmentData Namespace TMPEffects.Components.Animator To be used with TMPAnimator and its animations. Contains data about a given animation segment. public struct SegmentData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields effectiveLength The effective length of the animation segment; i.e. the length of the segment from firstAnimationIndex to lastAnimationIndex. public readonly int effectiveLength Field Value int firstAnimationIndex The index of the first character that is relevant to the TMPAnimator and will be animated. public readonly int firstAnimationIndex Field Value int firstVisibleIndex The index of the first visible character (i.e. non-whitespace character). public readonly int firstVisibleIndex Field Value int lastAnimationIndex The index of the last character that is relevant to the TMPAnimator and will be animated. public readonly int lastAnimationIndex Field Value int lastVisibleIndex The index of the last visible character (i.e. non-whitespace character). public readonly int lastVisibleIndex Field Value int length The length of the animation segment. public readonly int length Field Value int max public readonly Vector3 max Field Value Vector3 min public readonly Vector3 min Field Value Vector3 startIndex The first index of the segment within the containing text. public readonly int startIndex Field Value int Methods IndexToSegmentIndex(int) public int IndexToSegmentIndex(int index) Parameters index int Returns int SegmentIndexOf(CharData) public int SegmentIndexOf(CharData cData) Parameters cData CharData Returns int"
  },
  "api/TMPEffects.Components.Animator.TMPAnimationType.html": {
    "href": "api/TMPEffects.Components.Animator.TMPAnimationType.html",
    "title": "Enum TMPAnimationType | TMPEffects documentation",
    "keywords": "Enum TMPAnimationType Namespace TMPEffects.Components.Animator To be used with TMPAnimator. Identifies a specific type of animation. public enum TMPAnimationType : short Fields Basic = 0 The \"standard\" animation type. Animations of this type are updated continuously. Hide = 10 Animations of this type are played when a character is hidden. Show = 5 Animations of this type are played when a character is shown."
  },
  "api/TMPEffects.Components.Animator.TMPAnimatorUpdater.html": {
    "href": "api/TMPEffects.Components.Animator.TMPAnimatorUpdater.html",
    "title": "Class TMPAnimatorUpdater | TMPEffects documentation",
    "keywords": "Class TMPAnimatorUpdater Namespace TMPEffects.Components.Animator public class TMPAnimatorUpdater : MonoBehaviour Inheritance object TMPAnimatorUpdater Properties MaxUpdatesPerSecond public uint MaxUpdatesPerSecond { get; } Property Value uint Methods SetMaxUpdatesPerSecond(uint) public void SetMaxUpdatesPerSecond(uint maxUpdatesPerSecond) Parameters maxUpdatesPerSecond uint"
  },
  "api/TMPEffects.Components.Animator.UpdateFrom.html": {
    "href": "api/TMPEffects.Components.Animator.UpdateFrom.html",
    "title": "Enum UpdateFrom | TMPEffects documentation",
    "keywords": "Enum UpdateFrom Namespace TMPEffects.Components.Animator To be used with TMPAnimator's SetUpdateFrom(UpdateFrom) method. Defines where the TMPAnimator is updated from. [Serializable] public enum UpdateFrom Fields FixedUpdate = 10 TMPAnimator is updated in the FixedUpdate method. LateUpdate = 5 TMPAnimator is updated in the LateUpdate method. Script = 15 TMPAnimator is not automatically updated; you will need to update it from your own script. Update = 0 TMPAnimator is updated in the Update method."
  },
  "api/TMPEffects.Components.Animator.html": {
    "href": "api/TMPEffects.Components.Animator.html",
    "title": "Namespace TMPEffects.Components.Animator | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.Components.Animator Classes AnimationUpdater AnimatorContext To be used with TMPAnimator. Contains context data of the respective TMPAnimator. ReadOnlyAnimatorContext To be used with TMPAnimator. Contains readonly context data of the respective TMPAnimator. TMPAnimatorUpdater Structs SegmentData To be used with TMPAnimator and its animations. Contains data about a given animation segment. Interfaces IAnimatorContext To be used with TMPAnimator. Contains context data of the respective TMPAnimator. Enums TMPAnimationType To be used with TMPAnimator. Identifies a specific type of animation. UpdateFrom To be used with TMPAnimator's SetUpdateFrom(UpdateFrom) method. Defines where the TMPAnimator is updated from."
  },
  "api/TMPEffects.Components.Mediator.TMPMediator.TextChangedEarlyEventHandler.html": {
    "href": "api/TMPEffects.Components.Mediator.TMPMediator.TextChangedEarlyEventHandler.html",
    "title": "Delegate TMPMediator.TextChangedEarlyEventHandler | TMPEffects documentation",
    "keywords": "Delegate TMPMediator.TextChangedEarlyEventHandler Namespace TMPEffects.Components.Mediator public delegate void TMPMediator.TextChangedEarlyEventHandler(bool textContentChanged, ReadOnlyCollection<CharData> oldCharData) Parameters textContentChanged bool oldCharData ReadOnlyCollection<CharData>"
  },
  "api/TMPEffects.Components.Mediator.TMPMediator.TextChangedLateEventHandler.html": {
    "href": "api/TMPEffects.Components.Mediator.TMPMediator.TextChangedLateEventHandler.html",
    "title": "Delegate TMPMediator.TextChangedLateEventHandler | TMPEffects documentation",
    "keywords": "Delegate TMPMediator.TextChangedLateEventHandler Namespace TMPEffects.Components.Mediator public delegate void TMPMediator.TextChangedLateEventHandler(bool textContentChanged, ReadOnlyCollection<CharData> oldCharData, ReadOnlyCollection<VisibilityState> oldVisibilities) Parameters textContentChanged bool oldCharData ReadOnlyCollection<CharData> oldVisibilities ReadOnlyCollection<VisibilityState>"
  },
  "api/TMPEffects.Components.Mediator.TMPMediator.VisibilityEventHandler.html": {
    "href": "api/TMPEffects.Components.Mediator.TMPMediator.VisibilityEventHandler.html",
    "title": "Delegate TMPMediator.VisibilityEventHandler | TMPEffects documentation",
    "keywords": "Delegate TMPMediator.VisibilityEventHandler Namespace TMPEffects.Components.Mediator public delegate void TMPMediator.VisibilityEventHandler(int index, VisibilityState previous) Parameters index int previous VisibilityState"
  },
  "api/TMPEffects.Components.Mediator.TMPMediator.html": {
    "href": "api/TMPEffects.Components.Mediator.TMPMediator.html",
    "title": "Class TMPMediator | TMPEffects documentation",
    "keywords": "Class TMPMediator Namespace TMPEffects.Components.Mediator A mediator class for TMPAnimator and TMPWriter (and potential additions, if any). Handles the pre- and postprocessing of the text, as well as maintaining information about it in the form of a CharData and VisibilityState collection. public class TMPMediator : IDisposable Inheritance object TMPMediator Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields CharData public readonly ReadOnlyCollection<CharData> CharData Field Value ReadOnlyCollection<CharData> Processor The TMPTextProcessor used by the associated TMP_Text component. public readonly TMPTextProcessor Processor Field Value TMPTextProcessor Text The associated TMP_Text component. public readonly TMP_Text Text Field Value TMP_Text VisibilityStates public readonly ReadOnlyCollection<VisibilityState> VisibilityStates Field Value ReadOnlyCollection<VisibilityState> Methods ApplyMesh(CharData) Apply the mesh of the CharData. public void ApplyMesh(CharData cData) Parameters cData CharData Dispose() Dispose the TMPMediator instance. public void Dispose() ForceReprocess() Forces a mesh update on the associated TMP_Text component. Will reprocess the text. public void ForceReprocess() GetVisibilityState(CharData) Get the associated VisibilityState of the given CharData. public VisibilityState GetVisibilityState(CharData cData) Parameters cData CharData The CharData to get the VisibilityState of. Returns VisibilityState The associated VisibilityState of the given CharData. Remarks This uses the index property of info to get the associated VisibilityState. Therefore, the responsiblity is on you to ensure cData is valid, i.e. belongs to this TMPMediator instance. Exceptions ArgumentOutOfRangeException NullReferenceException RegisterVisibilityProcessor(object) Register as the visibility processor of this TMPMediator. There may be at most one visibility processor registered at any given time. This makes you responsible of applying any actual changes to the mesh of the character when its associated VisibilityState is updated. Subscribe to the VisibilityStateUpdated event to get a callback whenever an VisibilityState is updated. public bool RegisterVisibilityProcessor(object obj) Parameters obj object The object to identify the subscriber. Returns bool true if registration was successful; otherwise false. SetText(string) Set the text of the associated TMP_Text component. public void SetText(string text) Parameters text string SetVisibilityState(int, int, VisibilityState) Set the VisibilityState associated with the CharData at the given indices. public void SetVisibilityState(int startIndex, int length, VisibilityState state) Parameters startIndex int The first index of the to-be-updated VisibilityState. length int The amount of to-be-updated VisibilityState. state VisibilityState The VisibilityState to set to. Exceptions ArgumentOutOfRangeException SetVisibilityState(int, VisibilityState) Set the VisibilityState associated with the CharData at the given index. public void SetVisibilityState(int index, VisibilityState state) Parameters index int The index of the to-be-updated VisibilityState. state VisibilityState The VisibilityState to set to. Exceptions ArgumentOutOfRangeException SetVisibilityState(CharData, VisibilityState) Set the VisibilityState associated with the given CharData. public void SetVisibilityState(CharData cData, VisibilityState state) Parameters cData CharData The CharData to set the associated VisibilityState of. state VisibilityState The VisibilityState to set to. Remarks This uses the index property of info to get the associated VisibilityState. Therefore, the responsiblity is on you to ensure cData is valid, i.e. belongs to this TMPMediator instance. Exceptions ArgumentOutOfRangeException UnregisterVisibilityProcessor(object) Unregister as the visibility processor of this TMPMediator. public bool UnregisterVisibilityProcessor(object obj) Parameters obj object The object to identify the subscriber. Returns bool true if registration was successful; otherwise false. Events TextChanged_Early Raised when the associated TMP_Text component raises its TEXT_CHANGED_EVENT, before TextChanged_Late. You should use this callback for initialization, e.g. processing tags. Don't modify data that might mess with the initialization of other listeners, such as setting visibilities or char data. For such operations, use TextChanged_Late. public event TMPMediator.TextChangedEarlyEventHandler TextChanged_Early Event Type TMPMediator.TextChangedEarlyEventHandler TextChanged_Late Raised when the associated TMP_Text component raises its TEXT_CHANGED_EVENT, after TextChanged_Early. public event TMPMediator.TextChangedLateEventHandler TextChanged_Late Event Type TMPMediator.TextChangedLateEventHandler VisibilityStateUpdated Raised when the VisibilityState of one of the contained CharData is updated. public event TMPMediator.VisibilityEventHandler VisibilityStateUpdated Event Type TMPMediator.VisibilityEventHandler"
  },
  "api/TMPEffects.Components.Mediator.html": {
    "href": "api/TMPEffects.Components.Mediator.html",
    "title": "Namespace TMPEffects.Components.Mediator | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.Components.Mediator Classes TMPMediator A mediator class for TMPAnimator and TMPWriter (and potential additions, if any). Handles the pre- and postprocessing of the text, as well as maintaining information about it in the form of a CharData and VisibilityState collection. Delegates TMPMediator.TextChangedEarlyEventHandler TMPMediator.TextChangedLateEventHandler TMPMediator.VisibilityEventHandler"
  },
  "api/TMPEffects.Components.TMPAnimator.html": {
    "href": "api/TMPEffects.Components.TMPAnimator.html",
    "title": "Class TMPAnimator | TMPEffects documentation",
    "keywords": "Class TMPAnimator Namespace TMPEffects.Components Animates the character of a TMP_Text component. public class TMPAnimator : TMPEffectComponent Inheritance object TMPEffectComponent TMPAnimator Inherited Members TMPEffectComponent.TextComponent TMPEffectComponent.SetText(string) TMPEffectComponent.Show(int, int, bool) TMPEffectComponent.Hide(int, int, bool) TMPEffectComponent.ShowAll(bool) TMPEffectComponent.HideAll(bool) TMPEffectComponent.Mediator TMPEffectComponent.FreeMediator() TMPEffectComponent.UpdateMediator() Remarks One of the two main components of TMPEffects, along with TMPWriter. TMPAnimator allows you to apply animations to the characters of a TMP_Text component. There are three types of animations: You may control when the animations are updated by setting UpdateFrom to Script and calling UpdateAnimations(float). Fields ANIMATION_PREFIX The prefix used for basic animation tags. public const char ANIMATION_PREFIX = '\\0' Field Value char HIDE_ANIMATION_PREFIX The prefix used for hide animation tags. public const char HIDE_ANIMATION_PREFIX = '-' Field Value char SHOW_ANIMATION_PREFIX The prefix used for show animation tags. public const char SHOW_ANIMATION_PREFIX = '+' Field Value char Properties AnimateOnStart Whether the TMPAnimator should automatically begin animating on TMPEffects.Components.TMPAnimator.Start(). public bool AnimateOnStart { get; set; } Property Value bool AnimationsOverride Whether animations will override each other by default. public bool AnimationsOverride { get; set; } Property Value bool BasicTags All basic animation tags parsed by the TMPAnimator. public ITagCollection BasicTags { get; } Property Value ITagCollection Database The database used to parse animation tags. public TMPAnimationDatabase Database { get; } Property Value TMPAnimationDatabase HideTags All hide animation tags parsed by the TMPAnimator. public ITagCollection HideTags { get; } Property Value ITagCollection IsAnimating Whether the text is currently being animated. If UpdateFrom is set to Script, this will always evaluate to true. public bool IsAnimating { get; } Property Value bool SceneAnimations public IDictionary<string, TMPSceneAnimation> SceneAnimations { get; } Property Value IDictionary<string, TMPSceneAnimation> SceneHideAnimations public IDictionary<string, TMPSceneHideAnimation> SceneHideAnimations { get; } Property Value IDictionary<string, TMPSceneHideAnimation> SceneShowAnimations public IDictionary<string, TMPSceneShowAnimation> SceneShowAnimations { get; } Property Value IDictionary<string, TMPSceneShowAnimation> ShowTags All show animation tags parsed by the TMPAnimator. public ITagCollection ShowTags { get; } Property Value ITagCollection Tags All tags parsed by the TMPAnimator. public ITagCollection Tags { get; } Property Value ITagCollection UpdateFrom Where the animations are currently being updated from. public UpdateFrom UpdateFrom { get; } Property Value UpdateFrom Methods IsExcluded(char, TMPAnimationType) Whether the character is excluded from animations of the given type. public bool IsExcluded(char c, TMPAnimationType type) Parameters c char The character to check. type TMPAnimationType The type of animation to check against. Returns bool Whether the character is excluded from animations of the given type. Exceptions ArgumentException If an invalid TMPAnimationType is passed in. IsExcludedBasic(char) Check whether the given character is excluded from basic animations. public bool IsExcludedBasic(char c) Parameters c char The character to check. Returns bool Whether the character is excluded from basic animations. IsExcludedHide(char) Check whether the given character is excluded from hide animations. public bool IsExcludedHide(char c) Parameters c char The character to check. Returns bool Whether the character is excluded from hide animations. IsExcludedShow(char) Check whether the given character is excluded from show animations. public bool IsExcludedShow(char c) Parameters c char The character to check. Returns bool Whether the character is excluded from show animations. ResetAnimations() Reset all visible characters to their initial, unanimated state. public void ResetAnimations() ResetTime() Reset the time of the animator. public void ResetTime() SetDatabase(TMPAnimationDatabase) Set the database that will be used to parse animation tags. public void SetDatabase(TMPAnimationDatabase database) Parameters database TMPAnimationDatabase The database that will be used to parse animation tags. SetExcludedBasicCharacters(string, bool?) Set the excluded character for basic animations, meaning characters that will not be animated by basic animations. public void SetExcludedBasicCharacters(string str, bool? excludePunctuation = null) Parameters str string The excluded characters, as string. The string will be evaluated character-wise. excludePunctuation bool? Whether punctuation is excluded. SetExcludedCharacters(TMPAnimationType, string, bool?) Set the excluded character for animations of the given type, meaning characters that will not be animated by that type of animations. public void SetExcludedCharacters(TMPAnimationType type, string str, bool? excludePunctuation = null) Parameters type TMPAnimationType str string The excluded characters, as string. The string will be evaluated character-wise. excludePunctuation bool? Whether punctuation is excluded. Exceptions ArgumentException If an invalid TMPAnimationType is passed in. SetExcludedHideCharacters(string, bool?) Set the excluded character for hide animations, meaning characters that will not be animated by hide animations. public void SetExcludedHideCharacters(string str, bool? excludePunctuation = null) Parameters str string The excluded characters, as string. The string will be evaluated character-wise. excludePunctuation bool? Whether punctuation is excluded. SetExcludedShowCharacters(string, bool?) Set the excluded character for show animations, meaning characters that will not be animated by show animations. public void SetExcludedShowCharacters(string str, bool? excludePunctuation = null) Parameters str string The excluded characters, as string. The string will be evaluated character-wise. excludePunctuation bool? Whether punctuation is excluded. SetUpdateFrom(UpdateFrom) Set where the animations should be updated from. public void SetUpdateFrom(UpdateFrom updateFrom) Parameters updateFrom UpdateFrom Where the animations are updated from. StartAnimating() Start animating. You should only call this if UpdateFrom is NOT set to Script, otherwise this will output a warning and return. public void StartAnimating() StopAnimating() Stop animating. You should only call this if UpdateFrom is NOT set to Script, otherwise this will output a warning and return. public void StopAnimating() UpdateAnimations(float) Update the current animations. You should only call this if UpdateFrom is set to Script, otherwise this will output a warning and return. public void UpdateAnimations(float deltaTime) Parameters deltaTime float"
  },
  "api/TMPEffects.Components.TMPEffectComponent.html": {
    "href": "api/TMPEffects.Components.TMPEffectComponent.html",
    "title": "Class TMPEffectComponent | TMPEffects documentation",
    "keywords": "Class TMPEffectComponent Namespace TMPEffects.Components Base class for TMPAnimator and TMPWriter. public abstract class TMPEffectComponent : MonoBehaviour Inheritance object TMPEffectComponent Derived TMPAnimator TMPWriter Properties Mediator protected TMPMediator Mediator { get; } Property Value TMPMediator TextComponent The associated TMP_Text component. public TMP_Text TextComponent { get; } Property Value TMP_Text Methods FreeMediator() protected void FreeMediator() Hide(int, int, bool) Hide a subset of the text's characters. public void Hide(int start, int length, bool skipHideProcess = false) Parameters start int First character index to hide. length int Amount of characters to hide. skipHideProcess bool Whether to skip the hide process. Exceptions InvalidOperationException HideAll(bool) Hide all of the text's character. public void HideAll(bool skipHideProcess = false) Parameters skipHideProcess bool Exceptions InvalidOperationException SetText(string) Set the text of the associated TMP_Text component. public void SetText(string text) Parameters text string The new text. Show(int, int, bool) Show a subset of the text's characters. public void Show(int start, int length, bool skipShowProcess = false) Parameters start int First character index to show. length int Amount of characters to show. skipShowProcess bool Whether to skip the show process. Exceptions InvalidOperationException ShowAll(bool) Show all of the text's character. public void ShowAll(bool skipShowProcess = false) Parameters skipShowProcess bool Whether to skip the show process. Exceptions InvalidOperationException UpdateMediator() protected void UpdateMediator()"
  },
  "api/TMPEffects.Components.TMPWriter.DelayType.html": {
    "href": "api/TMPEffects.Components.TMPWriter.DelayType.html",
    "title": "Enum TMPWriter.DelayType | TMPEffects documentation",
    "keywords": "Enum TMPWriter.DelayType Namespace TMPEffects.Components The type of delay. Either a percentage of the normal delay (delay) or a raw value in seconds. public enum TMPWriter.DelayType Fields Percentage = 0 Raw = 1"
  },
  "api/TMPEffects.Components.TMPWriter.Delays.html": {
    "href": "api/TMPEffects.Components.TMPWriter.Delays.html",
    "title": "Class TMPWriter.Delays | TMPEffects documentation",
    "keywords": "Class TMPWriter.Delays Namespace TMPEffects.Components Stores the various delays along with their TMPWriter.DelayType of a TMPWriter. [Serializable] public class TMPWriter.Delays Inheritance object TMPWriter.Delays Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields delay The delay after showing a character. public float delay Field Value float linebreakDelay The delay after \"showing\" a linebreak character. public float linebreakDelay Field Value float linebreakDelayType The TMPWriter.DelayType of linebreakDelay. public TMPWriter.DelayType linebreakDelayType Field Value TMPWriter.DelayType punctuationDelay The delay after showing a punctuation character. public float punctuationDelay Field Value float punctuationDelayType The TMPWriter.DelayType of punctuationDelay. public TMPWriter.DelayType punctuationDelayType Field Value TMPWriter.DelayType visibleDelay The delay after \"showing\" an already visible character. public float visibleDelay Field Value float visibleDelayType The TMPWriter.DelayType of visibleDelay. public TMPWriter.DelayType visibleDelayType Field Value TMPWriter.DelayType whitespaceDelay The delay after \"showing\" a whitespace character. public float whitespaceDelay Field Value float whitespaceDelayType The TMPWriter.DelayType of whitespaceDelay. public TMPWriter.DelayType whitespaceDelayType Field Value TMPWriter.DelayType Properties CalculatedLinebreakDelay The calculated delay after \"showing\" a linebreak character, using linebreakDelay and linebreakDelayType. public float CalculatedLinebreakDelay { get; } Property Value float CalculatedPunctuationDelay The calculated delay after showing a punctuation character, using punctuationDelay and punctuationDelayType. public float CalculatedPunctuationDelay { get; } Property Value float CalculatedVisibleDelay The calculated delay after \"showing\" an already visible character, using visibleDelay and visibleDelayType. public float CalculatedVisibleDelay { get; } Property Value float CalculatedWhiteSpaceDelay The calculated delay after \"showing\" a whitespace character, using whitespaceDelay and whitespaceDelayType. public float CalculatedWhiteSpaceDelay { get; } Property Value float Methods SetDelay(float) Set the delay of the writer. public void SetDelay(float delay) Parameters delay float The delay after showing a character. SetLinebreakDelay(float, DelayType?) Set the linebreak delay of the writer. public void SetLinebreakDelay(float delay, TMPWriter.DelayType? type = null) Parameters delay float The delay after \"showing\" a linebreak character. type TMPWriter.DelayType? SetPunctuationDelay(float, DelayType?) Set the punctuation delay of the writer. public void SetPunctuationDelay(float delay, TMPWriter.DelayType? type = null) Parameters delay float The delay after \"showing\" a punctuation character. type TMPWriter.DelayType? SetVisibleDelay(float, DelayType?) Set the visible delay of the writer. public void SetVisibleDelay(float delay, TMPWriter.DelayType? type = null) Parameters delay float The delay after \"showing\" an already visible character. type TMPWriter.DelayType? SetWhitespaceDelay(float, DelayType?) Set the whitespace delay of the writer. public void SetWhitespaceDelay(float delay, TMPWriter.DelayType? type = null) Parameters delay float The delay after \"showing\" a whitespace character. type TMPWriter.DelayType?"
  },
  "api/TMPEffects.Components.TMPWriter.html": {
    "href": "api/TMPEffects.Components.TMPWriter.html",
    "title": "Class TMPWriter | TMPEffects documentation",
    "keywords": "Class TMPWriter Namespace TMPEffects.Components Shows / hides the characters of a TMP_Text component over time, and allows you to raise events and commands at specific indices. public class TMPWriter : TMPEffectComponent Inheritance object TMPEffectComponent TMPWriter Inherited Members TMPEffectComponent.TextComponent TMPEffectComponent.SetText(string) TMPEffectComponent.Show(int, int, bool) TMPEffectComponent.Hide(int, int, bool) TMPEffectComponent.ShowAll(bool) TMPEffectComponent.HideAll(bool) TMPEffectComponent.Mediator TMPEffectComponent.FreeMediator() TMPEffectComponent.UpdateMediator() Remarks One of the two main components of TMPEffects, along with TMPAnimator. Using command tags, you can call specific methods. There are two types of Commands: In additon to command tags, TMPWriter also processes event tags: TMPEvent: Using event tags, you can raise events from text, i.e. when a specific character is shown. You can subscribe to these events with OnTextEvent. Fields COMMAND_PREFIX The prefix used for command tags. public const char COMMAND_PREFIX = '!' Field Value char EVENT_PREFIX The prefix used for event tags. public const char EVENT_PREFIX = '?' Field Value char OnCharacterShown Raised when the TMPWriter shows a new character. public UnityEvent<TMPWriter, CharData> OnCharacterShown Field Value UnityEvent<TMPWriter, CharData> OnFinishWriter Raised when the TMPWriter is done writing the current text. public UnityEvent<TMPWriter> OnFinishWriter Field Value UnityEvent<TMPWriter> OnResetWriter Raised when the TMPWriter is reset. The integer parameter indicates the text index the TMPWriter was reset to. public UnityEvent<TMPWriter, int> OnResetWriter Field Value UnityEvent<TMPWriter, int> OnSkipWriter Raised when the current (section of) text is skipped. public UnityEvent<TMPWriter, int> OnSkipWriter Field Value UnityEvent<TMPWriter, int> OnStartWriter Raised when the TMPWriter starts / resumes writing. public UnityEvent<TMPWriter> OnStartWriter Field Value UnityEvent<TMPWriter> OnStopWriter Raised when the TMPWriter stops writing. public UnityEvent<TMPWriter> OnStopWriter Field Value UnityEvent<TMPWriter> OnTextEvent Raised when the TMPWriter reaches an event tag. public TMPEvent OnTextEvent Field Value TMPEvent OnWaitEnded Raised when the TMPWriter ends waiting. public UnityEvent<TMPWriter> OnWaitEnded Field Value UnityEvent<TMPWriter> OnWaitStarted Raised when the TMPWriter starts waiting. The float parameter indicates the amount of time the TMPWriter will wait, in seconds. public UnityEvent<TMPWriter, float> OnWaitStarted Field Value UnityEvent<TMPWriter, float> Properties CommandTags All command tags parsed by the TMPWriter. public ITagCollection CommandTags { get; } Property Value ITagCollection CurrentDelays public TMPWriter.Delays CurrentDelays { get; } Property Value TMPWriter.Delays CurrentIndex The text index of the TMPWriter's current character. public int CurrentIndex { get; } Property Value int Database The database used to parse command tags. public TMPCommandDatabase Database { get; } Property Value TMPCommandDatabase DefaultDelays public TMPWriter.Delays DefaultDelays { get; } Property Value TMPWriter.Delays EventTags All event tags parsed by the TMPWriter. public ITagCollection EventTags { get; } Property Value ITagCollection IsWriting Whether the TMPWriter is currently writing text. public bool IsWriting { get; } Property Value bool MaySkip Whether the TMPWriter may skip the current section of text. public bool MaySkip { get; } Property Value bool Tags All tags parsed by the TMPWriter. public ITagCollection Tags { get; } Property Value ITagCollection UseScaledTime public bool UseScaledTime { get; set; } Property Value bool WriteOnNewText public bool WriteOnNewText { get; set; } Property Value bool WriteOnStart public bool WriteOnStart { get; set; } Property Value bool Methods ResetWaitConditions() public void ResetWaitConditions() ResetWaitPeriod() public void ResetWaitPeriod() ResetWriter() Reset the writer to the initial state for the current text. This also stops the writing process. public void ResetWriter() ResetWriter(int) Reset the writer to the given index of the current text. Does not allow you to skip text; the passed index must be smaller than the current index. public void ResetWriter(int index) Parameters index int The index to reset the writer to. RestartWriter() Restart the writer. This will reset the writer and start the writing process. public void RestartWriter() SetDatabase(TMPCommandDatabase) Set the database that will be used to parse command tags. public void SetDatabase(TMPCommandDatabase database) Parameters database TMPCommandDatabase The database that will be used to parse command tags. SetSkippable(bool) Set whether the current text may be skipped. public void SetSkippable(bool skippable) Parameters skippable bool Whether the current text may be skipped. SkipWriter(bool) Skip the current section of the text. If the current section may not be skipped, this will do nothing. Otherwise, the writing process is skipped to either the end of the current text, or the next unskippable section of the current text. public void SkipWriter(bool skipShowAnimation = true) Parameters skipShowAnimation bool StartWriter() Start (or resume) writing. public void StartWriter() StopWriter() Stop writing. Note that this does not reset the shown text. public void StopWriter() Wait(float) Pause the writer for the given amount of seconds. public void Wait(float seconds) Parameters seconds float The amount of time to wait. Exceptions ArgumentOutOfRangeException Throws if seconds is less than zero. WaitUntil(Func<bool>) Pause the writer until the given condition evaluates to true. public void WaitUntil(Func<bool> condition) Parameters condition Func<bool> The condition to wait for."
  },
  "api/TMPEffects.Components.html": {
    "href": "api/TMPEffects.Components.html",
    "title": "Namespace TMPEffects.Components | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.Components Classes TMPAnimator Animates the character of a TMP_Text component. TMPEffectComponent Base class for TMPAnimator and TMPWriter. TMPWriter Shows / hides the characters of a TMP_Text component over time, and allows you to raise events and commands at specific indices. TMPWriter.Delays Stores the various delays along with their TMPWriter.DelayType of a TMPWriter. Enums TMPWriter.DelayType The type of delay. Either a percentage of the normal delay (delay) or a raw value in seconds."
  },
  "api/TMPEffects.Databases.AnimationDatabase.TMPAnimationDatabase.html": {
    "href": "api/TMPEffects.Databases.AnimationDatabase.TMPAnimationDatabase.html",
    "title": "Class TMPAnimationDatabase | TMPEffects documentation",
    "keywords": "Class TMPAnimationDatabase Namespace TMPEffects.Databases.AnimationDatabase Stores TMPAnimation, TMPShowAnimation and TMPHideAnimation animations. public class TMPAnimationDatabase : TMPEffectDatabase<ITMPAnimation>, ITMPEffectDatabase<ITMPAnimation>, ITMPEffectDatabase, INotifyObjectChanged Inheritance object TMPEffectDatabase<ITMPAnimation> TMPAnimationDatabase Implements ITMPEffectDatabase<ITMPAnimation> ITMPEffectDatabase INotifyObjectChanged Inherited Members TMPEffectDatabase<ITMPAnimation>.ObjectChanged TMPEffectDatabase<ITMPAnimation>.OnDestroy() TMPEffectDatabase<ITMPAnimation>.RaiseDatabaseChanged() Properties BasicAnimationDatabase The backing TMPBasicAnimationDatabase used. public TMPBasicAnimationDatabase BasicAnimationDatabase { get; } Property Value TMPBasicAnimationDatabase HideAnimationDatabase The backing TMPHideAnimationDatabase used. public TMPHideAnimationDatabase HideAnimationDatabase { get; } Property Value TMPHideAnimationDatabase ShowAnimationDatabase The backing TMPShowAnimationDatabase used. public TMPShowAnimationDatabase ShowAnimationDatabase { get; } Property Value TMPShowAnimationDatabase Methods ContainsEffect(string) Check whether this database contains an animation associated with the given name. public override bool ContainsEffect(string name) Parameters name string The identifier of the animation. Returns bool true if this database contains an animation associated with the given name; false otherwise. ContainsEffect(string, TMPAnimationType) Check whether this database contains an animation associated with the given name. public bool ContainsEffect(string name, TMPAnimationType type) Parameters name string The identifier of the animation. type TMPAnimationType The type of animation. Returns bool true if this database contains an animation associated with the given name; false otherwise. GetEffect(string) Get the animation associated with the given name. public override ITMPAnimation GetEffect(string name) Parameters name string The identifier of the animation. Returns ITMPAnimation The animation associated with the given name. Exceptions KeyNotFoundException InvalidOperationException GetEffect(string, TMPAnimationType) Get the animation associated with the given name. public ITMPAnimation GetEffect(string name, TMPAnimationType type) Parameters name string The identifier of the animation. type TMPAnimationType The type of animation. Returns ITMPAnimation The animation associated with the given name. Exceptions KeyNotFoundException InvalidOperationException OnValidate() protected override void OnValidate()"
  },
  "api/TMPEffects.Databases.AnimationDatabase.TMPAnimationDatabaseBase-1.html": {
    "href": "api/TMPEffects.Databases.AnimationDatabase.TMPAnimationDatabaseBase-1.html",
    "title": "Class TMPAnimationDatabaseBase<T> | TMPEffects documentation",
    "keywords": "Class TMPAnimationDatabaseBase<T> Namespace TMPEffects.Databases.AnimationDatabase Base class for databases storing ITMPAnimation. public abstract class TMPAnimationDatabaseBase<T> : TMPEffectDatabase<T>, ITMPEffectDatabase<T>, ITMPEffectDatabase, INotifyObjectChanged where T : ITMPAnimation Type Parameters T Inheritance object TMPEffectDatabase<T> TMPAnimationDatabaseBase<T> Implements ITMPEffectDatabase<T> ITMPEffectDatabase INotifyObjectChanged Derived TMPBasicAnimationDatabase TMPHideAnimationDatabase TMPShowAnimationDatabase Inherited Members TMPEffectDatabase<T>.ObjectChanged TMPEffectDatabase<T>.ContainsEffect(string) TMPEffectDatabase<T>.GetEffect(string) TMPEffectDatabase<T>.OnValidate() TMPEffectDatabase<T>.OnDestroy() TMPEffectDatabase<T>.RaiseDatabaseChanged()"
  },
  "api/TMPEffects.Databases.AnimationDatabase.TMPBasicAnimationDatabase.html": {
    "href": "api/TMPEffects.Databases.AnimationDatabase.TMPBasicAnimationDatabase.html",
    "title": "Class TMPBasicAnimationDatabase | TMPEffects documentation",
    "keywords": "Class TMPBasicAnimationDatabase Namespace TMPEffects.Databases.AnimationDatabase Stores TMPAnimation. public class TMPBasicAnimationDatabase : TMPAnimationDatabaseBase<TMPAnimation>, ITMPEffectDatabase<TMPAnimation>, ITMPEffectDatabase, INotifyObjectChanged Inheritance object TMPEffectDatabase<TMPAnimation> TMPAnimationDatabaseBase<TMPAnimation> TMPBasicAnimationDatabase Implements ITMPEffectDatabase<TMPAnimation> ITMPEffectDatabase INotifyObjectChanged Inherited Members TMPEffectDatabase<TMPAnimation>.ObjectChanged TMPEffectDatabase<TMPAnimation>.OnValidate() TMPEffectDatabase<TMPAnimation>.OnDestroy() TMPEffectDatabase<TMPAnimation>.RaiseDatabaseChanged() Methods ContainsEffect(string) Check whether this database contains an animation associated with the given name. public override bool ContainsEffect(string name) Parameters name string The identifier of the animation. Returns bool true if this database contains an animation associated with the given name; false otherwise. GetEffect(string) Get the animation associated with the given name. public override TMPAnimation GetEffect(string name) Parameters name string The identifier of the animation. Returns TMPAnimation The animation associated with the given name. Exceptions KeyNotFoundException InvalidOperationException"
  },
  "api/TMPEffects.Databases.AnimationDatabase.TMPHideAnimationDatabase.html": {
    "href": "api/TMPEffects.Databases.AnimationDatabase.TMPHideAnimationDatabase.html",
    "title": "Class TMPHideAnimationDatabase | TMPEffects documentation",
    "keywords": "Class TMPHideAnimationDatabase Namespace TMPEffects.Databases.AnimationDatabase Stores TMPHideAnimation. public class TMPHideAnimationDatabase : TMPAnimationDatabaseBase<TMPHideAnimation>, ITMPEffectDatabase<TMPHideAnimation>, ITMPEffectDatabase, INotifyObjectChanged Inheritance object TMPEffectDatabase<TMPHideAnimation> TMPAnimationDatabaseBase<TMPHideAnimation> TMPHideAnimationDatabase Implements ITMPEffectDatabase<TMPHideAnimation> ITMPEffectDatabase INotifyObjectChanged Inherited Members TMPEffectDatabase<TMPHideAnimation>.ObjectChanged TMPEffectDatabase<TMPHideAnimation>.OnValidate() TMPEffectDatabase<TMPHideAnimation>.OnDestroy() TMPEffectDatabase<TMPHideAnimation>.RaiseDatabaseChanged() Methods ContainsEffect(string) Check whether this database contains an animation associated with the given name. public override bool ContainsEffect(string name) Parameters name string The identifier of the animation. Returns bool true if this database contains an animation associated with the given name; false otherwise. GetEffect(string) Get the animation associated with the given name. public override TMPHideAnimation GetEffect(string name) Parameters name string The identifier of the animation. Returns TMPHideAnimation The animation associated with the given name. Exceptions KeyNotFoundException InvalidOperationException"
  },
  "api/TMPEffects.Databases.AnimationDatabase.TMPShowAnimationDatabase.html": {
    "href": "api/TMPEffects.Databases.AnimationDatabase.TMPShowAnimationDatabase.html",
    "title": "Class TMPShowAnimationDatabase | TMPEffects documentation",
    "keywords": "Class TMPShowAnimationDatabase Namespace TMPEffects.Databases.AnimationDatabase Stores TMPShowAnimation. public class TMPShowAnimationDatabase : TMPAnimationDatabaseBase<TMPShowAnimation>, ITMPEffectDatabase<TMPShowAnimation>, ITMPEffectDatabase, INotifyObjectChanged Inheritance object TMPEffectDatabase<TMPShowAnimation> TMPAnimationDatabaseBase<TMPShowAnimation> TMPShowAnimationDatabase Implements ITMPEffectDatabase<TMPShowAnimation> ITMPEffectDatabase INotifyObjectChanged Inherited Members TMPEffectDatabase<TMPShowAnimation>.ObjectChanged TMPEffectDatabase<TMPShowAnimation>.OnValidate() TMPEffectDatabase<TMPShowAnimation>.OnDestroy() TMPEffectDatabase<TMPShowAnimation>.RaiseDatabaseChanged() Methods ContainsEffect(string) Check whether this database contains an animation associated with the given name. public override bool ContainsEffect(string name) Parameters name string The identifier of the animation. Returns bool true if this database contains an animation associated with the given name; false otherwise. GetEffect(string) Get the animation associated with the given name. public override TMPShowAnimation GetEffect(string name) Parameters name string The identifier of the animation. Returns TMPShowAnimation The animation associated with the given name. Exceptions KeyNotFoundException InvalidOperationException"
  },
  "api/TMPEffects.Databases.AnimationDatabase.html": {
    "href": "api/TMPEffects.Databases.AnimationDatabase.html",
    "title": "Namespace TMPEffects.Databases.AnimationDatabase | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.Databases.AnimationDatabase Classes TMPAnimationDatabase Stores TMPAnimation, TMPShowAnimation and TMPHideAnimation animations. TMPAnimationDatabaseBase<T> Base class for databases storing ITMPAnimation. TMPBasicAnimationDatabase Stores TMPAnimation. TMPHideAnimationDatabase Stores TMPHideAnimation. TMPShowAnimationDatabase Stores TMPShowAnimation."
  },
  "api/TMPEffects.Databases.CommandDatabase.TMPCommandDatabase.html": {
    "href": "api/TMPEffects.Databases.CommandDatabase.TMPCommandDatabase.html",
    "title": "Class TMPCommandDatabase | TMPEffects documentation",
    "keywords": "Class TMPCommandDatabase Namespace TMPEffects.Databases.CommandDatabase Stores TMPCommand. public class TMPCommandDatabase : TMPEffectDatabase<TMPCommand>, ITMPEffectDatabase<TMPCommand>, ITMPEffectDatabase, INotifyObjectChanged Inheritance object TMPEffectDatabase<TMPCommand> TMPCommandDatabase Implements ITMPEffectDatabase<TMPCommand> ITMPEffectDatabase INotifyObjectChanged Inherited Members TMPEffectDatabase<TMPCommand>.ObjectChanged TMPEffectDatabase<TMPCommand>.OnValidate() TMPEffectDatabase<TMPCommand>.OnDestroy() TMPEffectDatabase<TMPCommand>.RaiseDatabaseChanged() Methods ContainsEffect(string) Check whether this database contains a command associated with the given name. public override bool ContainsEffect(string name) Parameters name string The identifier of the command. Returns bool true if this database contains a command associated with the given name; false otherwise. GetEffect(string) Get the command associated with the given name. public override TMPCommand GetEffect(string name) Parameters name string The identifier of the command. Returns TMPCommand The command associated with the given name. Exceptions KeyNotFoundException InvalidOperationException"
  },
  "api/TMPEffects.Databases.CommandDatabase.html": {
    "href": "api/TMPEffects.Databases.CommandDatabase.html",
    "title": "Namespace TMPEffects.Databases.CommandDatabase | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.Databases.CommandDatabase Classes TMPCommandDatabase Stores TMPCommand."
  },
  "api/TMPEffects.Databases.ITMPEffectDatabase-1.html": {
    "href": "api/TMPEffects.Databases.ITMPEffectDatabase-1.html",
    "title": "Interface ITMPEffectDatabase<T> | TMPEffects documentation",
    "keywords": "Interface ITMPEffectDatabase<T> Namespace TMPEffects.Databases Base interface for effect databases. public interface ITMPEffectDatabase<out T> : ITMPEffectDatabase Type Parameters T Type of effects contained in this database. Inherited Members ITMPEffectDatabase.ContainsEffect(string) Methods GetEffect(string) Get the effect associated with the given name. T GetEffect(string name) Parameters name string The identifier of the effect. Returns T The effect associated with the given name. Exceptions KeyNotFoundException"
  },
  "api/TMPEffects.Databases.ITMPEffectDatabase.html": {
    "href": "api/TMPEffects.Databases.ITMPEffectDatabase.html",
    "title": "Interface ITMPEffectDatabase | TMPEffects documentation",
    "keywords": "Interface ITMPEffectDatabase Namespace TMPEffects.Databases Base interface for effect databases. public interface ITMPEffectDatabase Methods ContainsEffect(string) Check whether this database contains an effect associated with the given name. bool ContainsEffect(string name) Parameters name string The identifier of the effect. Returns bool true if this database contains an effect associated with the given name; false otherwise."
  },
  "api/TMPEffects.Databases.TMPEffectDatabase-1.html": {
    "href": "api/TMPEffects.Databases.TMPEffectDatabase-1.html",
    "title": "Class TMPEffectDatabase<T> | TMPEffects documentation",
    "keywords": "Class TMPEffectDatabase<T> Namespace TMPEffects.Databases Base class for all databases. public abstract class TMPEffectDatabase<T> : ScriptableObject, ITMPEffectDatabase<T>, ITMPEffectDatabase, INotifyObjectChanged Type Parameters T The type of effect stored in this database. Inheritance object TMPEffectDatabase<T> Implements ITMPEffectDatabase<T> ITMPEffectDatabase INotifyObjectChanged Derived TMPAnimationDatabase TMPAnimationDatabaseBase<T> TMPCommandDatabase Methods ContainsEffect(string) Check whether this database contains an effect associated with the given name. public abstract bool ContainsEffect(string name) Parameters name string The identifier of the effect. Returns bool true if this database contains an effect associated with the given name; false otherwise. GetEffect(string) Get the effect associated with the given name. public abstract T GetEffect(string name) Parameters name string The identifier of the effect. Returns T The effect associated with the given name. Exceptions KeyNotFoundException OnDestroy() protected virtual void OnDestroy() OnValidate() protected virtual void OnValidate() RaiseDatabaseChanged() protected void RaiseDatabaseChanged() Events ObjectChanged public event ObjectChangedEventHandler ObjectChanged Event Type ObjectChangedEventHandler"
  },
  "api/TMPEffects.Databases.html": {
    "href": "api/TMPEffects.Databases.html",
    "title": "Namespace TMPEffects.Databases | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.Databases Classes TMPEffectDatabase<T> Base class for all databases. Interfaces ITMPEffectDatabase Base interface for effect databases. ITMPEffectDatabase<T> Base interface for effect databases."
  },
  "api/TMPEffects.EffectCategories.TMPAnimationCategory.html": {
    "href": "api/TMPEffects.EffectCategories.TMPAnimationCategory.html",
    "title": "Class TMPAnimationCategory | TMPEffects documentation",
    "keywords": "Class TMPAnimationCategory Namespace TMPEffects.EffectCategories Category for animations. public class TMPAnimationCategory : TMPEffectCategory<ITMPAnimation>, ITMPTagValidator, ITMPPrefixSupplier, ITMPEffectDatabase<ITMPAnimation>, ITMPEffectDatabase Inheritance object TMPEffectCategory TMPEffectCategory<ITMPAnimation> TMPAnimationCategory Implements ITMPTagValidator ITMPPrefixSupplier ITMPEffectDatabase<ITMPAnimation> ITMPEffectDatabase Inherited Members TMPEffectCategory.Prefix TMPEffectCategory.prefix object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TMPAnimationCategory(char, ITMPEffectDatabase<ITMPAnimation>) public TMPAnimationCategory(char prefix, ITMPEffectDatabase<ITMPAnimation> database) Parameters prefix char database ITMPEffectDatabase<ITMPAnimation> Methods ContainsEffect(string) Check whether this database contains an effect associated with the given name. public override bool ContainsEffect(string name) Parameters name string The identifier of the effect. Returns bool true if this database contains an effect associated with the given name; false otherwise. GetEffect(string) Get the effect associated with the given name. public override ITMPAnimation GetEffect(string name) Parameters name string The identifier of the effect. Returns ITMPAnimation The effect associated with the given name. Exceptions KeyNotFoundException ValidateOpenTag(TagInfo, out TMPEffectTag, out int) Validate a given ParsingUtility.TagInfo. MUST be of type Open. public override bool ValidateOpenTag(ParsingUtility.TagInfo tagInfo, out TMPEffectTag data, out int endIndex) Parameters tagInfo ParsingUtility.TagInfo Information about the tag. data TMPEffectTag Assuming the tag is validated, this will be set to the created TMPEffectTag; otherwise it will be null. endIndex int Assuming the tag is validated, this will be set to the endIndex of the tag. TODO this arguably exceeds ITMPTagValidators responsibilities Returns bool true if the tag is successfully validated; false otherwise. Exceptions ArgumentException ValidateTag(TMPEffectTag) Validate a given TMPEffectTag. public override bool ValidateTag(TMPEffectTag tag) Parameters tag TMPEffectTag Information about the tag. Returns bool true if the tag is successfully validated; false otherwise. ValidateTag(TagInfo) Validate a given ParsingUtility.TagInfo. public override bool ValidateTag(ParsingUtility.TagInfo tagInfo) Parameters tagInfo ParsingUtility.TagInfo Information about the tag. Returns bool true if the tag is successfully validated; false otherwise."
  },
  "api/TMPEffects.EffectCategories.TMPCommandCategory.html": {
    "href": "api/TMPEffects.EffectCategories.TMPCommandCategory.html",
    "title": "Class TMPCommandCategory | TMPEffects documentation",
    "keywords": "Class TMPCommandCategory Namespace TMPEffects.EffectCategories Category for commands. public class TMPCommandCategory : TMPEffectCategory<ITMPCommand>, ITMPTagValidator, ITMPPrefixSupplier, ITMPEffectDatabase<ITMPCommand>, ITMPEffectDatabase Inheritance object TMPEffectCategory TMPEffectCategory<ITMPCommand> TMPCommandCategory Implements ITMPTagValidator ITMPPrefixSupplier ITMPEffectDatabase<ITMPCommand> ITMPEffectDatabase Inherited Members TMPEffectCategory.Prefix TMPEffectCategory.prefix object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TMPCommandCategory(char, ITMPEffectDatabase<ITMPCommand>) public TMPCommandCategory(char prefix, ITMPEffectDatabase<ITMPCommand> database) Parameters prefix char database ITMPEffectDatabase<ITMPCommand> Methods ContainsEffect(string) Check whether this database contains an effect associated with the given name. public override bool ContainsEffect(string name) Parameters name string The identifier of the effect. Returns bool true if this database contains an effect associated with the given name; false otherwise. GetEffect(string) Get the effect associated with the given name. public override ITMPCommand GetEffect(string name) Parameters name string The identifier of the effect. Returns ITMPCommand The effect associated with the given name. Exceptions KeyNotFoundException ValidateOpenTag(TagInfo, out TMPEffectTag, out int) Validate a given ParsingUtility.TagInfo. MUST be of type Open. public override bool ValidateOpenTag(ParsingUtility.TagInfo tagInfo, out TMPEffectTag data, out int endIndex) Parameters tagInfo ParsingUtility.TagInfo Information about the tag. data TMPEffectTag Assuming the tag is validated, this will be set to the created TMPEffectTag; otherwise it will be null. endIndex int Assuming the tag is validated, this will be set to the endIndex of the tag. TODO this arguably exceeds ITMPTagValidators responsibilities Returns bool true if the tag is successfully validated; false otherwise. Exceptions ArgumentException ValidateTag(TMPEffectTag) Validate a given TMPEffectTag. public override bool ValidateTag(TMPEffectTag tag) Parameters tag TMPEffectTag Information about the tag. Returns bool true if the tag is successfully validated; false otherwise. ValidateTag(TagInfo) Validate a given ParsingUtility.TagInfo. public override bool ValidateTag(ParsingUtility.TagInfo tagInfo) Parameters tagInfo ParsingUtility.TagInfo Information about the tag. Returns bool true if the tag is successfully validated; false otherwise."
  },
  "api/TMPEffects.EffectCategories.TMPEffectCategory-1.html": {
    "href": "api/TMPEffects.EffectCategories.TMPEffectCategory-1.html",
    "title": "Class TMPEffectCategory<TEffect> | TMPEffects documentation",
    "keywords": "Class TMPEffectCategory<TEffect> Namespace TMPEffects.EffectCategories Base class for all effect categories. public abstract class TMPEffectCategory<TEffect> : TMPEffectCategory, ITMPTagValidator, ITMPPrefixSupplier, ITMPEffectDatabase<TEffect>, ITMPEffectDatabase Type Parameters TEffect Inheritance object TMPEffectCategory TMPEffectCategory<TEffect> Implements ITMPTagValidator ITMPPrefixSupplier ITMPEffectDatabase<TEffect> ITMPEffectDatabase Derived TMPAnimationCategory TMPCommandCategory Inherited Members TMPEffectCategory.Prefix TMPEffectCategory.prefix TMPEffectCategory.ValidateOpenTag(ParsingUtility.TagInfo, out TMPEffectTag, out int) TMPEffectCategory.ValidateTag(TMPEffectTag) TMPEffectCategory.ValidateTag(ParsingUtility.TagInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TMPEffectCategory(char) public TMPEffectCategory(char prefix) Parameters prefix char Methods ContainsEffect(string) Check whether this database contains an effect associated with the given name. public abstract bool ContainsEffect(string name) Parameters name string The identifier of the effect. Returns bool true if this database contains an effect associated with the given name; false otherwise. GetEffect(string) Get the effect associated with the given name. public abstract TEffect GetEffect(string name) Parameters name string The identifier of the effect. Returns TEffect The effect associated with the given name. Exceptions KeyNotFoundException"
  },
  "api/TMPEffects.EffectCategories.TMPEffectCategory.html": {
    "href": "api/TMPEffects.EffectCategories.TMPEffectCategory.html",
    "title": "Class TMPEffectCategory | TMPEffects documentation",
    "keywords": "Class TMPEffectCategory Namespace TMPEffects.EffectCategories Base class for all effect categories. public abstract class TMPEffectCategory : ITMPTagValidator, ITMPPrefixSupplier Inheritance object TMPEffectCategory Implements ITMPTagValidator ITMPPrefixSupplier Derived TMPEffectCategory<TEffect> TMPEventCategory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TMPEffectCategory(char) public TMPEffectCategory(char prefix) Parameters prefix char Fields prefix protected readonly char prefix Field Value char Properties Prefix The prefix associated with this category. public char Prefix { get; } Property Value char Methods ValidateOpenTag(TagInfo, out TMPEffectTag, out int) Validate a given ParsingUtility.TagInfo. MUST be of type Open. public abstract bool ValidateOpenTag(ParsingUtility.TagInfo tagInfo, out TMPEffectTag data, out int endIndex) Parameters tagInfo ParsingUtility.TagInfo Information about the tag. data TMPEffectTag Assuming the tag is validated, this will be set to the created TMPEffectTag; otherwise it will be null. endIndex int Assuming the tag is validated, this will be set to the endIndex of the tag. TODO this arguably exceeds ITMPTagValidators responsibilities Returns bool true if the tag is successfully validated; false otherwise. Exceptions ArgumentException ValidateTag(TMPEffectTag) Validate a given TMPEffectTag. public abstract bool ValidateTag(TMPEffectTag tag) Parameters tag TMPEffectTag Information about the tag. Returns bool true if the tag is successfully validated; false otherwise. ValidateTag(TagInfo) Validate a given ParsingUtility.TagInfo. public abstract bool ValidateTag(ParsingUtility.TagInfo tagInfo) Parameters tagInfo ParsingUtility.TagInfo Information about the tag. Returns bool true if the tag is successfully validated; false otherwise."
  },
  "api/TMPEffects.EffectCategories.TMPEventCategory.html": {
    "href": "api/TMPEffects.EffectCategories.TMPEventCategory.html",
    "title": "Class TMPEventCategory | TMPEffects documentation",
    "keywords": "Class TMPEventCategory Namespace TMPEffects.EffectCategories Category for events. public class TMPEventCategory : TMPEffectCategory, ITMPTagValidator, ITMPPrefixSupplier Inheritance object TMPEffectCategory TMPEventCategory Implements ITMPTagValidator ITMPPrefixSupplier Inherited Members TMPEffectCategory.Prefix TMPEffectCategory.prefix object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TMPEventCategory(char) public TMPEventCategory(char prefix) Parameters prefix char Methods ValidateOpenTag(TagInfo, out TMPEffectTag, out int) Validate a given ParsingUtility.TagInfo. MUST be of type Open. public override bool ValidateOpenTag(ParsingUtility.TagInfo tagInfo, out TMPEffectTag data, out int endIndex) Parameters tagInfo ParsingUtility.TagInfo Information about the tag. data TMPEffectTag Assuming the tag is validated, this will be set to the created TMPEffectTag; otherwise it will be null. endIndex int Assuming the tag is validated, this will be set to the endIndex of the tag. TODO this arguably exceeds ITMPTagValidators responsibilities Returns bool true if the tag is successfully validated; false otherwise. Exceptions ArgumentException ValidateTag(TMPEffectTag) Validate a given TMPEffectTag. public override bool ValidateTag(TMPEffectTag tag) Parameters tag TMPEffectTag Information about the tag. Returns bool true if the tag is successfully validated; false otherwise. ValidateTag(TagInfo) Validate a given ParsingUtility.TagInfo. public override bool ValidateTag(ParsingUtility.TagInfo tagInfo) Parameters tagInfo ParsingUtility.TagInfo Information about the tag. Returns bool true if the tag is successfully validated; false otherwise."
  },
  "api/TMPEffects.EffectCategories.html": {
    "href": "api/TMPEffects.EffectCategories.html",
    "title": "Namespace TMPEffects.EffectCategories | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.EffectCategories Classes TMPAnimationCategory Category for animations. TMPCommandCategory Category for commands. TMPEffectCategory Base class for all effect categories. TMPEffectCategory<TEffect> Base class for all effect categories. TMPEventCategory Category for events."
  },
  "api/TMPEffects.Extensions.AnimationCurveUtility.html": {
    "href": "api/TMPEffects.Extensions.AnimationCurveUtility.html",
    "title": "Class AnimationCurveUtility | TMPEffects documentation",
    "keywords": "Class AnimationCurveUtility Namespace TMPEffects.Extensions public static class AnimationCurveUtility Inheritance object AnimationCurveUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields EaseInBackPoints public static readonly ReadOnlyCollection<Vector2> EaseInBackPoints Field Value ReadOnlyCollection<Vector2> EaseInBouncePoints public static readonly ReadOnlyCollection<Vector2> EaseInBouncePoints Field Value ReadOnlyCollection<Vector2> EaseInCircPoints public static readonly ReadOnlyCollection<Vector2> EaseInCircPoints Field Value ReadOnlyCollection<Vector2> EaseInCubicPoints public static readonly ReadOnlyCollection<Vector2> EaseInCubicPoints Field Value ReadOnlyCollection<Vector2> EaseInElasticPoints public static readonly ReadOnlyCollection<Vector2> EaseInElasticPoints Field Value ReadOnlyCollection<Vector2> EaseInExpoPoints public static readonly ReadOnlyCollection<Vector2> EaseInExpoPoints Field Value ReadOnlyCollection<Vector2> EaseInOutBackPoints public static readonly ReadOnlyCollection<Vector2> EaseInOutBackPoints Field Value ReadOnlyCollection<Vector2> EaseInOutBouncePoints public static readonly ReadOnlyCollection<Vector2> EaseInOutBouncePoints Field Value ReadOnlyCollection<Vector2> EaseInOutCircPoints public static readonly ReadOnlyCollection<Vector2> EaseInOutCircPoints Field Value ReadOnlyCollection<Vector2> EaseInOutCubicPoints public static readonly ReadOnlyCollection<Vector2> EaseInOutCubicPoints Field Value ReadOnlyCollection<Vector2> EaseInOutElasticPoints public static readonly ReadOnlyCollection<Vector2> EaseInOutElasticPoints Field Value ReadOnlyCollection<Vector2> EaseInOutExpoPoints public static readonly ReadOnlyCollection<Vector2> EaseInOutExpoPoints Field Value ReadOnlyCollection<Vector2> EaseInOutQuadPoints public static readonly ReadOnlyCollection<Vector2> EaseInOutQuadPoints Field Value ReadOnlyCollection<Vector2> EaseInOutQuartPoints public static readonly ReadOnlyCollection<Vector2> EaseInOutQuartPoints Field Value ReadOnlyCollection<Vector2> EaseInOutQuintPoints public static readonly ReadOnlyCollection<Vector2> EaseInOutQuintPoints Field Value ReadOnlyCollection<Vector2> EaseInOutSinePoints public static readonly ReadOnlyCollection<Vector2> EaseInOutSinePoints Field Value ReadOnlyCollection<Vector2> EaseInQuadPoints public static readonly ReadOnlyCollection<Vector2> EaseInQuadPoints Field Value ReadOnlyCollection<Vector2> EaseInQuartPoints public static readonly ReadOnlyCollection<Vector2> EaseInQuartPoints Field Value ReadOnlyCollection<Vector2> EaseInQuintPoints public static readonly ReadOnlyCollection<Vector2> EaseInQuintPoints Field Value ReadOnlyCollection<Vector2> EaseInSinePoints public static readonly ReadOnlyCollection<Vector2> EaseInSinePoints Field Value ReadOnlyCollection<Vector2> EaseOutBackPoints public static readonly ReadOnlyCollection<Vector2> EaseOutBackPoints Field Value ReadOnlyCollection<Vector2> EaseOutBouncePoints public static readonly ReadOnlyCollection<Vector2> EaseOutBouncePoints Field Value ReadOnlyCollection<Vector2> EaseOutCircPoints public static readonly ReadOnlyCollection<Vector2> EaseOutCircPoints Field Value ReadOnlyCollection<Vector2> EaseOutCubicPoints public static readonly ReadOnlyCollection<Vector2> EaseOutCubicPoints Field Value ReadOnlyCollection<Vector2> EaseOutElasticPoints public static readonly ReadOnlyCollection<Vector2> EaseOutElasticPoints Field Value ReadOnlyCollection<Vector2> EaseOutExpoPoints public static readonly ReadOnlyCollection<Vector2> EaseOutExpoPoints Field Value ReadOnlyCollection<Vector2> EaseOutQuadPoints public static readonly ReadOnlyCollection<Vector2> EaseOutQuadPoints Field Value ReadOnlyCollection<Vector2> EaseOutQuartPoints public static readonly ReadOnlyCollection<Vector2> EaseOutQuartPoints Field Value ReadOnlyCollection<Vector2> EaseOutQuintPoints public static readonly ReadOnlyCollection<Vector2> EaseOutQuintPoints Field Value ReadOnlyCollection<Vector2> EaseOutSinePoints public static readonly ReadOnlyCollection<Vector2> EaseOutSinePoints Field Value ReadOnlyCollection<Vector2> NameBezierConstructorMapping public static readonly ReadOnlyDictionary<string, Func<IEnumerable<Vector2>, AnimationCurve>> NameBezierConstructorMapping Field Value ReadOnlyDictionary<string, Func<IEnumerable<Vector2>, AnimationCurve>> NameConstructorMapping public static readonly ReadOnlyDictionary<string, Func<AnimationCurve>> NameConstructorMapping Field Value ReadOnlyDictionary<string, Func<AnimationCurve>> NamePointsMapping public static readonly ReadOnlyDictionary<string, ReadOnlyCollection<Vector2>> NamePointsMapping Field Value ReadOnlyDictionary<string, ReadOnlyCollection<Vector2>> Methods Bezier(IEnumerable<Vector2>) public static AnimationCurve Bezier(IEnumerable<Vector2> points) Parameters points IEnumerable<Vector2> Returns AnimationCurve Bezier(params Vector2[]) public static AnimationCurve Bezier(params Vector2[] points) Parameters points Vector2[] Returns AnimationCurve CubicBezier(IEnumerable<Vector2>) public static AnimationCurve CubicBezier(IEnumerable<Vector2> points) Parameters points IEnumerable<Vector2> Returns AnimationCurve CubicBezier(Vector2, Vector2, Vector2, Vector2) public static AnimationCurve CubicBezier(Vector2 startPoint, Vector2 controlPoint0, Vector2 controlPoint1, Vector2 endPoint) Parameters startPoint Vector2 controlPoint0 Vector2 controlPoint1 Vector2 endPoint Vector2 Returns AnimationCurve CubicBezier(params Vector2[]) public static AnimationCurve CubicBezier(params Vector2[] points) Parameters points Vector2[] Returns AnimationCurve EaseInBack() public static AnimationCurve EaseInBack() Returns AnimationCurve EaseInBounce() public static AnimationCurve EaseInBounce() Returns AnimationCurve EaseInCirc() public static AnimationCurve EaseInCirc() Returns AnimationCurve EaseInCubic() public static AnimationCurve EaseInCubic() Returns AnimationCurve EaseInElastic() public static AnimationCurve EaseInElastic() Returns AnimationCurve EaseInExpo() public static AnimationCurve EaseInExpo() Returns AnimationCurve EaseInOutBack() public static AnimationCurve EaseInOutBack() Returns AnimationCurve EaseInOutBounce() public static AnimationCurve EaseInOutBounce() Returns AnimationCurve EaseInOutCirc() public static AnimationCurve EaseInOutCirc() Returns AnimationCurve EaseInOutCubic() public static AnimationCurve EaseInOutCubic() Returns AnimationCurve EaseInOutElastic() public static AnimationCurve EaseInOutElastic() Returns AnimationCurve EaseInOutExpo() public static AnimationCurve EaseInOutExpo() Returns AnimationCurve EaseInOutQuad() public static AnimationCurve EaseInOutQuad() Returns AnimationCurve EaseInOutQuart() public static AnimationCurve EaseInOutQuart() Returns AnimationCurve EaseInOutQuint() public static AnimationCurve EaseInOutQuint() Returns AnimationCurve EaseInOutSine() public static AnimationCurve EaseInOutSine() Returns AnimationCurve EaseInQuad() public static AnimationCurve EaseInQuad() Returns AnimationCurve EaseInQuart() public static AnimationCurve EaseInQuart() Returns AnimationCurve EaseInQuint() public static AnimationCurve EaseInQuint() Returns AnimationCurve EaseInSine() public static AnimationCurve EaseInSine() Returns AnimationCurve EaseOutBack() public static AnimationCurve EaseOutBack() Returns AnimationCurve EaseOutBounce() public static AnimationCurve EaseOutBounce() Returns AnimationCurve EaseOutCirc() public static AnimationCurve EaseOutCirc() Returns AnimationCurve EaseOutCubic() public static AnimationCurve EaseOutCubic() Returns AnimationCurve EaseOutElastic() public static AnimationCurve EaseOutElastic() Returns AnimationCurve EaseOutExpo() public static AnimationCurve EaseOutExpo() Returns AnimationCurve EaseOutQuad() public static AnimationCurve EaseOutQuad() Returns AnimationCurve EaseOutQuart() public static AnimationCurve EaseOutQuart() Returns AnimationCurve EaseOutQuint() public static AnimationCurve EaseOutQuint() Returns AnimationCurve EaseOutSine() public static AnimationCurve EaseOutSine() Returns AnimationCurve GetInverse(AnimationCurve) public static AnimationCurve GetInverse(AnimationCurve originalCurve) Parameters originalCurve AnimationCurve Returns AnimationCurve Invert(AnimationCurve) public static AnimationCurve Invert(AnimationCurve curve) Parameters curve AnimationCurve Returns AnimationCurve Linear() public static AnimationCurve Linear() Returns AnimationCurve LinearBezier(IEnumerable<Vector2>) public static AnimationCurve LinearBezier(IEnumerable<Vector2> points) Parameters points IEnumerable<Vector2> Returns AnimationCurve LinearBezier(Vector2, Vector2) public static AnimationCurve LinearBezier(Vector2 start, Vector2 end) Parameters start Vector2 end Vector2 Returns AnimationCurve LinearBezier(params Vector2[]) public static AnimationCurve LinearBezier(params Vector2[] points) Parameters points Vector2[] Returns AnimationCurve QuadraticBezier(IEnumerable<Vector2>) public static AnimationCurve QuadraticBezier(IEnumerable<Vector2> points) Parameters points IEnumerable<Vector2> Returns AnimationCurve QuadraticBezier(Vector2, Vector2, Vector2) public static AnimationCurve QuadraticBezier(Vector2 startPoint, Vector2 controlPoint, Vector2 endPoint) Parameters startPoint Vector2 controlPoint Vector2 endPoint Vector2 Returns AnimationCurve QuadraticBezier(params Vector2[]) public static AnimationCurve QuadraticBezier(params Vector2[] points) Parameters points Vector2[] Returns AnimationCurve"
  },
  "api/TMPEffects.Extensions.Extensions.html": {
    "href": "api/TMPEffects.Extensions.Extensions.html",
    "title": "Class Extensions | TMPEffects documentation",
    "keywords": "Class Extensions Namespace TMPEffects.Extensions public static class Extensions Inheritance object Extensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetOrAddComponent<T>(GameObject) Gets a reference to a component of type T on the specified GameObject. Will first add the component if not already present. public static T GetOrAddComponent<T>(this GameObject gameObject) where T : Component Parameters gameObject GameObject Returns T A reference to a component of the type T. Type Parameters T The type of Component to search for."
  },
  "api/TMPEffects.Extensions.html": {
    "href": "api/TMPEffects.Extensions.html",
    "title": "Namespace TMPEffects.Extensions | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.Extensions Classes AnimationCurveUtility Extensions"
  },
  "api/TMPEffects.ObjectChanged.INotifyObjectChanged.html": {
    "href": "api/TMPEffects.ObjectChanged.INotifyObjectChanged.html",
    "title": "Interface INotifyObjectChanged | TMPEffects documentation",
    "keywords": "Interface INotifyObjectChanged Namespace TMPEffects.ObjectChanged Notigy clients when the object changed. public interface INotifyObjectChanged Events ObjectChanged event ObjectChangedEventHandler ObjectChanged Event Type ObjectChangedEventHandler"
  },
  "api/TMPEffects.ObjectChanged.ObjectChangedEventHandler.html": {
    "href": "api/TMPEffects.ObjectChanged.ObjectChangedEventHandler.html",
    "title": "Delegate ObjectChangedEventHandler | TMPEffects documentation",
    "keywords": "Delegate ObjectChangedEventHandler Namespace TMPEffects.ObjectChanged public delegate void ObjectChangedEventHandler(object sender) Parameters sender object"
  },
  "api/TMPEffects.ObjectChanged.html": {
    "href": "api/TMPEffects.ObjectChanged.html",
    "title": "Namespace TMPEffects.ObjectChanged | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.ObjectChanged Interfaces INotifyObjectChanged Notigy clients when the object changed. Delegates ObjectChangedEventHandler"
  },
  "api/TMPEffects.Parameters.GenerateParameterUtilityAttribute.html": {
    "href": "api/TMPEffects.Parameters.GenerateParameterUtilityAttribute.html",
    "title": "Class GenerateParameterUtilityAttribute | TMPEffects documentation",
    "keywords": "Class GenerateParameterUtilityAttribute Namespace TMPEffects.Parameters public class GenerateParameterUtilityAttribute : Attribute Inheritance object Attribute GenerateParameterUtilityAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/TMPEffects.Parameters.ParameterParsing.html": {
    "href": "api/TMPEffects.Parameters.ParameterParsing.html",
    "title": "Class ParameterParsing | TMPEffects documentation",
    "keywords": "Class ParameterParsing Namespace TMPEffects.Parameters public static class ParameterParsing Inheritance object ParameterParsing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ColorKeyWords public static readonly ReadOnlyDictionary<string, Color> ColorKeyWords Field Value ReadOnlyDictionary<string, Color> Methods StringToAnchor(string, out Vector2, IDictionary<string, Vector2>, IDictionary<string, Vector2>) public static bool StringToAnchor(string str, out Vector2 result, IDictionary<string, Vector2> anchorKeywords = null, IDictionary<string, Vector2> vectorKeywords = null) Parameters str string result Vector2 anchorKeywords IDictionary<string, Vector2> vectorKeywords IDictionary<string, Vector2> Returns bool StringToAnimCurve(string, out AnimationCurve, IDictionary<string, AnimationCurve>) public static bool StringToAnimCurve(string str, out AnimationCurve result, IDictionary<string, AnimationCurve> keywords = null) Parameters str string result AnimationCurve keywords IDictionary<string, AnimationCurve> Returns bool StringToBool(string, out bool, IDictionary<string, bool>) public static bool StringToBool(string str, out bool result, IDictionary<string, bool> keywords = null) Parameters str string result bool keywords IDictionary<string, bool> Returns bool StringToColor(string, out Color, IDictionary<string, Color>) public static bool StringToColor(string str, out Color result, IDictionary<string, Color> keywords = null) Parameters str string result Color keywords IDictionary<string, Color> Returns bool StringToFloat(string, out float, IDictionary<string, float>) public static bool StringToFloat(string str, out float result, IDictionary<string, float> keywords = null) Parameters str string result float keywords IDictionary<string, float> Returns bool StringToInt(string, out int, IDictionary<string, int>) public static bool StringToInt(string str, out int result, IDictionary<string, int> keywords = null) Parameters str string result int keywords IDictionary<string, int> Returns bool StringToTypedVector2(string, out TypedVector2, IDictionary<string, string>) public static bool StringToTypedVector2(string str, out ParameterTypes.TypedVector2 result, IDictionary<string, string> keywords = null) Parameters str string result ParameterTypes.TypedVector2 keywords IDictionary<string, string> Returns bool StringToTypedVector3(string, out TypedVector3, IDictionary<string, string>) public static bool StringToTypedVector3(string str, out ParameterTypes.TypedVector3 result, IDictionary<string, string> keywords = null) Parameters str string result ParameterTypes.TypedVector3 keywords IDictionary<string, string> Returns bool StringToVector2(string, out Vector2, IDictionary<string, Vector2>) public static bool StringToVector2(string str, out Vector2 result, IDictionary<string, Vector2> keywords = null) Parameters str string result Vector2 keywords IDictionary<string, Vector2> Returns bool StringToVector2Offset(string, out Vector2, IDictionary<string, Vector2>) public static bool StringToVector2Offset(string str, out Vector2 result, IDictionary<string, Vector2> keywords = null) Parameters str string result Vector2 keywords IDictionary<string, Vector2> Returns bool StringToVector3(string, out Vector3, IDictionary<string, Vector3>) public static bool StringToVector3(string str, out Vector3 result, IDictionary<string, Vector3> keywords = null) Parameters str string result Vector3 keywords IDictionary<string, Vector3> Returns bool StringToVector3Offset(string, out Vector3, IDictionary<string, Vector3>) public static bool StringToVector3Offset(string str, out Vector3 result, IDictionary<string, Vector3> keywords = null) Parameters str string result Vector3 keywords IDictionary<string, Vector3> Returns bool StringToWaveOffset(string, out WaveOffsetType, IDictionary<string, WaveOffsetType>) public static bool StringToWaveOffset(string str, out ParameterTypes.WaveOffsetType result, IDictionary<string, ParameterTypes.WaveOffsetType> keywords = null) Parameters str string result ParameterTypes.WaveOffsetType keywords IDictionary<string, ParameterTypes.WaveOffsetType> Returns bool"
  },
  "api/TMPEffects.Parameters.ParameterTypes.TypedVector2.html": {
    "href": "api/TMPEffects.Parameters.ParameterTypes.TypedVector2.html",
    "title": "Struct ParameterTypes.TypedVector2 | TMPEffects documentation",
    "keywords": "Struct ParameterTypes.TypedVector2 Namespace TMPEffects.Parameters A Vector2 with a ParameterTypes.VectorType. [Serializable] public struct ParameterTypes.TypedVector2 Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors TypedVector2(VectorType, Vector2) public TypedVector2(ParameterTypes.VectorType type, Vector2 vector) Parameters type ParameterTypes.VectorType vector Vector2 Fields type public ParameterTypes.VectorType type Field Value ParameterTypes.VectorType vector public Vector2 vector Field Value Vector2"
  },
  "api/TMPEffects.Parameters.ParameterTypes.TypedVector3.html": {
    "href": "api/TMPEffects.Parameters.ParameterTypes.TypedVector3.html",
    "title": "Struct ParameterTypes.TypedVector3 | TMPEffects documentation",
    "keywords": "Struct ParameterTypes.TypedVector3 Namespace TMPEffects.Parameters A Vector3 with a ParameterTypes.VectorType. [Serializable] public struct ParameterTypes.TypedVector3 Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors TypedVector3(VectorType, Vector3) public TypedVector3(ParameterTypes.VectorType type, Vector3 vector) Parameters type ParameterTypes.VectorType vector Vector3 Fields type public ParameterTypes.VectorType type Field Value ParameterTypes.VectorType vector public Vector3 vector Field Value Vector3"
  },
  "api/TMPEffects.Parameters.ParameterTypes.VectorType.html": {
    "href": "api/TMPEffects.Parameters.ParameterTypes.VectorType.html",
    "title": "Enum ParameterTypes.VectorType | TMPEffects documentation",
    "keywords": "Enum ParameterTypes.VectorType Namespace TMPEffects.Parameters The different types of vectors. public enum ParameterTypes.VectorType Fields Anchor = 2 Anchor vector, in \"character space\"; (0,0) is the center, (1,1) top-right, (-1,0) center-left etc. Offset = 1 Offset vector from the original position Position = 0 Pure position (normal vector)."
  },
  "api/TMPEffects.Parameters.ParameterTypes.WaveOffsetType.html": {
    "href": "api/TMPEffects.Parameters.ParameterTypes.WaveOffsetType.html",
    "title": "Enum ParameterTypes.WaveOffsetType | TMPEffects documentation",
    "keywords": "Enum ParameterTypes.WaveOffsetType Namespace TMPEffects.Parameters Different built-in offset types, to be used with GetWaveOffset(CharData, IAnimationContext, WaveOffsetType). public enum ParameterTypes.WaveOffsetType Fields Baseline = 45 Index = 5 Line = 40 SegmentIndex = 0 Word = 35 WorldXPos = 20 WorldYPos = 25 WorldZPos = 30 XPos = 10 YPos = 15"
  },
  "api/TMPEffects.Parameters.ParameterTypes.html": {
    "href": "api/TMPEffects.Parameters.ParameterTypes.html",
    "title": "Class ParameterTypes | TMPEffects documentation",
    "keywords": "Class ParameterTypes Namespace TMPEffects.Parameters public static class ParameterTypes Inheritance object ParameterTypes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/TMPEffects.Parameters.ParameterUtility.ParseDelegate-4.html": {
    "href": "api/TMPEffects.Parameters.ParameterUtility.ParseDelegate-4.html",
    "title": "Delegate ParameterUtility.ParseDelegate<T, U, V, W> | TMPEffects documentation",
    "keywords": "Delegate ParameterUtility.ParseDelegate<T, U, V, W> Namespace TMPEffects.Parameters public delegate W ParameterUtility.ParseDelegate<T, U, V, W>(T input, out U output, V keywords) Parameters input T output U keywords V Returns W Type Parameters T U V W"
  },
  "api/TMPEffects.Parameters.ParameterUtility.WaveParameters.html": {
    "href": "api/TMPEffects.Parameters.ParameterUtility.WaveParameters.html",
    "title": "Struct ParameterUtility.WaveParameters | TMPEffects documentation",
    "keywords": "Struct ParameterUtility.WaveParameters Namespace TMPEffects.Parameters A parameter bundle that defines a AnimationUtility.Wave. public struct ParameterUtility.WaveParameters Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields amplitude public float? amplitude Field Value float? crestWait public float? crestWait Field Value float? downPeriod public float? downPeriod Field Value float? downwardCurve public AnimationCurve downwardCurve Field Value AnimationCurve troughWait public float? troughWait Field Value float? upPeriod public float? upPeriod Field Value float? upwardCurve public AnimationCurve upwardCurve Field Value AnimationCurve wavelength public float? wavelength Field Value float? waveuniformity public float? waveuniformity Field Value float? wavevelocity public float? wavevelocity Field Value float?"
  },
  "api/TMPEffects.Parameters.ParameterUtility.html": {
    "href": "api/TMPEffects.Parameters.ParameterUtility.html",
    "title": "Class ParameterUtility | TMPEffects documentation",
    "keywords": "Class ParameterUtility Namespace TMPEffects.Parameters Utility class for easy parameter handling. public static class ParameterUtility Inheritance object ParameterUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields AmplitudeAliases public static readonly string[] AmplitudeAliases Field Value string[] AnchorKeywords public static readonly ReadOnlyDictionary<string, Vector2> AnchorKeywords Field Value ReadOnlyDictionary<string, Vector2> BuiltInFloatKeywords A variety of built-in keywords for float parameters. public static readonly ReadOnlyDictionary<string, float> BuiltInFloatKeywords Field Value ReadOnlyDictionary<string, float> BuiltInVector2Keywords A variety of built-in keywords for Vector2 parameters. public static readonly ReadOnlyDictionary<string, Vector2> BuiltInVector2Keywords Field Value ReadOnlyDictionary<string, Vector2> BuiltInVector3Keywords A variety of built-in keywords for Vector3 parameters. public static readonly ReadOnlyDictionary<string, Vector3> BuiltInVector3Keywords Field Value ReadOnlyDictionary<string, Vector3> CurveAliases public static readonly string[] CurveAliases Field Value string[] FrequencyAliases public static readonly string[] FrequencyAliases Field Value string[] PivotAliases public static readonly string[] PivotAliases Field Value string[] RadiusAliases public static readonly string[] RadiusAliases Field Value string[] SpeedAliases public static readonly string[] SpeedAliases Field Value string[] WaveOffsetAliases public static readonly string[] WaveOffsetAliases Field Value string[] Methods CreateWave(Wave, WaveParameters) public static AnimationUtility.Wave CreateWave(AnimationUtility.Wave wave, ParameterUtility.WaveParameters wp) Parameters wave AnimationUtility.Wave wp ParameterUtility.WaveParameters Returns AnimationUtility.Wave GetWaveParameters(IDictionary<string, string>, string, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool) public static ParameterUtility.WaveParameters GetWaveParameters(IDictionary<string, string> parameters, string prefix = \"\", bool upwardCurve = true, bool downwardCurve = true, bool upPeriod = true, bool downPeriod = true, bool crestWait = true, bool troughWait = true, bool waveVelocity = true, bool waveLength = true, bool waveUniformity = true, bool amplitude = true) Parameters parameters IDictionary<string, string> prefix string upwardCurve bool downwardCurve bool upPeriod bool downPeriod bool crestWait bool troughWait bool waveVelocity bool waveLength bool waveUniformity bool amplitude bool Returns ParameterUtility.WaveParameters HasArrayParameter<T>(IDictionary<string, string>, ParseDelegate<string, T, IDictionary<string, T>, bool>, string, params string[]) public static bool HasArrayParameter<T>(IDictionary<string, string> parameters, ParameterUtility.ParseDelegate<string, T, IDictionary<string, T>, bool> func, string name, params string[] aliases) Parameters parameters IDictionary<string, string> func ParameterUtility.ParseDelegate<string, T, IDictionary<string, T>, bool> name string aliases string[] Returns bool Type Parameters T HasNonArrayParameter<T>(IDictionary<string, string>, ParseDelegate<string, T, IDictionary<string, T>, bool>, string, params string[]) public static bool HasNonArrayParameter<T>(IDictionary<string, string> parameters, ParameterUtility.ParseDelegate<string, T, IDictionary<string, T>, bool> func, string name, params string[] aliases) Parameters parameters IDictionary<string, string> func ParameterUtility.ParseDelegate<string, T, IDictionary<string, T>, bool> name string aliases string[] Returns bool Type Parameters T ParameterDefined(IDictionary<string, string>, string, params string[]) Check if there is a well-defined parameter of the given name or aliases. A parameter is well-defined if there is exactly one of the given aliases (including the name) present in the parameters. public static bool ParameterDefined(IDictionary<string, string> parameters, string name, params string[] aliases) Parameters parameters IDictionary<string, string> The parameters to check. name string The name to check. aliases string[] The aliases (alternative names) to check. Returns bool true if the parameter is well-defined, false otherwise. TryGetArrayParameter<T>(out T[], IDictionary<string, string>, ParseDelegate<string, T, IDictionary<string, T>, bool>, string, params string[]) public static bool TryGetArrayParameter<T>(out T[] value, IDictionary<string, string> parameters, ParameterUtility.ParseDelegate<string, T, IDictionary<string, T>, bool> func, string name, params string[] aliases) Parameters value T[] parameters IDictionary<string, string> func ParameterUtility.ParseDelegate<string, T, IDictionary<string, T>, bool> name string aliases string[] Returns bool Type Parameters T TryGetDefinedParameter(out string, IDictionary<string, string>, string, params string[]) Check if there is a well-defined parameter of the given name or aliases. A parameter is well-defined if there is exactly one of the given aliases (including the name) present in the parameters. public static bool TryGetDefinedParameter(out string value, IDictionary<string, string> parameters, string name, params string[] aliases) Parameters value string Set to the name of the defined parameter if successful. parameters IDictionary<string, string> The parameters to check. name string The name to check. aliases string[] The aliases (alternative names) to check. Returns bool true if the parameter is well-defined, false otherwise. ValidateWaveParameters(IDictionary<string, string>, string, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool) public static bool ValidateWaveParameters(IDictionary<string, string> parameters, string prefix = \"\", bool upwardCurve = true, bool downwardCurve = true, bool upPeriod = true, bool downPeriod = true, bool crestWait = true, bool troughWait = true, bool waveVelocity = true, bool waveLength = true, bool waveUniformity = true, bool amplitude = true) Parameters parameters IDictionary<string, string> prefix string upwardCurve bool downwardCurve bool upPeriod bool downPeriod bool crestWait bool troughWait bool waveVelocity bool waveLength bool waveUniformity bool amplitude bool Returns bool"
  },
  "api/TMPEffects.Parameters.html": {
    "href": "api/TMPEffects.Parameters.html",
    "title": "Namespace TMPEffects.Parameters | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.Parameters Classes GenerateParameterUtilityAttribute ParameterParsing ParameterTypes ParameterUtility Utility class for easy parameter handling. Structs ParameterTypes.TypedVector2 A Vector2 with a ParameterTypes.VectorType. ParameterTypes.TypedVector3 A Vector3 with a ParameterTypes.VectorType. ParameterUtility.WaveParameters A parameter bundle that defines a AnimationUtility.Wave. Enums ParameterTypes.VectorType The different types of vectors. ParameterTypes.WaveOffsetType Different built-in offset types, to be used with GetWaveOffset(CharData, IAnimationContext, WaveOffsetType). Delegates ParameterUtility.ParseDelegate<T, U, V, W>"
  },
  "api/TMPEffects.SerializedCollections.ObservableDictionary-2.html": {
    "href": "api/TMPEffects.SerializedCollections.ObservableDictionary-2.html",
    "title": "Class ObservableDictionary<TKey, TValue> | TMPEffects documentation",
    "keywords": "Class ObservableDictionary<TKey, TValue> Namespace TMPEffects.SerializedCollections [Serializable] public class ObservableDictionary<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, INotifyObjectChanged, IDisposable where TValue : INotifyObjectChanged Type Parameters TKey TValue Inheritance object ObservableDictionary<TKey, TValue> Implements IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IEnumerable INotifyObjectChanged IDisposable Derived SerializedObservableDictionary<TKey, TValue> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields mayRaise protected bool mayRaise Field Value bool Properties Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int The number of elements contained in the ICollection<T>. IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool true if the ICollection<T> is read-only; otherwise, false. this[TKey] Gets or sets the element with the specified key. public TValue this[TKey key] { get; set; } Parameters key TKey The key of the element to get or set. Property Value TValue The element with the specified key. Exceptions ArgumentNullException key is null. KeyNotFoundException The property is retrieved and key is not found. NotSupportedException The property is set and the IDictionary<TKey, TValue> is read-only. Keys Gets an ICollection<T> containing the keys of the IDictionary<TKey, TValue>. public ICollection<TKey> Keys { get; } Property Value ICollection<TKey> An ICollection<T> containing the keys of the object that implements IDictionary<TKey, TValue>. Values Gets an ICollection<T> containing the values in the IDictionary<TKey, TValue>. public ICollection<TValue> Values { get; } Property Value ICollection<TValue> An ICollection<T> containing the values in the object that implements IDictionary<TKey, TValue>. Methods Add(KeyValuePair<TKey, TValue>) Adds an item to the ICollection<T>. public void Add(KeyValuePair<TKey, TValue> item) Parameters item KeyValuePair<TKey, TValue> The object to add to the ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. Add(TKey, TValue) Adds an element with the provided key and value to the IDictionary<TKey, TValue>. public void Add(TKey key, TValue value) Parameters key TKey The object to use as the key of the element to add. value TValue The object to use as the value of the element to add. Exceptions ArgumentNullException key is null. ArgumentException An element with the same key already exists in the IDictionary<TKey, TValue>. NotSupportedException The IDictionary<TKey, TValue> is read-only. Clear() Removes all items from the ICollection<T>. public void Clear() Exceptions NotSupportedException The ICollection<T> is read-only. Contains(KeyValuePair<TKey, TValue>) Determines whether the ICollection<T> contains a specific value. public bool Contains(KeyValuePair<TKey, TValue> item) Parameters item KeyValuePair<TKey, TValue> The object to locate in the ICollection<T>. Returns bool true if item is found in the ICollection<T>; otherwise, false. ContainsKey(TKey) Determines whether the IDictionary<TKey, TValue> contains an element with the specified key. public bool ContainsKey(TKey key) Parameters key TKey The key to locate in the IDictionary<TKey, TValue>. Returns bool true if the IDictionary<TKey, TValue> contains an element with the key; otherwise, false. Exceptions ArgumentNullException key is null. CopyTo(KeyValuePair<TKey, TValue>[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. public void CopyTo(KeyValuePair<TKey, TValue>[] array, int arrayIndex) Parameters array KeyValuePair<TKey, TValue>[] The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. Exceptions ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator() Returns IEnumerator<KeyValuePair<TKey, TValue>> An enumerator that can be used to iterate through the collection. RaisePropertyChanged() protected void RaisePropertyChanged() RaisePropertyChanged(object) protected void RaisePropertyChanged(object sender) Parameters sender object Remove(KeyValuePair<TKey, TValue>) Removes the first occurrence of a specific object from the ICollection<T>. public bool Remove(KeyValuePair<TKey, TValue> item) Parameters item KeyValuePair<TKey, TValue> The object to remove from the ICollection<T>. Returns bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. Remove(TKey) Removes the element with the specified key from the IDictionary<TKey, TValue>. public bool Remove(TKey key) Parameters key TKey The key of the element to remove. Returns bool true if the element is successfully removed; otherwise, false. This method also returns false if key was not found in the original IDictionary<TKey, TValue>. Exceptions ArgumentNullException key is null. NotSupportedException The IDictionary<TKey, TValue> is read-only. TryGetValue(TKey, out TValue) Gets the value associated with the specified key. public bool TryGetValue(TKey key, out TValue value) Parameters key TKey The key whose value to get. value TValue When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns bool true if the object that implements IDictionary<TKey, TValue> contains an element with the specified key; otherwise, false. Exceptions ArgumentNullException key is null. Events ObjectChanged public event ObjectChangedEventHandler ObjectChanged Event Type ObjectChangedEventHandler"
  },
  "api/TMPEffects.SerializedCollections.SerializedDictionary-2.html": {
    "href": "api/TMPEffects.SerializedCollections.SerializedDictionary-2.html",
    "title": "Class SerializedDictionary<TKey, TValue> | TMPEffects documentation",
    "keywords": "Class SerializedDictionary<TKey, TValue> Namespace TMPEffects.SerializedCollections [Serializable] public class SerializedDictionary<TKey, TValue> : Dictionary<TKey, TValue>, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IDeserializationCallback, ISerializable, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, ISerializationCallbackReceiver Type Parameters TKey TValue Inheritance object Dictionary<TKey, TValue> SerializedDictionary<TKey, TValue> Implements IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IDictionary ICollection IDeserializationCallback ISerializable IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IEnumerable ISerializationCallbackReceiver Inherited Members Dictionary<TKey, TValue>.Add(TKey, TValue) Dictionary<TKey, TValue>.Clear() Dictionary<TKey, TValue>.ContainsKey(TKey) Dictionary<TKey, TValue>.ContainsValue(TValue) Dictionary<TKey, TValue>.EnsureCapacity(int) Dictionary<TKey, TValue>.GetAlternateLookup<TAlternateKey>() Dictionary<TKey, TValue>.GetEnumerator() Dictionary<TKey, TValue>.OnDeserialization(object) Dictionary<TKey, TValue>.Remove(TKey) Dictionary<TKey, TValue>.Remove(TKey, out TValue) Dictionary<TKey, TValue>.TrimExcess() Dictionary<TKey, TValue>.TrimExcess(int) Dictionary<TKey, TValue>.TryAdd(TKey, TValue) Dictionary<TKey, TValue>.TryGetAlternateLookup<TAlternateKey>(out Dictionary<TKey, TValue>.AlternateLookup<TAlternateKey>) Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue) Dictionary<TKey, TValue>.Comparer Dictionary<TKey, TValue>.Count Dictionary<TKey, TValue>.Capacity Dictionary<TKey, TValue>.this[TKey] Dictionary<TKey, TValue>.Keys Dictionary<TKey, TValue>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties SerializedList public List<SerializedKeyValuePair<TKey, TValue>> SerializedList { get; set; } Property Value List<SerializedKeyValuePair<TKey, TValue>> Methods OnAfterDeserialize() public void OnAfterDeserialize() OnBeforeSerialize() public void OnBeforeSerialize()"
  },
  "api/TMPEffects.SerializedCollections.SerializedDictionaryAttribute.html": {
    "href": "api/TMPEffects.SerializedCollections.SerializedDictionaryAttribute.html",
    "title": "Class SerializedDictionaryAttribute | TMPEffects documentation",
    "keywords": "Class SerializedDictionaryAttribute Namespace TMPEffects.SerializedCollections [Conditional(\"UNITY_EDITOR\")] public class SerializedDictionaryAttribute : Attribute Inheritance object Attribute SerializedDictionaryAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SerializedDictionaryAttribute(string, string) public SerializedDictionaryAttribute(string keyName = null, string valueName = null) Parameters keyName string valueName string Fields KeyName public readonly string KeyName Field Value string ValueName public readonly string ValueName Field Value string"
  },
  "api/TMPEffects.SerializedCollections.SerializedKeyValuePair-2.html": {
    "href": "api/TMPEffects.SerializedCollections.SerializedKeyValuePair-2.html",
    "title": "Struct SerializedKeyValuePair<TKey, TValue> | TMPEffects documentation",
    "keywords": "Struct SerializedKeyValuePair<TKey, TValue> Namespace TMPEffects.SerializedCollections [Serializable] public struct SerializedKeyValuePair<TKey, TValue> Type Parameters TKey TValue Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors SerializedKeyValuePair(TKey, TValue) public SerializedKeyValuePair(TKey key, TValue value) Parameters key TKey value TValue Fields Key public TKey Key Field Value TKey Value public TValue Value Field Value TValue"
  },
  "api/TMPEffects.SerializedCollections.SerializedObservableDictionary-2.html": {
    "href": "api/TMPEffects.SerializedCollections.SerializedObservableDictionary-2.html",
    "title": "Class SerializedObservableDictionary<TKey, TValue> | TMPEffects documentation",
    "keywords": "Class SerializedObservableDictionary<TKey, TValue> Namespace TMPEffects.SerializedCollections [Serializable] public class SerializedObservableDictionary<TKey, TValue> : ObservableDictionary<TKey, TValue>, INotifyObjectChanged, IDisposable, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, ISerializationCallbackReceiver where TValue : INotifyObjectChanged Type Parameters TKey TValue Inheritance object ObservableDictionary<TKey, TValue> SerializedObservableDictionary<TKey, TValue> Implements INotifyObjectChanged IDisposable IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IEnumerable ISerializationCallbackReceiver Inherited Members ObservableDictionary<TKey, TValue>.mayRaise ObservableDictionary<TKey, TValue>.this[TKey] ObservableDictionary<TKey, TValue>.Keys ObservableDictionary<TKey, TValue>.Values ObservableDictionary<TKey, TValue>.Count ObservableDictionary<TKey, TValue>.IsReadOnly ObservableDictionary<TKey, TValue>.ObjectChanged ObservableDictionary<TKey, TValue>.Add(TKey, TValue) ObservableDictionary<TKey, TValue>.Add(KeyValuePair<TKey, TValue>) ObservableDictionary<TKey, TValue>.Clear() ObservableDictionary<TKey, TValue>.Contains(KeyValuePair<TKey, TValue>) ObservableDictionary<TKey, TValue>.ContainsKey(TKey) ObservableDictionary<TKey, TValue>.CopyTo(KeyValuePair<TKey, TValue>[], int) ObservableDictionary<TKey, TValue>.GetEnumerator() ObservableDictionary<TKey, TValue>.Remove(TKey) ObservableDictionary<TKey, TValue>.Remove(KeyValuePair<TKey, TValue>) ObservableDictionary<TKey, TValue>.TryGetValue(TKey, out TValue) ObservableDictionary<TKey, TValue>.Dispose() ObservableDictionary<TKey, TValue>.RaisePropertyChanged() ObservableDictionary<TKey, TValue>.RaisePropertyChanged(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties SerializedList public List<SerializedKeyValuePair<TKey, TValue>> SerializedList { get; set; } Property Value List<SerializedKeyValuePair<TKey, TValue>> Methods OnAfterDeserialize() public void OnAfterDeserialize() OnBeforeSerialize() public void OnBeforeSerialize()"
  },
  "api/TMPEffects.SerializedCollections.html": {
    "href": "api/TMPEffects.SerializedCollections.html",
    "title": "Namespace TMPEffects.SerializedCollections | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.SerializedCollections Classes ObservableDictionary<TKey, TValue> SerializedDictionaryAttribute SerializedDictionary<TKey, TValue> SerializedObservableDictionary<TKey, TValue> Structs SerializedKeyValuePair<TKey, TValue>"
  },
  "api/TMPEffects.TMPAnimations.AnimationContext.html": {
    "href": "api/TMPEffects.TMPAnimations.AnimationContext.html",
    "title": "Class AnimationContext | TMPEffects documentation",
    "keywords": "Class AnimationContext Namespace TMPEffects.TMPAnimations Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. public class AnimationContext : IAnimationContext Inheritance object AnimationContext Implements IAnimationContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AnimationContext(IAnimatorContext, ICharDataState, SegmentData, object) public AnimationContext(IAnimatorContext animatorContext, ICharDataState state, SegmentData segmentData, object customData) Parameters animatorContext IAnimatorContext state ICharDataState segmentData SegmentData customData object Fields finishedDict public Dictionary<int, bool> finishedDict Field Value Dictionary<int, bool> Properties AnimatorContext The context of the animating TMPAnimator. public IAnimatorContext AnimatorContext { get; set; } Property Value IAnimatorContext CustomData The custom data object. public object CustomData { get; } Property Value object SegmentData Data about the animation segment. public SegmentData SegmentData { get; set; } Property Value SegmentData State The current state of the CharData, with the previous animations applied. public ICharDataState State { get; } Property Value ICharDataState Methods FinishAnimation(CharData) Set the animation to be considered finished for the given character. public void FinishAnimation(CharData cData) Parameters cData CharData Finished(int) Check if the animation is considered finished for the character at the given index. public bool Finished(int index) Parameters index int Returns bool Finished(CharData) Check if the animation is considered finished for the given character. public bool Finished(CharData cData) Parameters cData CharData Returns bool ResetFinishAnimation() public void ResetFinishAnimation() ResetFinishAnimation(int) public void ResetFinishAnimation(int index) Parameters index int ResetFinishAnimation(CharData) public void ResetFinishAnimation(CharData cData) Parameters cData CharData"
  },
  "api/TMPEffects.TMPAnimations.AnimationUtility.Wave.PulseExtrema.html": {
    "href": "api/TMPEffects.TMPAnimations.AnimationUtility.Wave.PulseExtrema.html",
    "title": "Enum AnimationUtility.Wave.PulseExtrema | TMPEffects documentation",
    "keywords": "Enum AnimationUtility.Wave.PulseExtrema Namespace TMPEffects.TMPAnimations If the wave has a CrestWait or TroughWait, PulseExtrema defines whether an extremum is passed once the wait time begins, or once it ends. [Flags] public enum AnimationUtility.Wave.PulseExtrema Fields Both = Early | Late Early = 1 Late = 2"
  },
  "api/TMPEffects.TMPAnimations.AnimationUtility.Wave.html": {
    "href": "api/TMPEffects.TMPAnimations.AnimationUtility.Wave.html",
    "title": "Class AnimationUtility.Wave | TMPEffects documentation",
    "keywords": "Class AnimationUtility.Wave Namespace TMPEffects.TMPAnimations A wave. Allows you to easily create periodic animations. You should take a look at the online documentation for this one: https://tmpeffects.luca3317.dev/docs/tmpanimator_animationutility_wave.html [Serializable] public class AnimationUtility.Wave : AnimationUtility.WaveBase, ISerializationCallbackReceiver Inheritance object AnimationUtility.WaveBase AnimationUtility.Wave Implements ISerializationCallbackReceiver Inherited Members AnimationUtility.WaveBase.UpPeriod AnimationUtility.WaveBase.DownPeriod AnimationUtility.WaveBase.Amplitude AnimationUtility.WaveBase.Velocity AnimationUtility.WaveBase.Period AnimationUtility.WaveBase.WaveLength AnimationUtility.WaveBase.EffectiveUpPeriod AnimationUtility.WaveBase.EffectiveDownPeriod AnimationUtility.WaveBase.EffectivePeriod AnimationUtility.WaveBase.Frequency AnimationUtility.WaveBase.wavelength Constructors Wave() public Wave() Wave(AnimationCurve, AnimationCurve, float, float, float, float) public Wave(AnimationCurve upwardCurve, AnimationCurve downwardCurve, float upPeriod, float downPeriod, float amplitude, float uniformity = 1) Parameters upwardCurve AnimationCurve downwardCurve AnimationCurve upPeriod float downPeriod float amplitude float uniformity float Wave(AnimationCurve, AnimationCurve, float, float, float, float, float, float) public Wave(AnimationCurve upwardCurve, AnimationCurve downwardCurve, float upPeriod, float downPeriod, float amplitude, float crestWait, float troughWait, float uniformity = 1) Parameters upwardCurve AnimationCurve downwardCurve AnimationCurve upPeriod float downPeriod float amplitude float crestWait float troughWait float uniformity float Properties CrestWait How long to stay at the crest of the wave. public float CrestWait { get; set; } Property Value float DownwardCurve The downward curve of the wave. public AnimationCurve DownwardCurve { get; set; } Property Value AnimationCurve TroughWait How long to stay at the trough of the wave. public float TroughWait { get; set; } Property Value float Uniformity The uniformity of the wave. Defines how much the offset passed in when evaluating the wave is considered. A visual representation of this can be found in the online documentation: https://tmpeffects.luca3317.dev/docs/tmpanimator_animationutility_wave.html public float Uniformity { get; set; } Property Value float UpwardCurve The upward curve of the wave. public AnimationCurve UpwardCurve { get; set; } Property Value AnimationCurve Methods Evaluate(float, float, bool) Evaluate the wave. This will automatically choose the correct way to interpret the wave. public (float Value, int Direction) Evaluate(float time, float offset, bool realtimeWait = true) Parameters time float The time value. offset float The offset. Affected by Uniformity. realtimeWait bool Whether to use real time (i.e. whether to use Period or EffectivePeriod). Returns (float Value, int Direction) Value: The value of the wave at the given time and offset. Direction: Whether youre currently travelling up the wave (=1) or down the wave (=-1). EvaluateAsInvertedPulse(float, float, bool) Evaluate the wave as an inverted pulse explicitly, ignoring the TroughWait. public (float, int) EvaluateAsInvertedPulse(float time, float offset, bool realTimeWait = true) Parameters time float The time value. offset float The offset. Affected by Uniformity. realTimeWait bool Whether to use real time (i.e. whether to use Period or EffectivePeriod). Returns (float Value, int Direction) Item1: The value of the wave at the given time and offset. Item2: Whether youre currently travelling up the wave (=1) or down the wave (=-1). Exceptions Exception EvaluateAsOneDirectionalPulse(float, float, bool) Evaluate the wave as a one-directional pulse explicitly. public (float, int) EvaluateAsOneDirectionalPulse(float time, float offset, bool realTimeWait = true) Parameters time float The time value. offset float The offset. Affected by Uniformity. realTimeWait bool Whether to use real time (i.e. whether to use Period or EffectivePeriod). Returns (float Value, int Direction) Item1: The value of the wave at the given time and offset. Item2: Whether youre currently travelling up the wave (=1) or down the wave (=-1). Exceptions Exception EvaluateAsPulse(float, float, bool) Evaluate the wave as a pulse explicitly, ignoring the CrestWait. public (float, int) EvaluateAsPulse(float time, float offset, bool realTimeWait = true) Parameters time float The time value. offset float The offset. Affected by Uniformity. realTimeWait bool Whether to use real time (i.e. whether to use Period or EffectivePeriod). Returns (float Value, int Direction) Item1: The value of the wave at the given time and offset. Item2: Whether youre currently travelling up the wave (=1) or down the wave (=-1). Exceptions Exception EvaluateAsWave(float, float) Evaluate the wave as a normal wave explicitly, ignoring both TroughWait and CrestWait. public (float, int) EvaluateAsWave(float time, float offset) Parameters time float The time value. offset float The offset. Affected by Uniformity. Returns (float Value, int Direction) Item1: The value of the wave at the given time and offset. Item2: Whether youre currently travelling up the wave (=1) or down the wave (=-1). Exceptions Exception OnAfterDeserialize() public override void OnAfterDeserialize() OnBeforeSerialize() public override void OnBeforeSerialize() PassedExtrema(float, float, float, bool, PulseExtrema) Check whether an extrema was passed between (time - deltaTime) and time. This will automatically choose the correct way to interpret the wave. public int PassedExtrema(float time, float deltaTime, float offset, bool realtimeWait = true, AnimationUtility.Wave.PulseExtrema extrema = PulseExtrema.Early) Parameters time float The time value. deltaTime float The delta time value. offset float The offset. Affected by Uniformity. realtimeWait bool Whether to use real time (i.e. whether to use Period or EffectivePeriod). extrema AnimationUtility.Wave.PulseExtrema If the wave has a CrestWait or TroughWait, this parameter defines whether an extremum is passed once the wait time begins, or once it ends. Returns int 1 if a maximum was passed, -1 if a minimum was passed, 0 if no extremum was passed. Exceptions Exception PassedInvertedPulseExtrema(float, float, float, bool, PulseExtrema) Check whether an extrema was passed between (time - deltaTime) and time. Explicitly interpret the wave as an inverted pulse, ignoring the TroughWait. public int PassedInvertedPulseExtrema(float time, float deltaTime, float offset, bool realtimeWait = true, AnimationUtility.Wave.PulseExtrema extrema = PulseExtrema.Early) Parameters time float The time value. deltaTime float The delta time value. offset float The offset. Affected by Uniformity. realtimeWait bool Whether to use real time (i.e. whether to use Period or EffectivePeriod). extrema AnimationUtility.Wave.PulseExtrema If the wave has a CrestWait or TroughWait, this parameter defines whether an extremum is passed once the wait time begins, or once it ends. Returns int 1 if a maximum was passed, -1 if a minimum was passed, 0 if no extremum was passed. Exceptions Exception PassedOneDirectionalPulseExtrema(float, float, float, bool, PulseExtrema) Check whether an extrema was passed between (time - deltaTime) and time. Explicitly interpret the wave as a one-directional pulse. public int PassedOneDirectionalPulseExtrema(float time, float deltaTime, float offset, bool realtimeWait = true, AnimationUtility.Wave.PulseExtrema extrema = PulseExtrema.Early) Parameters time float The time value. deltaTime float The delta time value. offset float The offset. Affected by Uniformity. realtimeWait bool Whether to use real time (i.e. whether to use Period or EffectivePeriod). extrema AnimationUtility.Wave.PulseExtrema If the wave has a CrestWait or TroughWait, this parameter defines whether an extremum is passed once the wait time begins, or once it ends. Returns int 1 if a maximum was passed, -1 if a minimum was passed, 0 if no extremum was passed. Exceptions Exception PassedPulseExtrema(float, float, float, bool, PulseExtrema) Check whether an extrema was passed between (time - deltaTime) and time. Explicitly interpret the wave as a pulse, ignoring the CrestWait. public int PassedPulseExtrema(float time, float deltaTime, float offset, bool realtimeWait = true, AnimationUtility.Wave.PulseExtrema extrema = PulseExtrema.Early) Parameters time float The time value. deltaTime float The delta time value. offset float The offset. Affected by Uniformity. realtimeWait bool Whether to use real time (i.e. whether to use Period or EffectivePeriod). extrema AnimationUtility.Wave.PulseExtrema If the wave has a CrestWait or TroughWait, this parameter defines whether an extremum is passed once the wait time begins, or once it ends. Returns int 1 if a maximum was passed, -1 if a minimum was passed, 0 if no extremum was passed. Exceptions Exception PassedWaveExtrema(float, float, float) Check whether an extrema was passed between (time - deltaTime) and time. Explicitly interpret the wave as a normal wave, ignoring both CrestWait and TroughWait. public int PassedWaveExtrema(float time, float deltaTime, float offset) Parameters time float The time value. deltaTime float The delta time value. offset float The offset. Affected by Uniformity. Returns int 1 if a maximum was passed, -1 if a minimum was passed, 0 if no extremum was passed. Exceptions Exception"
  },
  "api/TMPEffects.TMPAnimations.AnimationUtility.WaveBase.html": {
    "href": "api/TMPEffects.TMPAnimations.AnimationUtility.WaveBase.html",
    "title": "Class AnimationUtility.WaveBase | TMPEffects documentation",
    "keywords": "Class AnimationUtility.WaveBase Namespace TMPEffects.TMPAnimations Base class for AnimationUtility.Wave. Allows you to easily create periodic animations. You should take a look at the online documentation for this one: https://tmpeffects.luca3317.dev/docs/tmpanimator_animationutility_wave.html [Serializable] public abstract class AnimationUtility.WaveBase : ISerializationCallbackReceiver Inheritance object AnimationUtility.WaveBase Derived AnimationUtility.Wave Constructors WaveBase() public WaveBase() WaveBase(float, float, float, float) public WaveBase(float upPeriod, float downPeriod, float velocity, float amplitude) Parameters upPeriod float downPeriod float velocity float amplitude float Fields wavelength [NonSerialized] public float wavelength Field Value float Properties Amplitude The amplitude of the wave. public float Amplitude { get; set; } Property Value float DownPeriod The down period of the wave; how long it takes to travel down the wave. Ignores the Velocity of the wave, if you want to know it'll actually take to travel down the wave, use EffectiveDownPeriod. public float DownPeriod { get; set; } Property Value float EffectiveDownPeriod The amount of time it takes to travel down the wave. public float EffectiveDownPeriod { get; } Property Value float EffectivePeriod The amount of time it takes to travel the wave. Sum of EffectiveUpPeriod and EffectiveDownPeriod. public float EffectivePeriod { get; } Property Value float EffectiveUpPeriod The amount of time it takes to travel up the wave. public float EffectiveUpPeriod { get; } Property Value float Frequency The frequency of the wave. public float Frequency { get; } Property Value float Period The period of the wave; how long it takes to travel up and down the wave. Sum of UpPeriod and DownPeriod. Ignores the Velocity of the wave, if you want to know it'll actually take to travel the wave, use EffectivePeriod. public float Period { get; } Property Value float UpPeriod The up period of the wave; how long it takes to travel up the wave. Ignores the Velocity of the wave, if you want to know it'll actually take to travel up the wave, use EffectiveUpPeriod. public float UpPeriod { get; set; } Property Value float Velocity The velocity at which the wave travels. public float Velocity { get; set; } Property Value float WaveLength The wavelength of the wave. public float WaveLength { get; } Property Value float Methods OnAfterDeserialize() public virtual void OnAfterDeserialize() OnBeforeSerialize() public virtual void OnBeforeSerialize()"
  },
  "api/TMPEffects.TMPAnimations.AnimationUtility.html": {
    "href": "api/TMPEffects.TMPAnimations.AnimationUtility.html",
    "title": "Class AnimationUtility | TMPEffects documentation",
    "keywords": "Class AnimationUtility Namespace TMPEffects.TMPAnimations Utility methods for animations. public static class AnimationUtility Inheritance object AnimationUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddPivotDeltaRaw(Vector3, CharData, IAnimatorContext) Add a raw delta to the pivot of the character. This delta will ignore the animator's scaling. public static void AddPivotDeltaRaw(Vector3 delta, CharData cData, IAnimatorContext ctx) Parameters delta Vector3 The delta to add to the pivot. cData CharData The CharData to act on. ctx IAnimatorContext The IAnimatorContext of the animation. AddPivotDeltaRaw(Vector3, CharData, IAnimationContext) Add a raw delta to the pivot of the character. This delta will ignore the animator's scaling. public static void AddPivotDeltaRaw(Vector3 delta, CharData cData, IAnimationContext ctx) Parameters delta Vector3 The delta to add to the pivot. cData CharData The CharData to act on. ctx IAnimationContext The IAnimationContext of the animation. AddPositionDeltaRaw(Vector3, CharData, IAnimatorContext) Add a raw delta to the position of the character. This delta will ignore the animator's scaling. public static void AddPositionDeltaRaw(Vector3 delta, CharData cData, IAnimatorContext ctx) Parameters delta Vector3 The delta to add to the position of the character. cData CharData The CharData to act on. ctx IAnimatorContext The IAnimationContext of the animation. AddPositionDeltaRaw(Vector3, CharData, IAnimationContext) Add a raw delta to the position of the character. This delta will ignore the animator's scaling. public static void AddPositionDeltaRaw(Vector3 delta, CharData cData, IAnimationContext ctx) Parameters delta Vector3 The delta to add to the position of the character. cData CharData The CharData to act on. ctx IAnimationContext The IAnimationContext of the animation. AddVertexDeltaRaw(int, Vector3, CharData, IAnimatorContext) Add a raw delta to the vertex at the given index. This delta will ignore the animator's scaling. public static void AddVertexDeltaRaw(int index, Vector3 delta, CharData cData, IAnimatorContext ctx) Parameters index int Index of the vertex. delta Vector3 The delta to add to the vertex. cData CharData The CharData to act on. ctx IAnimatorContext The IAnimatorContext of the animation. AddVertexDeltaRaw(int, Vector3, CharData, IAnimationContext) Add a raw delta to the vertex at the given index. This delta will ignore the animator's scaling. public static void AddVertexDeltaRaw(int index, Vector3 delta, CharData cData, IAnimationContext ctx) Parameters index int Index of the vertex. delta Vector3 The delta to add to the vertex. cData CharData The CharData to act on. ctx IAnimationContext The IAnimationContext of the animation. AnchorToPosition(Vector2, CharData) Convert an anchor vector to its actual position vector. public static Vector2 AnchorToPosition(Vector2 anchor, CharData cData) Parameters anchor Vector2 The anchor to convert. cData CharData The CharData the anchor applies to. Returns Vector2 The position vector. ClosestPointOnLine(Vector3, Vector3, Vector3) Get the point on a line closest to the given point. public static Vector3 ClosestPointOnLine(Vector3 lineStart, Vector3 lineEnd, Vector3 point) Parameters lineStart Vector3 lineEnd Vector3 point Vector3 Returns Vector3 GetRawDelta(Vector3, CharData, IAnimatorContext) Calculate the raw version of the passed in delta, i.e. the one that will ignore the animator's scaling. public static Vector3 GetRawDelta(Vector3 delta, CharData cData, IAnimatorContext ctx) Parameters delta Vector3 The delta. cData CharData The CharData to act on. ctx IAnimatorContext The IAnimatorContext of the animation. Returns Vector3 The raw version of the passed in delta, i.e. the one that will ignore the TMPAnimator's scaling. GetRawDelta(Vector3, CharData, IAnimationContext) Calculate the raw version of the passed in delta, i.e. the one that will ignore the animator's scaling. public static Vector3 GetRawDelta(Vector3 delta, CharData cData, IAnimationContext ctx) Parameters delta Vector3 The delta. cData CharData The CharData to act on. ctx IAnimationContext The IAnimationContext of the animation. Returns Vector3 The raw version of the passed in delta, i.e. the one that will ignore the TMPAnimator's scaling. GetRawPivot(Vector3, CharData, IAnimatorContext) Calculate the raw version of the passed in pivot position, i.e. the one that will ignore the animator's scaling. public static Vector3 GetRawPivot(Vector3 position, CharData cData, IAnimatorContext ctx) Parameters position Vector3 The position to set the pivot to. cData CharData The CharData to act on. ctx IAnimatorContext The IAnimatorContext of the animation. Returns Vector3 The raw version of the passed in pivot position, i.e. the one that will ignore the TMPAnimator's scaling. GetRawPivot(Vector3, CharData, IAnimationContext) Calculate the raw version of the passed in pivot position, i.e. the one that will ignore the animator's scaling. public static Vector3 GetRawPivot(Vector3 position, CharData cData, IAnimationContext ctx) Parameters position Vector3 The position to set the pivot to. cData CharData The CharData to act on. ctx IAnimationContext The IAnimationContext of the animation. Returns Vector3 The raw version of the passed in pivot position, i.e. the one that will ignore the TMPAnimator's scaling. GetRawPosition(Vector3, CharData, IAnimatorContext) Calculate the raw version of the passed in character position, i.e. the one that will ignore the animator's scaling. public static Vector3 GetRawPosition(Vector3 position, CharData cData, IAnimatorContext ctx) Parameters position Vector3 The position to set the character to. cData CharData The CharData to act on. ctx IAnimatorContext The IAnimatorContext of the animation. Returns Vector3 The raw version of the passed in character position, i.e. the one that will ignore the TMPAnimator's scaling. GetRawPosition(Vector3, CharData, IAnimationContext) Calculate the raw version of the passed in character position, i.e. the one that will ignore the animator's scaling. public static Vector3 GetRawPosition(Vector3 position, CharData cData, IAnimationContext ctx) Parameters position Vector3 The position to set the character to. cData CharData The CharData to act on. ctx IAnimationContext The IAnimationContext of the animation. Returns Vector3 The raw version of the passed in character position, i.e. the one that will ignore the TMPAnimator's scaling. GetRawVertex(int, Vector3, CharData, IAnimatorContext) Calculate the raw version of the passed in vertex position, i.e. the one that will ignore the animator's scaling. public static Vector3 GetRawVertex(int index, Vector3 position, CharData cData, IAnimatorContext ctx) Parameters index int Index of the vertex. position Vector3 The position to set the vertex to. cData CharData The CharData to act on. ctx IAnimatorContext The IAnimatorContext of the animation. Returns Vector3 The raw version of the passed in vertex position, i.e. the one that will ignore the TMPAnimator's scaling. GetRawVertex(int, Vector3, CharData, IAnimationContext) Calculate the raw version of the passed in vertex position, i.e. the one that will ignore the animator's scaling. public static Vector3 GetRawVertex(int index, Vector3 position, CharData cData, IAnimationContext ctx) Parameters index int Index of the vertex. position Vector3 The position to set the vertex to. cData CharData The CharData to act on. ctx IAnimationContext The IAnimationContext of the animation. Returns Vector3 The raw version of the passed in vertex position, i.e. the one that will ignore the TMPAnimator's scaling. GetValue(AnimationCurve, WrapMode, float) Evaluate an AnimationCurve with different WrapModes. public static float GetValue(AnimationCurve curve, WrapMode wrapMode, float time) Parameters curve AnimationCurve The curve to evaluate. wrapMode WrapMode The WrapMode to use. time float The time value. Returns float The value of the curve at the given time value. Exceptions ArgumentException GetWaveOffset(CharData, IAnimationContext, WaveOffsetType) Get the wave offset to use based on the type. To be used with Evaluate(float, float, bool) (and related methods). public static float GetWaveOffset(CharData cData, IAnimationContext context, ParameterTypes.WaveOffsetType type) Parameters cData CharData The character to get the offset for. context IAnimationContext The context of the animation. type ParameterTypes.WaveOffsetType The type of the offset. Returns float The offset for a wave. Exceptions ArgumentException InverseScaleVector(Vector3, CharData, IAnimatorContext) Scale a vector for an animation inversely. TMPAnimator automatically scales animations; using this method scales the vector in a way that makes it effectively ignore the TMPAnimator's scaling. public static Vector3 InverseScaleVector(Vector3 vector, CharData cData, IAnimatorContext context) Parameters vector Vector3 The vector to scale inversely. cData CharData The CharData the vector will be applied to. context IAnimatorContext The IAnimatorContext of the animation. Returns Vector3 The inversely scaled vector. InverseScaleVector(Vector3, CharData, IAnimationContext) Scale a vector for an animation inversely. TMPAnimator automatically scales animations; using this method scales the vector in a way that makes it effectively ignore the TMPAnimator's scaling. public static Vector3 InverseScaleVector(Vector3 vector, CharData cData, IAnimationContext context) Parameters vector Vector3 The vector to scale inversely. cData CharData The CharData the vector will be applied to. context IAnimationContext The IAnimationContext of the animation. Returns Vector3 The inversely scaled vector. ScaleTextMesh(TMP_Text, float) Scale a given value to make it uniform between TextMeshPro and TextMeshProUGUI components. public static float ScaleTextMesh(TMP_Text text, float value) Parameters text TMP_Text value float The value to scale. Returns float The scaled value. ScaleVector(Vector3, CharData, IAnimatorContext) Scale a vector for an animation. Used by TMPAnimator to automatically scale animations. public static Vector3 ScaleVector(Vector3 vector, CharData cData, IAnimatorContext context) Parameters vector Vector3 The vector to scale. cData CharData The CharData the vector will applied to. context IAnimatorContext The IAnimatorContext of the animation. Returns Vector3 The scaled vector. ScaleVector(Vector3, CharData, IAnimationContext) Scale a vector for an animation. Makes vectors uniform relative to the size of the text. Used by TMPAnimator to automatically scale animations. public static Vector3 ScaleVector(Vector3 vector, CharData cData, IAnimationContext context) Parameters vector Vector3 The vector to scale. cData CharData The CharData the vector will applied to. context IAnimationContext The IAnimatorContext of the animation. Returns Vector3 The scaled vector. SetPivotRaw(Vector3, CharData, IAnimatorContext) Set the raw pivot of the character. This position will ignore the animator's scaling. public static void SetPivotRaw(Vector3 pivot, CharData cData, IAnimatorContext ctx) Parameters pivot Vector3 cData CharData The CharData to act on. ctx IAnimatorContext The IAnimatorContext of the animation. SetPivotRaw(Vector3, CharData, IAnimationContext) Set the raw pivot of the character. This position will ignore the animator's scaling. public static void SetPivotRaw(Vector3 pivot, CharData cData, IAnimationContext ctx) Parameters pivot Vector3 cData CharData The CharData to act on. ctx IAnimationContext The IAnimationContext of the animation. SetPositionRaw(Vector3, CharData, IAnimatorContext) Set the raw position of the character. This position will ignore the animator's scaling. public static void SetPositionRaw(Vector3 position, CharData cData, IAnimatorContext ctx) Parameters position Vector3 The position to set the character to. cData CharData The CharData to act on. ctx IAnimatorContext The IAnimatorContext of the animation. SetPositionRaw(Vector3, CharData, IAnimationContext) Set the raw position of the character. This position will ignore the animator's scaling. public static void SetPositionRaw(Vector3 position, CharData cData, IAnimationContext ctx) Parameters position Vector3 The position to set the character to. cData CharData The CharData to act on. ctx IAnimationContext The IAnimationContext of the animation. SetToCharacter(TMP_Character, TMP_Character, CharData, IAnimationContext) Set a character's UVs so it will look like another character. public static void SetToCharacter(TMP_Character newCharacter, TMP_Character originalCharacter, CharData cData, IAnimationContext context) Parameters newCharacter TMP_Character The character to change to. originalCharacter TMP_Character The original character of the cData. cData CharData The CharData of the character. context IAnimationContext The context of the animation. SetVertexRaw(int, Vector3, CharData, IAnimatorContext) Set the raw position of the vertex at the given index. This position will ignore the animator's scaling. public static void SetVertexRaw(int index, Vector3 position, CharData cData, IAnimatorContext ctx) Parameters index int Index of the vertex. position Vector3 The position to set the vertex to. cData CharData The CharData to act on. ctx IAnimatorContext The IAnimatorContext of the animation. SetVertexRaw(int, Vector3, CharData, IAnimationContext) Set the raw position of the vertex at the given index. This position will ignore the animator's scaling. public static void SetVertexRaw(int index, Vector3 position, CharData cData, IAnimationContext ctx) Parameters index int Index of the vertex. position Vector3 The position to set the vertex to. cData CharData The CharData to act on. ctx IAnimationContext The IAnimationContext of the animation."
  },
  "api/TMPEffects.TMPAnimations.Animations.AnimationStack-1.AnimContext.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.AnimationStack-1.AnimContext.html",
    "title": "Class AnimationStack<T>.AnimContext | TMPEffects documentation",
    "keywords": "Class AnimationStack<T>.AnimContext Namespace TMPEffects.TMPAnimations.Animations public class AnimationStack<T>.AnimContext : IAnimationContext Inheritance object AnimationStack<T>.AnimContext Implements IAnimationContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AnimContext(IAnimationContext, object) public AnimContext(IAnimationContext context, object customData) Parameters context IAnimationContext customData object Properties AnimatorContext The context of the animating TMPAnimator. public IAnimatorContext AnimatorContext { get; } Property Value IAnimatorContext CustomData The custom data object. public object CustomData { get; } Property Value object SegmentData Data about the animation segment. public SegmentData SegmentData { get; } Property Value SegmentData State The current state of the CharData, with the previous animations applied. public ICharDataState State { get; } Property Value ICharDataState Methods FinishAnimation(CharData) Set the animation to be considered finished for the given character. public void FinishAnimation(CharData cData) Parameters cData CharData Finished(int) Check if the animation is considered finished for the character at the given index. public bool Finished(int index) Parameters index int Returns bool Finished(CharData) Check if the animation is considered finished for the given character. public bool Finished(CharData cData) Parameters cData CharData Returns bool ResetFinished(CharData) public void ResetFinished(CharData cData) Parameters cData CharData"
  },
  "api/TMPEffects.TMPAnimations.Animations.AnimationStack-1.AnimPrefixTuple.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.AnimationStack-1.AnimPrefixTuple.html",
    "title": "Struct AnimationStack<T>.AnimPrefixTuple | TMPEffects documentation",
    "keywords": "Struct AnimationStack<T>.AnimPrefixTuple Namespace TMPEffects.TMPAnimations.Animations [Serializable] public struct AnimationStack<T>.AnimPrefixTuple Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors AnimPrefixTuple(T, string) public AnimPrefixTuple(T animation, string prefix) Parameters animation T prefix string Fields animation public T animation Field Value T prefix public string prefix Field Value string"
  },
  "api/TMPEffects.TMPAnimations.Animations.AnimationStack-1.Data.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.AnimationStack-1.Data.html",
    "title": "Class AnimationStack<T>.Data | TMPEffects documentation",
    "keywords": "Class AnimationStack<T>.Data Namespace TMPEffects.TMPAnimations.Animations public class AnimationStack<T>.Data Inheritance object AnimationStack<T>.Data Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ContextCache public Dictionary<ITMPAnimation, IAnimationContext> ContextCache Field Value Dictionary<ITMPAnimation, IAnimationContext> ObjectCache public Dictionary<ITMPAnimation, object> ObjectCache Field Value Dictionary<ITMPAnimation, object>"
  },
  "api/TMPEffects.TMPAnimations.Animations.AnimationStack-1.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.AnimationStack-1.html",
    "title": "Class AnimationStack<T> | TMPEffects documentation",
    "keywords": "Class AnimationStack<T> Namespace TMPEffects.TMPAnimations.Animations [Serializable] public class AnimationStack<T> : ITMPAnimation where T : ITMPAnimation Type Parameters T Inheritance object AnimationStack<T> Implements ITMPAnimation Derived BasicAnimationStack HideAnimationStack ShowAnimationStack Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields animations protected List<AnimationStack<T>.AnimPrefixTuple> animations Field Value List<AnimationStack<T>.AnimPrefixTuple> Methods Animate(CharData, IAnimationContext) Animate the given character. public virtual void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public object GetNewCustomData() Returns object The custom data object for this animation. PopulateContextCache(Data, IAnimationContext) protected void PopulateContextCache(AnimationStack<T>.Data data, IAnimationContext context) Parameters data AnimationStack<T>.Data context IAnimationContext SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.Animations.AnimationStackObject.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.AnimationStackObject.html",
    "title": "Class AnimationStackObject | TMPEffects documentation",
    "keywords": "Class AnimationStackObject Namespace TMPEffects.TMPAnimations.Animations public class AnimationStackObject : TMPAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPAnimation AnimationStackObject Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPAnimation.ObjectChanged TMPAnimation.OnValidate() TMPAnimation.OnDestroy() TMPAnimation.RaiseObjectChanged() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public override object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.Animations.BasicAnimationStack.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.BasicAnimationStack.html",
    "title": "Class BasicAnimationStack | TMPEffects documentation",
    "keywords": "Class BasicAnimationStack Namespace TMPEffects.TMPAnimations.Animations [Serializable] public class BasicAnimationStack : AnimationStack<TMPAnimation>, ITMPAnimation Inheritance object AnimationStack<TMPAnimation> BasicAnimationStack Implements ITMPAnimation Inherited Members AnimationStack<TMPAnimation>.animations AnimationStack<TMPAnimation>.Animate(CharData, IAnimationContext) AnimationStack<TMPAnimation>.PopulateContextCache(AnimationStack<TMPAnimation>.Data, IAnimationContext) AnimationStack<TMPAnimation>.GetNewCustomData() AnimationStack<TMPAnimation>.SetParameters(object, IDictionary<string, string>) AnimationStack<TMPAnimation>.ValidateParameters(IDictionary<string, string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/TMPEffects.TMPAnimations.Animations.CharAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.CharAnimation.html",
    "title": "Class CharAnimation | TMPEffects documentation",
    "keywords": "Class CharAnimation Namespace TMPEffects.TMPAnimations.Animations public class CharAnimation : TMPAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPAnimation CharAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPAnimation.ObjectChanged TMPAnimation.OnValidate() TMPAnimation.OnDestroy() TMPAnimation.RaiseObjectChanged() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public override object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.Animations.ContPivotAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.ContPivotAnimation.html",
    "title": "Class ContPivotAnimation | TMPEffects documentation",
    "keywords": "Class ContPivotAnimation Namespace TMPEffects.TMPAnimations.Animations public class ContPivotAnimation : TMPAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPAnimation ContPivotAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPAnimation.ObjectChanged TMPAnimation.OnValidate() TMPAnimation.OnDestroy() TMPAnimation.RaiseObjectChanged() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public override object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.Animations.FadeAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.FadeAnimation.html",
    "title": "Class FadeAnimation | TMPEffects documentation",
    "keywords": "Class FadeAnimation Namespace TMPEffects.TMPAnimations.Animations public class FadeAnimation : TMPAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPAnimation FadeAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPAnimation.ObjectChanged TMPAnimation.OnValidate() TMPAnimation.OnDestroy() TMPAnimation.RaiseObjectChanged() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public override object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.Animations.FunkyAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.FunkyAnimation.html",
    "title": "Class FunkyAnimation | TMPEffects documentation",
    "keywords": "Class FunkyAnimation Namespace TMPEffects.TMPAnimations.Animations public class FunkyAnimation : TMPAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPAnimation FunkyAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPAnimation.ObjectChanged TMPAnimation.OnValidate() TMPAnimation.OnDestroy() TMPAnimation.RaiseObjectChanged() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public override object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.Animations.GrowAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.GrowAnimation.html",
    "title": "Class GrowAnimation | TMPEffects documentation",
    "keywords": "Class GrowAnimation Namespace TMPEffects.TMPAnimations.Animations public class GrowAnimation : TMPAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPAnimation GrowAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPAnimation.ObjectChanged TMPAnimation.OnValidate() TMPAnimation.OnDestroy() TMPAnimation.RaiseObjectChanged() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public override object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.Animations.HideAnimationStack.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.HideAnimationStack.html",
    "title": "Class HideAnimationStack | TMPEffects documentation",
    "keywords": "Class HideAnimationStack Namespace TMPEffects.TMPAnimations.Animations [Serializable] public class HideAnimationStack : AnimationStack<TMPHideAnimation>, ITMPAnimation Inheritance object AnimationStack<TMPHideAnimation> HideAnimationStack Implements ITMPAnimation Inherited Members AnimationStack<TMPHideAnimation>.animations AnimationStack<TMPHideAnimation>.PopulateContextCache(AnimationStack<TMPHideAnimation>.Data, IAnimationContext) AnimationStack<TMPHideAnimation>.GetNewCustomData() AnimationStack<TMPHideAnimation>.SetParameters(object, IDictionary<string, string>) AnimationStack<TMPHideAnimation>.ValidateParameters(IDictionary<string, string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator."
  },
  "api/TMPEffects.TMPAnimations.Animations.HideAnimationStackObject.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.HideAnimationStackObject.html",
    "title": "Class HideAnimationStackObject | TMPEffects documentation",
    "keywords": "Class HideAnimationStackObject Namespace TMPEffects.TMPAnimations.Animations public class HideAnimationStackObject : TMPHideAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPHideAnimation HideAnimationStackObject Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPHideAnimation.ObjectChanged TMPHideAnimation.OnValidate() TMPHideAnimation.OnDestroy() TMPHideAnimation.RaiseObjectChanged() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public override object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.Animations.PaletteAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.PaletteAnimation.html",
    "title": "Class PaletteAnimation | TMPEffects documentation",
    "keywords": "Class PaletteAnimation Namespace TMPEffects.TMPAnimations.Animations public class PaletteAnimation : TMPAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPAnimation PaletteAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPAnimation.ObjectChanged TMPAnimation.OnValidate() TMPAnimation.OnDestroy() TMPAnimation.RaiseObjectChanged() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public override object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.Animations.PivotAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.PivotAnimation.html",
    "title": "Class PivotAnimation | TMPEffects documentation",
    "keywords": "Class PivotAnimation Namespace TMPEffects.TMPAnimations.Animations public class PivotAnimation : TMPAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPAnimation PivotAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPAnimation.ObjectChanged TMPAnimation.OnValidate() TMPAnimation.OnDestroy() TMPAnimation.RaiseObjectChanged() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public override object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.Animations.ShakeAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.ShakeAnimation.html",
    "title": "Class ShakeAnimation | TMPEffects documentation",
    "keywords": "Class ShakeAnimation Namespace TMPEffects.TMPAnimations.Animations public class ShakeAnimation : TMPAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPAnimation ShakeAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPAnimation.ObjectChanged TMPAnimation.OnValidate() TMPAnimation.OnDestroy() TMPAnimation.RaiseObjectChanged() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public override object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.Animations.ShowAnimationStack.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.ShowAnimationStack.html",
    "title": "Class ShowAnimationStack | TMPEffects documentation",
    "keywords": "Class ShowAnimationStack Namespace TMPEffects.TMPAnimations.Animations [Serializable] public class ShowAnimationStack : AnimationStack<TMPShowAnimation>, ITMPAnimation Inheritance object AnimationStack<TMPShowAnimation> ShowAnimationStack Implements ITMPAnimation Inherited Members AnimationStack<TMPShowAnimation>.animations AnimationStack<TMPShowAnimation>.PopulateContextCache(AnimationStack<TMPShowAnimation>.Data, IAnimationContext) AnimationStack<TMPShowAnimation>.GetNewCustomData() AnimationStack<TMPShowAnimation>.SetParameters(object, IDictionary<string, string>) AnimationStack<TMPShowAnimation>.ValidateParameters(IDictionary<string, string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator."
  },
  "api/TMPEffects.TMPAnimations.Animations.ShowAnimationStackObject.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.ShowAnimationStackObject.html",
    "title": "Class ShowAnimationStackObject | TMPEffects documentation",
    "keywords": "Class ShowAnimationStackObject Namespace TMPEffects.TMPAnimations.Animations public class ShowAnimationStackObject : TMPShowAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPShowAnimation ShowAnimationStackObject Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPShowAnimation.ObjectChanged TMPShowAnimation.OnValidate() TMPShowAnimation.OnDestroy() TMPShowAnimation.RaiseObjectChanged() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public override object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.Animations.WaveAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.WaveAnimation.html",
    "title": "Class WaveAnimation | TMPEffects documentation",
    "keywords": "Class WaveAnimation Namespace TMPEffects.TMPAnimations.Animations public class WaveAnimation : TMPAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPAnimation WaveAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPAnimation.ObjectChanged TMPAnimation.OnValidate() TMPAnimation.OnDestroy() TMPAnimation.RaiseObjectChanged() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public override object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.Animations.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.html",
    "title": "Namespace TMPEffects.TMPAnimations.Animations | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.TMPAnimations.Animations Classes AnimationStackObject AnimationStack<T> AnimationStack<T>.AnimContext AnimationStack<T>.Data BasicAnimationStack CharAnimation ContPivotAnimation FadeAnimation FunkyAnimation GrowAnimation HideAnimationStack HideAnimationStackObject PaletteAnimation PivotAnimation ShakeAnimation ShowAnimationStack ShowAnimationStackObject WaveAnimation Structs AnimationStack<T>.AnimPrefixTuple"
  },
  "api/TMPEffects.TMPAnimations.HideAnimations.CharHideAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.HideAnimations.CharHideAnimation.html",
    "title": "Class CharHideAnimation | TMPEffects documentation",
    "keywords": "Class CharHideAnimation Namespace TMPEffects.TMPAnimations.HideAnimations public class CharHideAnimation : TMPHideAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPHideAnimation CharHideAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPHideAnimation.ObjectChanged TMPHideAnimation.OnValidate() TMPHideAnimation.OnDestroy() TMPHideAnimation.RaiseObjectChanged() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public override object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.HideAnimations.DummyHideAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.HideAnimations.DummyHideAnimation.html",
    "title": "Class DummyHideAnimation | TMPEffects documentation",
    "keywords": "Class DummyHideAnimation Namespace TMPEffects.TMPAnimations.HideAnimations public class DummyHideAnimation : TMPHideAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPHideAnimation DummyHideAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPHideAnimation.ObjectChanged TMPHideAnimation.OnValidate() TMPHideAnimation.OnDestroy() TMPHideAnimation.RaiseObjectChanged() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public override object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.HideAnimations.FadeHideAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.HideAnimations.FadeHideAnimation.html",
    "title": "Class FadeHideAnimation | TMPEffects documentation",
    "keywords": "Class FadeHideAnimation Namespace TMPEffects.TMPAnimations.HideAnimations public class FadeHideAnimation : TMPHideAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPHideAnimation FadeHideAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPHideAnimation.ObjectChanged TMPHideAnimation.OnValidate() TMPHideAnimation.OnDestroy() TMPHideAnimation.RaiseObjectChanged() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public override object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.HideAnimations.GrowHideAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.HideAnimations.GrowHideAnimation.html",
    "title": "Class GrowHideAnimation | TMPEffects documentation",
    "keywords": "Class GrowHideAnimation Namespace TMPEffects.TMPAnimations.HideAnimations public class GrowHideAnimation : TMPHideAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPHideAnimation GrowHideAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPHideAnimation.ObjectChanged TMPHideAnimation.OnValidate() TMPHideAnimation.OnDestroy() TMPHideAnimation.RaiseObjectChanged() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public override object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.HideAnimations.MoveInHideAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.HideAnimations.MoveInHideAnimation.html",
    "title": "Class MoveInHideAnimation | TMPEffects documentation",
    "keywords": "Class MoveInHideAnimation Namespace TMPEffects.TMPAnimations.HideAnimations public class MoveInHideAnimation : TMPHideAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPHideAnimation MoveInHideAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPHideAnimation.ObjectChanged TMPHideAnimation.OnValidate() TMPHideAnimation.OnDestroy() TMPHideAnimation.RaiseObjectChanged() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public override object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.HideAnimations.PivotHideAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.HideAnimations.PivotHideAnimation.html",
    "title": "Class PivotHideAnimation | TMPEffects documentation",
    "keywords": "Class PivotHideAnimation Namespace TMPEffects.TMPAnimations.HideAnimations public class PivotHideAnimation : TMPHideAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPHideAnimation PivotHideAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPHideAnimation.ObjectChanged TMPHideAnimation.OnValidate() TMPHideAnimation.OnDestroy() TMPHideAnimation.RaiseObjectChanged() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public override object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.HideAnimations.ShakeHideAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.HideAnimations.ShakeHideAnimation.html",
    "title": "Class ShakeHideAnimation | TMPEffects documentation",
    "keywords": "Class ShakeHideAnimation Namespace TMPEffects.TMPAnimations.HideAnimations public class ShakeHideAnimation : TMPHideAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPHideAnimation ShakeHideAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPHideAnimation.ObjectChanged TMPHideAnimation.OnValidate() TMPHideAnimation.OnDestroy() TMPHideAnimation.RaiseObjectChanged() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public override object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.HideAnimations.SpreadHideAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.HideAnimations.SpreadHideAnimation.html",
    "title": "Class SpreadHideAnimation | TMPEffects documentation",
    "keywords": "Class SpreadHideAnimation Namespace TMPEffects.TMPAnimations.HideAnimations public class SpreadHideAnimation : TMPHideAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPHideAnimation SpreadHideAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPHideAnimation.ObjectChanged TMPHideAnimation.OnValidate() TMPHideAnimation.OnDestroy() TMPHideAnimation.RaiseObjectChanged() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public override object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.HideAnimations.html": {
    "href": "api/TMPEffects.TMPAnimations.HideAnimations.html",
    "title": "Namespace TMPEffects.TMPAnimations.HideAnimations | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.TMPAnimations.HideAnimations Classes CharHideAnimation DummyHideAnimation FadeHideAnimation GrowHideAnimation MoveInHideAnimation PivotHideAnimation ShakeHideAnimation SpreadHideAnimation"
  },
  "api/TMPEffects.TMPAnimations.IAnimationContext.html": {
    "href": "api/TMPEffects.TMPAnimations.IAnimationContext.html",
    "title": "Interface IAnimationContext | TMPEffects documentation",
    "keywords": "Interface IAnimationContext Namespace TMPEffects.TMPAnimations Basic interface for animation contexts. public interface IAnimationContext Properties AnimatorContext The context of the animating TMPAnimator. IAnimatorContext AnimatorContext { get; } Property Value IAnimatorContext CustomData The custom data object. object CustomData { get; } Property Value object SegmentData Data about the animation segment. SegmentData SegmentData { get; } Property Value SegmentData State The current state of the CharData, with the previous animations applied. ICharDataState State { get; } Property Value ICharDataState Methods FinishAnimation(CharData) Set the animation to be considered finished for the given character. void FinishAnimation(CharData cData) Parameters cData CharData Finished(int) Check if the animation is considered finished for the character at the given index. bool Finished(int index) Parameters index int Returns bool Finished(CharData) Check if the animation is considered finished for the given character. bool Finished(CharData cData) Parameters cData CharData Returns bool"
  },
  "api/TMPEffects.TMPAnimations.ITMPAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.ITMPAnimation.html",
    "title": "Interface ITMPAnimation | TMPEffects documentation",
    "keywords": "Interface ITMPAnimation Namespace TMPEffects.TMPAnimations Base interface for all TMPEffects animations. public interface ITMPAnimation Methods Animate(CharData, IAnimationContext) Animate the given character. void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.ReadOnlyAnimationContext.html": {
    "href": "api/TMPEffects.TMPAnimations.ReadOnlyAnimationContext.html",
    "title": "Class ReadOnlyAnimationContext | TMPEffects documentation",
    "keywords": "Class ReadOnlyAnimationContext Namespace TMPEffects.TMPAnimations public class ReadOnlyAnimationContext : IAnimationContext Inheritance object ReadOnlyAnimationContext Implements IAnimationContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadOnlyAnimationContext(IAnimatorContext, ICharDataState, SegmentData, object) public ReadOnlyAnimationContext(IAnimatorContext animatorContext, ICharDataState state, SegmentData segmentData, object customData) Parameters animatorContext IAnimatorContext state ICharDataState segmentData SegmentData customData object ReadOnlyAnimationContext(IAnimationContext) public ReadOnlyAnimationContext(IAnimationContext context) Parameters context IAnimationContext Properties AnimatorContext The context of the animating TMPAnimator. public IAnimatorContext AnimatorContext { get; } Property Value IAnimatorContext CustomData The custom data object. public object CustomData { get; } Property Value object SegmentData Data about the animation segment. public SegmentData SegmentData { get; } Property Value SegmentData State The current state of the CharData, with the previous animations applied. public ICharDataState State { get; } Property Value ICharDataState Methods FinishAnimation(CharData) Set the animation to be considered finished for the given character. public void FinishAnimation(CharData cData) Parameters cData CharData Finished(int) Check if the animation is considered finished for the character at the given index. public bool Finished(int index) Parameters index int Returns bool Finished(CharData) Check if the animation is considered finished for the given character. public bool Finished(CharData cData) Parameters cData CharData Returns bool"
  },
  "api/TMPEffects.TMPAnimations.ShowAnimations.CharShowAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.ShowAnimations.CharShowAnimation.html",
    "title": "Class CharShowAnimation | TMPEffects documentation",
    "keywords": "Class CharShowAnimation Namespace TMPEffects.TMPAnimations.ShowAnimations public class CharShowAnimation : TMPShowAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPShowAnimation CharShowAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPShowAnimation.ObjectChanged TMPShowAnimation.OnValidate() TMPShowAnimation.OnDestroy() TMPShowAnimation.RaiseObjectChanged() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public override object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.ShowAnimations.DummyShowAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.ShowAnimations.DummyShowAnimation.html",
    "title": "Class DummyShowAnimation | TMPEffects documentation",
    "keywords": "Class DummyShowAnimation Namespace TMPEffects.TMPAnimations.ShowAnimations public class DummyShowAnimation : TMPShowAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPShowAnimation DummyShowAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPShowAnimation.ObjectChanged TMPShowAnimation.OnValidate() TMPShowAnimation.OnDestroy() TMPShowAnimation.RaiseObjectChanged() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public override object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.ShowAnimations.FadeShowAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.ShowAnimations.FadeShowAnimation.html",
    "title": "Class FadeShowAnimation | TMPEffects documentation",
    "keywords": "Class FadeShowAnimation Namespace TMPEffects.TMPAnimations.ShowAnimations public class FadeShowAnimation : TMPShowAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPShowAnimation FadeShowAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPShowAnimation.ObjectChanged TMPShowAnimation.OnValidate() TMPShowAnimation.OnDestroy() TMPShowAnimation.RaiseObjectChanged() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public override object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.ShowAnimations.GrowShowAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.ShowAnimations.GrowShowAnimation.html",
    "title": "Class GrowShowAnimation | TMPEffects documentation",
    "keywords": "Class GrowShowAnimation Namespace TMPEffects.TMPAnimations.ShowAnimations public class GrowShowAnimation : TMPShowAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPShowAnimation GrowShowAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPShowAnimation.ObjectChanged TMPShowAnimation.OnValidate() TMPShowAnimation.OnDestroy() TMPShowAnimation.RaiseObjectChanged() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public override object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.ShowAnimations.MoveInShowAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.ShowAnimations.MoveInShowAnimation.html",
    "title": "Class MoveInShowAnimation | TMPEffects documentation",
    "keywords": "Class MoveInShowAnimation Namespace TMPEffects.TMPAnimations.ShowAnimations public class MoveInShowAnimation : TMPShowAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPShowAnimation MoveInShowAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPShowAnimation.ObjectChanged TMPShowAnimation.OnValidate() TMPShowAnimation.OnDestroy() TMPShowAnimation.RaiseObjectChanged() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public override object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.ShowAnimations.PivotShowAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.ShowAnimations.PivotShowAnimation.html",
    "title": "Class PivotShowAnimation | TMPEffects documentation",
    "keywords": "Class PivotShowAnimation Namespace TMPEffects.TMPAnimations.ShowAnimations public class PivotShowAnimation : TMPShowAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPShowAnimation PivotShowAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPShowAnimation.ObjectChanged TMPShowAnimation.OnValidate() TMPShowAnimation.OnDestroy() TMPShowAnimation.RaiseObjectChanged() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public override object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.ShowAnimations.ShakeShowAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.ShowAnimations.ShakeShowAnimation.html",
    "title": "Class ShakeShowAnimation | TMPEffects documentation",
    "keywords": "Class ShakeShowAnimation Namespace TMPEffects.TMPAnimations.ShowAnimations public class ShakeShowAnimation : TMPShowAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPShowAnimation ShakeShowAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPShowAnimation.ObjectChanged TMPShowAnimation.OnValidate() TMPShowAnimation.OnDestroy() TMPShowAnimation.RaiseObjectChanged() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public override object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.ShowAnimations.SpreadAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.ShowAnimations.SpreadAnimation.html",
    "title": "Class SpreadAnimation | TMPEffects documentation",
    "keywords": "Class SpreadAnimation Namespace TMPEffects.TMPAnimations.ShowAnimations public class SpreadAnimation : TMPAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPAnimation SpreadAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPAnimation.ObjectChanged TMPAnimation.OnValidate() TMPAnimation.OnDestroy() TMPAnimation.RaiseObjectChanged() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public override object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.ShowAnimations.SpreadShowAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.ShowAnimations.SpreadShowAnimation.html",
    "title": "Class SpreadShowAnimation | TMPEffects documentation",
    "keywords": "Class SpreadShowAnimation Namespace TMPEffects.TMPAnimations.ShowAnimations public class SpreadShowAnimation : TMPShowAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPShowAnimation SpreadShowAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPShowAnimation.ObjectChanged TMPShowAnimation.OnValidate() TMPShowAnimation.OnDestroy() TMPShowAnimation.RaiseObjectChanged() Methods Animate(CharData, IAnimationContext) Animate the given character. public override void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public override object GetNewCustomData() Returns object The custom data object for this animation. SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.ShowAnimations.html": {
    "href": "api/TMPEffects.TMPAnimations.ShowAnimations.html",
    "title": "Namespace TMPEffects.TMPAnimations.ShowAnimations | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.TMPAnimations.ShowAnimations Classes CharShowAnimation DummyShowAnimation FadeShowAnimation GrowShowAnimation MoveInShowAnimation PivotShowAnimation ShakeShowAnimation SpreadAnimation SpreadShowAnimation"
  },
  "api/TMPEffects.TMPAnimations.TMPAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.TMPAnimation.html",
    "title": "Class TMPAnimation | TMPEffects documentation",
    "keywords": "Class TMPAnimation Namespace TMPEffects.TMPAnimations Base class for animations. public abstract class TMPAnimation : ScriptableObject, ITMPAnimation, INotifyObjectChanged Inheritance object TMPAnimation Implements ITMPAnimation INotifyObjectChanged Derived AnimationStackObject CharAnimation ContPivotAnimation FadeAnimation FunkyAnimation GrowAnimation PaletteAnimation PivotAnimation ShakeAnimation WaveAnimation SpreadAnimation TMPAnimationParameterless Methods Animate(CharData, IAnimationContext) Animate the given character. public abstract void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public abstract object GetNewCustomData() Returns object The custom data object for this animation. OnDestroy() protected virtual void OnDestroy() OnValidate() protected virtual void OnValidate() RaiseObjectChanged() protected void RaiseObjectChanged() SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public abstract void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public abstract bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise. Events ObjectChanged public event ObjectChangedEventHandler ObjectChanged Event Type ObjectChangedEventHandler"
  },
  "api/TMPEffects.TMPAnimations.TMPAnimationParameterless.html": {
    "href": "api/TMPEffects.TMPAnimations.TMPAnimationParameterless.html",
    "title": "Class TMPAnimationParameterless | TMPEffects documentation",
    "keywords": "Class TMPAnimationParameterless Namespace TMPEffects.TMPAnimations Base class for animations that dont take parameters. public abstract class TMPAnimationParameterless : TMPAnimation, ITMPAnimation, INotifyObjectChanged Inheritance object TMPAnimation TMPAnimationParameterless Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPAnimation.Animate(CharData, IAnimationContext) TMPAnimation.GetNewCustomData() TMPAnimation.ObjectChanged TMPAnimation.OnValidate() TMPAnimation.OnDestroy() TMPAnimation.RaiseObjectChanged() Methods SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.TMPHideAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.TMPHideAnimation.html",
    "title": "Class TMPHideAnimation | TMPEffects documentation",
    "keywords": "Class TMPHideAnimation Namespace TMPEffects.TMPAnimations Base class for all hide animations. public abstract class TMPHideAnimation : ScriptableObject, ITMPAnimation, INotifyObjectChanged Inheritance object TMPHideAnimation Implements ITMPAnimation INotifyObjectChanged Derived HideAnimationStackObject CharHideAnimation DummyHideAnimation FadeHideAnimation GrowHideAnimation MoveInHideAnimation PivotHideAnimation ShakeHideAnimation SpreadHideAnimation Methods Animate(CharData, IAnimationContext) Animate the given character. public abstract void Animate(CharData charData, IAnimationContext context) Parameters charData CharData context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public abstract object GetNewCustomData() Returns object The custom data object for this animation. OnDestroy() protected virtual void OnDestroy() OnValidate() protected virtual void OnValidate() RaiseObjectChanged() protected void RaiseObjectChanged() SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public abstract void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public abstract bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise. Events ObjectChanged public event ObjectChangedEventHandler ObjectChanged Event Type ObjectChangedEventHandler"
  },
  "api/TMPEffects.TMPAnimations.TMPShowAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.TMPShowAnimation.html",
    "title": "Class TMPShowAnimation | TMPEffects documentation",
    "keywords": "Class TMPShowAnimation Namespace TMPEffects.TMPAnimations Base class for all show animations. public abstract class TMPShowAnimation : ScriptableObject, ITMPAnimation, INotifyObjectChanged Inheritance object TMPShowAnimation Implements ITMPAnimation INotifyObjectChanged Derived ShowAnimationStackObject CharShowAnimation DummyShowAnimation FadeShowAnimation GrowShowAnimation MoveInShowAnimation PivotShowAnimation ShakeShowAnimation SpreadShowAnimation Methods Animate(CharData, IAnimationContext) Animate the given character. public abstract void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public abstract object GetNewCustomData() Returns object The custom data object for this animation. OnDestroy() protected virtual void OnDestroy() OnValidate() protected virtual void OnValidate() RaiseObjectChanged() protected void RaiseObjectChanged() SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public abstract void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public abstract bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise. Events ObjectChanged public event ObjectChangedEventHandler ObjectChanged Event Type ObjectChangedEventHandler"
  },
  "api/TMPEffects.TMPAnimations.html": {
    "href": "api/TMPEffects.TMPAnimations.html",
    "title": "Namespace TMPEffects.TMPAnimations | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.TMPAnimations Classes AnimationContext Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. AnimationUtility Utility methods for animations. AnimationUtility.Wave A wave. Allows you to easily create periodic animations. You should take a look at the online documentation for this one: https://tmpeffects.luca3317.dev/docs/tmpanimator_animationutility_wave.html AnimationUtility.WaveBase Base class for AnimationUtility.Wave. Allows you to easily create periodic animations. You should take a look at the online documentation for this one: https://tmpeffects.luca3317.dev/docs/tmpanimator_animationutility_wave.html ReadOnlyAnimationContext TMPAnimation Base class for animations. TMPAnimationParameterless Base class for animations that dont take parameters. TMPHideAnimation Base class for all hide animations. TMPShowAnimation Base class for all show animations. Interfaces IAnimationContext Basic interface for animation contexts. ITMPAnimation Base interface for all TMPEffects animations. Enums AnimationUtility.Wave.PulseExtrema If the wave has a CrestWait or TroughWait, PulseExtrema defines whether an extremum is passed once the wait time begins, or once it ends."
  },
  "api/TMPEffects.TMPCommands.Commands.DebugCommand.html": {
    "href": "api/TMPEffects.TMPCommands.Commands.DebugCommand.html",
    "title": "Class DebugCommand | TMPEffects documentation",
    "keywords": "Class DebugCommand Namespace TMPEffects.TMPCommands.Commands public class DebugCommand : TMPCommand, ITMPCommand, INotifyObjectChanged Inheritance object TMPCommand DebugCommand Implements ITMPCommand INotifyObjectChanged Inherited Members TMPCommand.ObjectChanged TMPCommand.OnValidate() TMPCommand.OnDestroy() TMPCommand.RaiseObjectChanged() Properties ExecuteInstantly Whether the command is executed the moment the TMPWriter begin writing. Otherwise, it is executed when the TMPWriter shows the character at the corresponding index. public override bool ExecuteInstantly { get; } Property Value bool ExecuteOnSkip Whether the command should be executed by the TMPWriter if its text position is skipped over. public override bool ExecuteOnSkip { get; } Property Value bool ExecuteRepeatable Whether the command may be executed multiple times if, for example, the TMPWriter is reset to an earlier text position after the command has been executed. An example for a command that should not be repeatable is one that triggers a quest, or adds an item to the player's inventory. public override bool ExecuteRepeatable { get; } Property Value bool TagType public override TagType TagType { get; } Property Value TagType Methods ExecuteCommand(TMPCommandArgs) Execute the command. public override void ExecuteCommand(TMPCommandArgs args) Parameters args TMPCommandArgs The arguments for the command. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> The parameters to validate. Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPCommands.Commands.DelayCommand.html": {
    "href": "api/TMPEffects.TMPCommands.Commands.DelayCommand.html",
    "title": "Class DelayCommand | TMPEffects documentation",
    "keywords": "Class DelayCommand Namespace TMPEffects.TMPCommands.Commands public class DelayCommand : TMPCommand, ITMPCommand, INotifyObjectChanged Inheritance object TMPCommand DelayCommand Implements ITMPCommand INotifyObjectChanged Inherited Members TMPCommand.ObjectChanged TMPCommand.OnValidate() TMPCommand.OnDestroy() TMPCommand.RaiseObjectChanged() Properties ExecuteInstantly Whether the command is executed the moment the TMPWriter begin writing. Otherwise, it is executed when the TMPWriter shows the character at the corresponding index. public override bool ExecuteInstantly { get; } Property Value bool ExecuteOnSkip Whether the command should be executed by the TMPWriter if its text position is skipped over. public override bool ExecuteOnSkip { get; } Property Value bool ExecuteRepeatable Whether the command may be executed multiple times if, for example, the TMPWriter is reset to an earlier text position after the command has been executed. An example for a command that should not be repeatable is one that triggers a quest, or adds an item to the player's inventory. public override bool ExecuteRepeatable { get; } Property Value bool TagType public override TagType TagType { get; } Property Value TagType Methods ExecuteCommand(TMPCommandArgs) Execute the command. public override void ExecuteCommand(TMPCommandArgs args) Parameters args TMPCommandArgs The arguments for the command. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> The parameters to validate. Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPCommands.Commands.ShowCommand.html": {
    "href": "api/TMPEffects.TMPCommands.Commands.ShowCommand.html",
    "title": "Class ShowCommand | TMPEffects documentation",
    "keywords": "Class ShowCommand Namespace TMPEffects.TMPCommands.Commands public class ShowCommand : TMPCommand, ITMPCommand, INotifyObjectChanged Inheritance object TMPCommand ShowCommand Implements ITMPCommand INotifyObjectChanged Inherited Members TMPCommand.ObjectChanged TMPCommand.OnValidate() TMPCommand.OnDestroy() TMPCommand.RaiseObjectChanged() Properties ExecuteInstantly Whether the command is executed the moment the TMPWriter begin writing. Otherwise, it is executed when the TMPWriter shows the character at the corresponding index. public override bool ExecuteInstantly { get; } Property Value bool ExecuteOnSkip Whether the command should be executed by the TMPWriter if its text position is skipped over. public override bool ExecuteOnSkip { get; } Property Value bool ExecuteRepeatable Whether the command may be executed multiple times if, for example, the TMPWriter is reset to an earlier text position after the command has been executed. An example for a command that should not be repeatable is one that triggers a quest, or adds an item to the player's inventory. public override bool ExecuteRepeatable { get; } Property Value bool TagType public override TagType TagType { get; } Property Value TagType Methods ExecuteCommand(TMPCommandArgs) Execute the command. public override void ExecuteCommand(TMPCommandArgs args) Parameters args TMPCommandArgs The arguments for the command. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> The parameters to validate. Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPCommands.Commands.SkippableCommand.html": {
    "href": "api/TMPEffects.TMPCommands.Commands.SkippableCommand.html",
    "title": "Class SkippableCommand | TMPEffects documentation",
    "keywords": "Class SkippableCommand Namespace TMPEffects.TMPCommands.Commands public class SkippableCommand : TMPCommand, ITMPCommand, INotifyObjectChanged Inheritance object TMPCommand SkippableCommand Implements ITMPCommand INotifyObjectChanged Inherited Members TMPCommand.ObjectChanged TMPCommand.OnValidate() TMPCommand.OnDestroy() TMPCommand.RaiseObjectChanged() Properties ExecuteInstantly Whether the command is executed the moment the TMPWriter begin writing. Otherwise, it is executed when the TMPWriter shows the character at the corresponding index. public override bool ExecuteInstantly { get; } Property Value bool ExecuteOnSkip Whether the command should be executed by the TMPWriter if its text position is skipped over. public override bool ExecuteOnSkip { get; } Property Value bool ExecuteRepeatable Whether the command may be executed multiple times if, for example, the TMPWriter is reset to an earlier text position after the command has been executed. An example for a command that should not be repeatable is one that triggers a quest, or adds an item to the player's inventory. public override bool ExecuteRepeatable { get; } Property Value bool TagType public override TagType TagType { get; } Property Value TagType Methods ExecuteCommand(TMPCommandArgs) Execute the command. public override void ExecuteCommand(TMPCommandArgs args) Parameters args TMPCommandArgs The arguments for the command. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> The parameters to validate. Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPCommands.Commands.WaitCommand.html": {
    "href": "api/TMPEffects.TMPCommands.Commands.WaitCommand.html",
    "title": "Class WaitCommand | TMPEffects documentation",
    "keywords": "Class WaitCommand Namespace TMPEffects.TMPCommands.Commands public class WaitCommand : TMPCommand, ITMPCommand, INotifyObjectChanged Inheritance object TMPCommand WaitCommand Implements ITMPCommand INotifyObjectChanged Inherited Members TMPCommand.ObjectChanged TMPCommand.OnValidate() TMPCommand.OnDestroy() TMPCommand.RaiseObjectChanged() Properties ExecuteInstantly Whether the command is executed the moment the TMPWriter begin writing. Otherwise, it is executed when the TMPWriter shows the character at the corresponding index. public override bool ExecuteInstantly { get; } Property Value bool ExecuteOnSkip Whether the command should be executed by the TMPWriter if its text position is skipped over. public override bool ExecuteOnSkip { get; } Property Value bool ExecuteRepeatable Whether the command may be executed multiple times if, for example, the TMPWriter is reset to an earlier text position after the command has been executed. An example for a command that should not be repeatable is one that triggers a quest, or adds an item to the player's inventory. public override bool ExecuteRepeatable { get; } Property Value bool TagType public override TagType TagType { get; } Property Value TagType Methods ExecuteCommand(TMPCommandArgs) Execute the command. public override void ExecuteCommand(TMPCommandArgs args) Parameters args TMPCommandArgs The arguments for the command. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> The parameters to validate. Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPCommands.Commands.html": {
    "href": "api/TMPEffects.TMPCommands.Commands.html",
    "title": "Namespace TMPEffects.TMPCommands.Commands | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.TMPCommands.Commands Classes DebugCommand DelayCommand ShowCommand SkippableCommand WaitCommand"
  },
  "api/TMPEffects.TMPCommands.ITMPCommand.html": {
    "href": "api/TMPEffects.TMPCommands.ITMPCommand.html",
    "title": "Interface ITMPCommand | TMPEffects documentation",
    "keywords": "Interface ITMPCommand Namespace TMPEffects.TMPCommands Base interface for all TMPEffects commands. public interface ITMPCommand Properties ExecuteInstantly Whether the command is executed the moment the TMPWriter begin writing. Otherwise, it is executed when the TMPWriter shows the character at the corresponding index. bool ExecuteInstantly { get; } Property Value bool ExecuteOnSkip Whether the command should be executed by the TMPWriter if its text position is skipped over. bool ExecuteOnSkip { get; } Property Value bool ExecuteRepeatable Whether the command may be executed multiple times if, for example, the TMPWriter is reset to an earlier text position after the command has been executed. An example for a command that should not be repeatable is one that triggers a quest, or adds an item to the player's inventory. bool ExecuteRepeatable { get; } Property Value bool TagType TagType TagType { get; } Property Value TagType Methods ExecuteCommand(TMPCommandArgs) Execute the command. void ExecuteCommand(TMPCommandArgs args) Parameters args TMPCommandArgs The arguments for the command. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> The parameters to validate. Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPCommands.TMPCommand.html": {
    "href": "api/TMPEffects.TMPCommands.TMPCommand.html",
    "title": "Class TMPCommand | TMPEffects documentation",
    "keywords": "Class TMPCommand Namespace TMPEffects.TMPCommands Base class for commands. public abstract class TMPCommand : ScriptableObject, ITMPCommand, INotifyObjectChanged Inheritance object TMPCommand Implements ITMPCommand INotifyObjectChanged Derived DebugCommand DelayCommand ShowCommand SkippableCommand WaitCommand Properties ExecuteInstantly Whether the command is executed the moment the TMPWriter begin writing. Otherwise, it is executed when the TMPWriter shows the character at the corresponding index. public abstract bool ExecuteInstantly { get; } Property Value bool ExecuteOnSkip Whether the command should be executed by the TMPWriter if its text position is skipped over. public abstract bool ExecuteOnSkip { get; } Property Value bool ExecuteRepeatable Whether the command may be executed multiple times if, for example, the TMPWriter is reset to an earlier text position after the command has been executed. An example for a command that should not be repeatable is one that triggers a quest, or adds an item to the player's inventory. public virtual bool ExecuteRepeatable { get; } Property Value bool TagType public abstract TagType TagType { get; } Property Value TagType Methods ExecuteCommand(TMPCommandArgs) Execute the command. public abstract void ExecuteCommand(TMPCommandArgs args) Parameters args TMPCommandArgs The arguments for the command. OnDestroy() protected virtual void OnDestroy() OnValidate() protected virtual void OnValidate() RaiseObjectChanged() protected void RaiseObjectChanged() ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public abstract bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> The parameters to validate. Returns bool true if the parameters were successfully validated; false otherwise. Events ObjectChanged public event ObjectChangedEventHandler ObjectChanged Event Type ObjectChangedEventHandler"
  },
  "api/TMPEffects.TMPCommands.TMPCommandArgs.html": {
    "href": "api/TMPEffects.TMPCommands.TMPCommandArgs.html",
    "title": "Class TMPCommandArgs | TMPEffects documentation",
    "keywords": "Class TMPCommandArgs Namespace TMPEffects.TMPCommands The argument object for ITMPCommand. public class TMPCommandArgs Inheritance object TMPCommandArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TMPCommandArgs(TMPEffectTag, TMPEffectTagIndices, TMPWriter) public TMPCommandArgs(TMPEffectTag tag, TMPEffectTagIndices indices, TMPWriter writer) Parameters tag TMPEffectTag indices TMPEffectTagIndices writer TMPWriter Fields indices The indices of the tag. public readonly TMPEffectTagIndices indices Field Value TMPEffectTagIndices tag The tag of the command. public readonly TMPEffectTag tag Field Value TMPEffectTag writer The TMPWriter that executed this command. public readonly TMPWriter writer Field Value TMPWriter"
  },
  "api/TMPEffects.TMPCommands.TMPSceneCommand.html": {
    "href": "api/TMPEffects.TMPCommands.TMPSceneCommand.html",
    "title": "Struct TMPSceneCommand | TMPEffects documentation",
    "keywords": "Struct TMPSceneCommand Namespace TMPEffects.TMPCommands Struct defining scene commands. [Serializable] public struct TMPSceneCommand : ITMPCommand Implements ITMPCommand Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties ExecuteInstantly Whether the command is executed the moment the TMPWriter begin writing. Otherwise, it is executed when the TMPWriter shows the character at the corresponding index. public bool ExecuteInstantly { get; } Property Value bool ExecuteOnSkip Whether the command should be executed by the TMPWriter if its text position is skipped over. public bool ExecuteOnSkip { get; } Property Value bool ExecuteRepeatable Whether the command may be executed multiple times if, for example, the TMPWriter is reset to an earlier text position after the command has been executed. An example for a command that should not be repeatable is one that triggers a quest, or adds an item to the player's inventory. public bool ExecuteRepeatable { get; } Property Value bool TagType public TagType TagType { get; } Property Value TagType Methods ExecuteCommand(TMPCommandArgs) Execute the command. public void ExecuteCommand(TMPCommandArgs args) Parameters args TMPCommandArgs The arguments for the command. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> The parameters to validate. Returns bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPCommands.TagType.html": {
    "href": "api/TMPEffects.TMPCommands.TagType.html",
    "title": "Enum TagType | TMPEffects documentation",
    "keywords": "Enum TagType Namespace TMPEffects.TMPCommands public enum TagType Fields Block = 1 Either = 2 Index = 0"
  },
  "api/TMPEffects.TMPCommands.html": {
    "href": "api/TMPEffects.TMPCommands.html",
    "title": "Namespace TMPEffects.TMPCommands | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.TMPCommands Classes TMPCommand Base class for commands. TMPCommandArgs The argument object for ITMPCommand. Structs TMPSceneCommand Struct defining scene commands. Interfaces ITMPCommand Base interface for all TMPEffects commands. Enums TagType"
  },
  "api/TMPEffects.TMPEvents.TMPEvent.html": {
    "href": "api/TMPEffects.TMPEvents.TMPEvent.html",
    "title": "Class TMPEvent | TMPEffects documentation",
    "keywords": "Class TMPEvent Namespace TMPEffects.TMPEvents Class used by TMPWriter to raise event tags. [Serializable] public class TMPEvent : UnityEvent<TMPEventArgs> Inheritance object TMPEvent Constructors TMPEvent() public TMPEvent()"
  },
  "api/TMPEffects.TMPEvents.TMPEventArgs.html": {
    "href": "api/TMPEffects.TMPEvents.TMPEventArgs.html",
    "title": "Class TMPEventArgs | TMPEffects documentation",
    "keywords": "Class TMPEventArgs Namespace TMPEffects.TMPEvents The argument object for TMPEvent. public class TMPEventArgs : EventArgs Inheritance object EventArgs TMPEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TMPEventArgs(TMPEffectTag, TMPEffectTagIndices, TMPWriter) public TMPEventArgs(TMPEffectTag tag, TMPEffectTagIndices indices, TMPWriter writer) Parameters tag TMPEffectTag indices TMPEffectTagIndices writer TMPWriter Properties Indices The indices of the tag. public TMPEffectTagIndices Indices { get; } Property Value TMPEffectTagIndices Tag The tag of the event. public TMPEffectTag Tag { get; } Property Value TMPEffectTag Writer The TMPWriter that invoked this event. public TMPWriter Writer { get; } Property Value TMPWriter"
  },
  "api/TMPEffects.TMPEvents.html": {
    "href": "api/TMPEffects.TMPEvents.html",
    "title": "Namespace TMPEffects.TMPEvents | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.TMPEvents Classes TMPEvent Class used by TMPWriter to raise event tags. TMPEventArgs The argument object for TMPEvent."
  },
  "api/TMPEffects.TMPSceneAnimations.TMPSceneAnimation.html": {
    "href": "api/TMPEffects.TMPSceneAnimations.TMPSceneAnimation.html",
    "title": "Class TMPSceneAnimation | TMPEffects documentation",
    "keywords": "Class TMPSceneAnimation Namespace TMPEffects.TMPSceneAnimations Base class for all BasicSceneAnimations. public abstract class TMPSceneAnimation : TMPSceneAnimationBase, ITMPAnimation, INotifyObjectChanged Inheritance object TMPSceneAnimationBase TMPSceneAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPSceneAnimationBase.Animate(CharData, IAnimationContext) TMPSceneAnimationBase.GetNewCustomData() TMPSceneAnimationBase.SetParameters(object, IDictionary<string, string>) TMPSceneAnimationBase.ValidateParameters(IDictionary<string, string>) TMPSceneAnimationBase.ObjectChanged TMPSceneAnimationBase.OnValidate() TMPSceneAnimationBase.OnDestroy() TMPSceneAnimationBase.RaiseObjectChanged()"
  },
  "api/TMPEffects.TMPSceneAnimations.TMPSceneAnimationBase.html": {
    "href": "api/TMPEffects.TMPSceneAnimations.TMPSceneAnimationBase.html",
    "title": "Class TMPSceneAnimationBase | TMPEffects documentation",
    "keywords": "Class TMPSceneAnimationBase Namespace TMPEffects.TMPSceneAnimations Base class for all SceneAnimations. public abstract class TMPSceneAnimationBase : MonoBehaviour, ITMPAnimation, INotifyObjectChanged Inheritance object TMPSceneAnimationBase Implements ITMPAnimation INotifyObjectChanged Derived TMPSceneAnimation TMPSceneHideAnimation TMPSceneShowAnimation Methods Animate(CharData, IAnimationContext) Animate the given character. public abstract void Animate(CharData cData, IAnimationContext context) Parameters cData CharData Data about the character. context IAnimationContext Data about the animator. GetNewCustomData() Create and get a new custom data object for this animation. public abstract object GetNewCustomData() Returns object The custom data object for this animation. OnDestroy() protected virtual void OnDestroy() OnValidate() protected virtual void OnValidate() RaiseObjectChanged() protected void RaiseObjectChanged() SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. public abstract void SetParameters(object customData, IDictionary<string, string> parameters) Parameters customData object The custom data for this animation. parameters IDictionary<string, string> Parameters as key-value-pairs. ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. public abstract bool ValidateParameters(IDictionary<string, string> parameters) Parameters parameters IDictionary<string, string> Returns bool true if the parameters were successfully validated; false otherwise. Events ObjectChanged public event ObjectChangedEventHandler ObjectChanged Event Type ObjectChangedEventHandler"
  },
  "api/TMPEffects.TMPSceneAnimations.TMPSceneHideAnimation.html": {
    "href": "api/TMPEffects.TMPSceneAnimations.TMPSceneHideAnimation.html",
    "title": "Class TMPSceneHideAnimation | TMPEffects documentation",
    "keywords": "Class TMPSceneHideAnimation Namespace TMPEffects.TMPSceneAnimations Base class for all SceneHideAnimations. public abstract class TMPSceneHideAnimation : TMPSceneAnimationBase, ITMPAnimation, INotifyObjectChanged Inheritance object TMPSceneAnimationBase TMPSceneHideAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPSceneAnimationBase.Animate(CharData, IAnimationContext) TMPSceneAnimationBase.GetNewCustomData() TMPSceneAnimationBase.SetParameters(object, IDictionary<string, string>) TMPSceneAnimationBase.ValidateParameters(IDictionary<string, string>) TMPSceneAnimationBase.ObjectChanged TMPSceneAnimationBase.OnValidate() TMPSceneAnimationBase.OnDestroy() TMPSceneAnimationBase.RaiseObjectChanged()"
  },
  "api/TMPEffects.TMPSceneAnimations.TMPSceneShowAnimation.html": {
    "href": "api/TMPEffects.TMPSceneAnimations.TMPSceneShowAnimation.html",
    "title": "Class TMPSceneShowAnimation | TMPEffects documentation",
    "keywords": "Class TMPSceneShowAnimation Namespace TMPEffects.TMPSceneAnimations Base class for all SceneShowAnimations. public abstract class TMPSceneShowAnimation : TMPSceneAnimationBase, ITMPAnimation, INotifyObjectChanged Inheritance object TMPSceneAnimationBase TMPSceneShowAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPSceneAnimationBase.Animate(CharData, IAnimationContext) TMPSceneAnimationBase.GetNewCustomData() TMPSceneAnimationBase.SetParameters(object, IDictionary<string, string>) TMPSceneAnimationBase.ValidateParameters(IDictionary<string, string>) TMPSceneAnimationBase.ObjectChanged TMPSceneAnimationBase.OnValidate() TMPSceneAnimationBase.OnDestroy() TMPSceneAnimationBase.RaiseObjectChanged()"
  },
  "api/TMPEffects.TMPSceneAnimations.html": {
    "href": "api/TMPEffects.TMPSceneAnimations.html",
    "title": "Namespace TMPEffects.TMPSceneAnimations | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.TMPSceneAnimations Classes TMPSceneAnimation Base class for all BasicSceneAnimations. TMPSceneAnimationBase Base class for all SceneAnimations. TMPSceneHideAnimation Base class for all SceneHideAnimations. TMPSceneShowAnimation Base class for all SceneShowAnimations."
  },
  "api/TMPEffects.Tags.Collections.CachedCollection-1.MinMax.html": {
    "href": "api/TMPEffects.Tags.Collections.CachedCollection-1.MinMax.html",
    "title": "Class CachedCollection<T>.MinMax | TMPEffects documentation",
    "keywords": "Class CachedCollection<T>.MinMax Namespace TMPEffects.Tags.Collections The minimum and maximum collection index of cached tags potentially relevant to a given text index. public class CachedCollection<T>.MinMax Inheritance object CachedCollection<T>.MinMax Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MinMax(int) public MinMax(int textIndex) Parameters textIndex int Fields MaxIndex The maximum collection index of cached tags potentially relevant to a given text index. public int MaxIndex Field Value int MinIndex The minimum collection index of cached tags potentially relevant to a given text index. public int MinIndex Field Value int"
  },
  "api/TMPEffects.Tags.Collections.CachedCollection-1.StructContainingEnumerable.html": {
    "href": "api/TMPEffects.Tags.Collections.CachedCollection-1.StructContainingEnumerable.html",
    "title": "Struct CachedCollection<T>.StructContainingEnumerable | TMPEffects documentation",
    "keywords": "Struct CachedCollection<T>.StructContainingEnumerable Namespace TMPEffects.Tags.Collections Helper struct for GetContaining_NonAlloc(int). public struct CachedCollection<T>.StructContainingEnumerable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors StructContainingEnumerable(List<T>, int, int, int) public StructContainingEnumerable(List<T> pool, int containedIndex, int maxIndex, int minIndex) Parameters pool List<T> containedIndex int maxIndex int minIndex int Methods GetEnumerator() public CachedCollection<T>.StructContainingEnumerator GetEnumerator() Returns CachedCollection<T>.StructContainingEnumerator"
  },
  "api/TMPEffects.Tags.Collections.CachedCollection-1.StructContainingEnumerator.html": {
    "href": "api/TMPEffects.Tags.Collections.CachedCollection-1.StructContainingEnumerator.html",
    "title": "Struct CachedCollection<T>.StructContainingEnumerator | TMPEffects documentation",
    "keywords": "Struct CachedCollection<T>.StructContainingEnumerator Namespace TMPEffects.Tags.Collections Helper struct for GetContaining_NonAlloc(int). public struct CachedCollection<T>.StructContainingEnumerator Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Current public T Current { get; } Property Value T Methods MoveNext() public bool MoveNext() Returns bool Reset() public void Reset()"
  },
  "api/TMPEffects.Tags.Collections.CachedCollection-1.StructReversedContainingEnumerable.html": {
    "href": "api/TMPEffects.Tags.Collections.CachedCollection-1.StructReversedContainingEnumerable.html",
    "title": "Struct CachedCollection<T>.StructReversedContainingEnumerable | TMPEffects documentation",
    "keywords": "Struct CachedCollection<T>.StructReversedContainingEnumerable Namespace TMPEffects.Tags.Collections Helper struct for GetContainingReversed_NonAlloc(int). public struct CachedCollection<T>.StructReversedContainingEnumerable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors StructReversedContainingEnumerable(List<T>, int, int, int) public StructReversedContainingEnumerable(List<T> pool, int containedIndex, int maxIndex, int minIndex) Parameters pool List<T> containedIndex int maxIndex int minIndex int Methods GetEnumerator() public CachedCollection<T>.StructReversedContainingEnumerator GetEnumerator() Returns CachedCollection<T>.StructReversedContainingEnumerator"
  },
  "api/TMPEffects.Tags.Collections.CachedCollection-1.StructReversedContainingEnumerator.html": {
    "href": "api/TMPEffects.Tags.Collections.CachedCollection-1.StructReversedContainingEnumerator.html",
    "title": "Struct CachedCollection<T>.StructReversedContainingEnumerator | TMPEffects documentation",
    "keywords": "Struct CachedCollection<T>.StructReversedContainingEnumerator Namespace TMPEffects.Tags.Collections Helper struct for GetContainingReversed_NonAlloc(int). public struct CachedCollection<T>.StructReversedContainingEnumerator Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Current public T Current { get; } Property Value T Methods MoveNext() public bool MoveNext() Returns bool Reset() public void Reset()"
  },
  "api/TMPEffects.Tags.Collections.CachedCollection-1.html": {
    "href": "api/TMPEffects.Tags.Collections.CachedCollection-1.html",
    "title": "Class CachedCollection<T> | TMPEffects documentation",
    "keywords": "Class CachedCollection<T> Namespace TMPEffects.Tags.Collections Manages a collection of ITagWrapper that represent a cached tag. Will keep itself synchronized with the given ObservableTagCollection. public class CachedCollection<T> : IEnumerable<T>, IEnumerable where T : ITagWrapper Type Parameters T The type of tag wrapper / cached tags. Inheritance object CachedCollection<T> Implements IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Designed for fast \"Get tags that contain index\" operations. Ideally use along with TMPEffects.Tags.Collections.TagCollectionManager<TKey> to get the ObservableTagCollection (see implementations of both TMPAnimator and TMPWriter for examples). Constructors CachedCollection(ITagCacher<T>, ObservableTagCollection) public CachedCollection(ITagCacher<T> cacher, ObservableTagCollection tagCollection) Parameters cacher ITagCacher<T> tagCollection ObservableTagCollection Properties Count Amount of cached tags contained in this collection. public int Count { get; } Property Value int this[int] Get the cached tag of type T at the given collection index. public T this[int index] { get; } Parameters index int The collection index. Property Value T The cached tag of type T at the given collection index. Exceptions ArgumentOutOfRangeException Methods GetAt(int) Enumerates all cached tags that start at the given text index. public IEnumerable<T> GetAt(int textIndex) Parameters textIndex int The text index. Returns IEnumerable<T> All cached tags that start at the given text index. GetContaining(int) Enumerates all cached tags that contain the given text index. public IEnumerable<T> GetContaining(int textIndex) Parameters textIndex int The text index. Returns IEnumerable<T> All cached tags that contain the given text index. GetContainingReversed_NonAlloc(int) Enumerates all cached tags that contain the given text index in reversed order, without allocating any memory. public CachedCollection<T>.StructReversedContainingEnumerable GetContainingReversed_NonAlloc(int textIndex) Parameters textIndex int The text index. Returns CachedCollection<T>.StructReversedContainingEnumerable All cached tags that contain the given text index. GetContaining_NonAlloc(int) Enumerates all cached tags that contain the given text index, without allocating any memory. public CachedCollection<T>.StructContainingEnumerable GetContaining_NonAlloc(int textIndex) Parameters textIndex int The text index. Returns CachedCollection<T>.StructContainingEnumerable All cached tags that contain the given text index. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> An enumerator that can be used to iterate through the collection. HasAny() Whether this collection has any cached tags. public bool HasAny() Returns bool true if there is at least one cached tag; false otherwise. HasAnyAt(int) Whether this collection has any cached tags that start at the given text index. public bool HasAnyAt(int index) Parameters index int Returns bool true if there is at least one cached tag that starts at the given text index; false otherwise. HasAnyContaining(int) Whether this collection has any cached tags that contain the given text index. public bool HasAnyContaining(int textIndex) Parameters textIndex int The text index. Returns bool true if there is at least one cached tag that contains the given text index; false otherwise. MinMaxAt(int) Get the CachedCollection<T>.MinMax for a text index. public CachedCollection<T>.MinMax MinMaxAt(int textIndex) Parameters textIndex int The text index. Returns CachedCollection<T>.MinMax The CachedCollection<T>.MinMax for the text index, if one exists; otherwise null."
  },
  "api/TMPEffects.Tags.Collections.IReadOnlyTagCollection.html": {
    "href": "api/TMPEffects.Tags.Collections.IReadOnlyTagCollection.html",
    "title": "Interface IReadOnlyTagCollection | TMPEffects documentation",
    "keywords": "Interface IReadOnlyTagCollection Namespace TMPEffects.Tags.Collections A readonly collection of TMPEffectTagTuple. public interface IReadOnlyTagCollection : IReadOnlyCollection<TMPEffectTagTuple>, IEnumerable<TMPEffectTagTuple>, IEnumerable Inherited Members IReadOnlyCollection<TMPEffectTagTuple>.Count IEnumerable<TMPEffectTagTuple>.GetEnumerator() Properties TagCount The amount of TMPEffectTagTuple in this collection. int TagCount { get; } Property Value int Methods Contains(TMPEffectTag, TMPEffectTagIndices?) Whether this collection contains the given tag with the given indices (if supplied). bool Contains(TMPEffectTag tag, TMPEffectTagIndices? indices = null) Parameters tag TMPEffectTag The tag to check. indices TMPEffectTagIndices? The tag indices. If you don't care about the tag's indices, leave as default. Returns bool true if this collection contains the given tag with the given indices (if supplied); otherwise false. IndicesOf(TMPEffectTag) Get the associated indices of the given tag. TMPEffectTagIndices? IndicesOf(TMPEffectTag tag) Parameters tag TMPEffectTag The tag to get the indices of. Returns TMPEffectTagIndices? The indices of the given tag, if the tag is contained in the collection; otherwise null. TagAt(int, int?) Get the tag at the given startIndex with the correct order. If order is left to default, the first tag at startIndex will be returned. TMPEffectTag TagAt(int startIndex, int? order = null) Parameters startIndex int The start index. order int? The order at the start index. Returns TMPEffectTag The tag at the given indices, if it exists; otherwise null. TagsAt(int) Get the tags starting at the given startIndex. IEnumerable<TMPEffectTagTuple> TagsAt(int startIndex) Parameters startIndex int The start index. Returns IEnumerable<TMPEffectTagTuple> All tags starting at the given startIndex. TagsAt(int, TMPEffectTagTuple[], int) Get the tags starting at the given startIndex. int TagsAt(int startIndex, TMPEffectTagTuple[] buffer, int bufferIndex = 0) Parameters startIndex int The start index. buffer TMPEffectTagTuple[] The buffer the tags will be stored in. bufferIndex int The offset index of the buffer, i.e. the index at which the tags should be inserted into buffer. Returns int The amount of tags starting at the given startIndex."
  },
  "api/TMPEffects.Tags.Collections.ITagCollection.html": {
    "href": "api/TMPEffects.Tags.Collections.ITagCollection.html",
    "title": "Interface ITagCollection | TMPEffects documentation",
    "keywords": "Interface ITagCollection Namespace TMPEffects.Tags.Collections A writable collection of TMPEffectTagTuple. public interface ITagCollection : IReadOnlyTagCollection, IReadOnlyCollection<TMPEffectTagTuple>, IEnumerable<TMPEffectTagTuple>, IEnumerable Inherited Members IReadOnlyTagCollection.TagCount IReadOnlyTagCollection.Contains(TMPEffectTag, TMPEffectTagIndices?) IReadOnlyTagCollection.IndicesOf(TMPEffectTag) IReadOnlyTagCollection.TagsAt(int, TMPEffectTagTuple[], int) IReadOnlyTagCollection.TagsAt(int) IReadOnlyTagCollection.TagAt(int, int?) IReadOnlyCollection<TMPEffectTagTuple>.Count IEnumerable<TMPEffectTagTuple>.GetEnumerator() Methods Clear() Clear the entire collection. void Clear() Remove(TMPEffectTag, TMPEffectTagIndices?) Remove the given tag, with the specified indices (if supplied). bool Remove(TMPEffectTag tag, TMPEffectTagIndices? indices = null) Parameters tag TMPEffectTag The tag to remove. indices TMPEffectTagIndices? The indices of the tag. Returns bool true if the tag was removed; false otherwise. RemoveAllAt(int, TMPEffectTagTuple[], int) Remove all tags starting at the given startIndex. int RemoveAllAt(int startIndex, TMPEffectTagTuple[] buffer = null, int bufferIndex = 0) Parameters startIndex int The start index. buffer TMPEffectTagTuple[] Buffer to save the removed tags into. Leave at default if you do not want to get the tags. bufferIndex int The offset index of the buffer, i.e. the index at which the tags should be inserted into buffer. Returns int The amount of removed tags. RemoveAt(int, int?) Remove the tag starting at the given startIndex with the correct order. If order is left to default, the first tag at startIndex will be removed. bool RemoveAt(int startIndex, int? order = null) Parameters startIndex int The start index. order int? The order at the start index. Returns bool true if a tag was removed; false otherwise. TryAdd(TMPEffectTag, int, int, int?) Attempt to add a new tag to the collection. If orderAtIndex is left to default, the order will be assigned so it is the first tag at the given startIndex. bool TryAdd(TMPEffectTag tag, int startIndex = 0, int endIndex = -1, int? orderAtIndex = null) Parameters tag TMPEffectTag The tag to add. startIndex int The tag's start index. endIndex int The tag's end index. orderAtIndex int? The tag's order at index. Returns bool true if the tag was successfully added; false otherwise. TryAdd(TMPEffectTag, TMPEffectTagIndices) Attempt to add a new tag to the collection. bool TryAdd(TMPEffectTag tag, TMPEffectTagIndices indices) Parameters tag TMPEffectTag The tag to add. indices TMPEffectTagIndices The tag's indices. Returns bool true if the tag was successfully added; false otherwise."
  },
  "api/TMPEffects.Tags.Collections.ITagCollectionManager-1.html": {
    "href": "api/TMPEffects.Tags.Collections.ITagCollectionManager-1.html",
    "title": "Interface ITagCollectionManager<TKey> | TMPEffects documentation",
    "keywords": "Interface ITagCollectionManager<TKey> Namespace TMPEffects.Tags.Collections Interface for a manager of ITagCollection. public interface ITagCollectionManager<TKey> Type Parameters TKey Properties this[TKey] Get the ITagCollection associated with the given key. ITagCollection this[TKey key] { get; } Parameters key TKey The key. Property Value ITagCollection The ITagCollection associated with the given key. Exceptions KeyNotFoundException Methods AddKey(TKey) Add a key. This will automatically create an associated ITagCollection. ITagCollection AddKey(TKey key) Parameters key TKey The key to add. Returns ITagCollection The automatically created ITagCollection. RemoveKey(TKey) Remove a key. bool RemoveKey(TKey key) Parameters key TKey The key to remove. Returns bool true if the key was removed; false otherwise."
  },
  "api/TMPEffects.Tags.Collections.ObservableTagCollection.html": {
    "href": "api/TMPEffects.Tags.Collections.ObservableTagCollection.html",
    "title": "Class ObservableTagCollection | TMPEffects documentation",
    "keywords": "Class ObservableTagCollection Namespace TMPEffects.Tags.Collections An observable ITagCollection. public class ObservableTagCollection : TagCollection, ITagCollection, IReadOnlyTagCollection, IReadOnlyCollection<TMPEffectTagTuple>, IEnumerable<TMPEffectTagTuple>, IEnumerable, INotifyCollectionChanged Inheritance object TagCollection ObservableTagCollection Implements ITagCollection IReadOnlyTagCollection IReadOnlyCollection<TMPEffectTagTuple> IEnumerable<TMPEffectTagTuple> IEnumerable INotifyCollectionChanged Inherited Members TagCollection.AdjustOrderAtIndexAt(int, TMPEffectTagIndices) TagCollection.CopyTo(TMPEffectTag[], int) TagCollection.TagCount TagCollection.Contains(TMPEffectTag, TMPEffectTagIndices?) TagCollection.GetEnumerator() TagCollection.TagAt(int, int?) TagCollection.TagsAt(int, TMPEffectTagTuple[], int) TagCollection.TagsAt(int) TagCollection.IndicesOf(TMPEffectTag) TagCollection.FindIndex(TMPEffectTag) TagCollection.BinarySearchIndexOf(IComparable<TMPEffectTagIndices>) TagCollection.BinarySearchIndexFirstIndexOf(TagCollection.StartIndexOnly) TagCollection.tags TagCollection.validator object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ObservableTagCollection(IList<TMPEffectTagTuple>, ITMPTagValidator) public ObservableTagCollection(IList<TMPEffectTagTuple> tags, ITMPTagValidator validator = null) Parameters tags IList<TMPEffectTagTuple> validator ITMPTagValidator ObservableTagCollection(ITMPTagValidator) public ObservableTagCollection(ITMPTagValidator validator = null) Parameters validator ITMPTagValidator Methods Clear() Clear the entire collection. public override void Clear() InvokeEvent(NotifyCollectionChangedEventArgs) protected void InvokeEvent(NotifyCollectionChangedEventArgs e) Parameters e NotifyCollectionChangedEventArgs Remove(TMPEffectTag, TMPEffectTagIndices?) Remove the given tag, with the specified indices (if supplied). public override bool Remove(TMPEffectTag tag, TMPEffectTagIndices? indices = null) Parameters tag TMPEffectTag The tag to remove. indices TMPEffectTagIndices? The indices of the tag. Returns bool true if the tag was removed; false otherwise. RemoveAllAt(int, TMPEffectTagTuple[], int) Remove all tags starting at the given startIndex. public override int RemoveAllAt(int startIndex, TMPEffectTagTuple[] buffer = null, int bufferIndex = 0) Parameters startIndex int The start index. buffer TMPEffectTagTuple[] Buffer to save the removed tags into. Leave at default if you do not want to get the tags. bufferIndex int The offset index of the buffer, i.e. the index at which the tags should be inserted into buffer. Returns int The amount of removed tags. RemoveAt(int, int?) Remove the tag starting at the given startIndex with the correct order. If order is left to default, the first tag at startIndex will be removed. public override bool RemoveAt(int startIndex, int? order = null) Parameters startIndex int The start index. order int? The order at the start index. Returns bool true if a tag was removed; false otherwise. TryAdd(TMPEffectTag, int, int, int?) Attempt to add a new tag to the collection. If orderAtIndex is left to default, the order will be assigned so it is the first tag at the given startIndex. public override bool TryAdd(TMPEffectTag tag, int startIndex = 0, int endIndex = -1, int? orderAtIndex = null) Parameters tag TMPEffectTag The tag to add. startIndex int The tag's start index. endIndex int The tag's end index. orderAtIndex int? The tag's order at index. Returns bool true if the tag was successfully added; false otherwise. TryAdd(TMPEffectTag, TMPEffectTagIndices) Attempt to add a new tag to the collection. public override bool TryAdd(TMPEffectTag tag, TMPEffectTagIndices indices) Parameters tag TMPEffectTag The tag to add. indices TMPEffectTagIndices The tag's indices. Returns bool true if the tag was successfully added; false otherwise. Events CollectionChanged Raised when the collection changed. public event NotifyCollectionChangedEventHandler CollectionChanged Event Type NotifyCollectionChangedEventHandler"
  },
  "api/TMPEffects.Tags.Collections.ReadOnlyTagCollection.html": {
    "href": "api/TMPEffects.Tags.Collections.ReadOnlyTagCollection.html",
    "title": "Class ReadOnlyTagCollection | TMPEffects documentation",
    "keywords": "Class ReadOnlyTagCollection Namespace TMPEffects.Tags.Collections Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. public class ReadOnlyTagCollection : IReadOnlyTagCollection, IReadOnlyCollection<TMPEffectTagTuple>, IEnumerable<TMPEffectTagTuple>, IEnumerable Inheritance object ReadOnlyTagCollection Implements IReadOnlyTagCollection IReadOnlyCollection<TMPEffectTagTuple> IEnumerable<TMPEffectTagTuple> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties TagCount The amount of TMPEffectTagTuple in this collection. public int TagCount { get; } Property Value int Methods Contains(TMPEffectTag, TMPEffectTagIndices?) Whether this collection contains the given tag with the given indices (if supplied). public bool Contains(TMPEffectTag tag, TMPEffectTagIndices? indices = null) Parameters tag TMPEffectTag The tag to check. indices TMPEffectTagIndices? The tag indices. If you don't care about the tag's indices, leave as default. Returns bool true if this collection contains the given tag with the given indices (if supplied); otherwise false. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<TMPEffectTagTuple> GetEnumerator() Returns IEnumerator<TMPEffectTagTuple> An enumerator that can be used to iterate through the collection. IndicesOf(TMPEffectTag) Get the associated indices of the given tag. public TMPEffectTagIndices? IndicesOf(TMPEffectTag tag) Parameters tag TMPEffectTag The tag to get the indices of. Returns TMPEffectTagIndices? The indices of the given tag, if the tag is contained in the collection; otherwise null. TagAt(int, int?) Get the tag at the given startIndex with the correct order. If order is left to default, the first tag at startIndex will be returned. public TMPEffectTag TagAt(int startIndex, int? order = null) Parameters startIndex int The start index. order int? The order at the start index. Returns TMPEffectTag The tag at the given indices, if it exists; otherwise null. TagsAt(int) Get the tags starting at the given startIndex. public IEnumerable<TMPEffectTagTuple> TagsAt(int startIndex) Parameters startIndex int The start index. Returns IEnumerable<TMPEffectTagTuple> All tags starting at the given startIndex. TagsAt(int, TMPEffectTagTuple[], int) Get the tags starting at the given startIndex. public int TagsAt(int startIndex, TMPEffectTagTuple[] buffer, int bufferIndex = 0) Parameters startIndex int The start index. buffer TMPEffectTagTuple[] The buffer the tags will be stored in. bufferIndex int The offset index of the buffer, i.e. the index at which the tags should be inserted into buffer. Returns int The amount of tags starting at the given startIndex."
  },
  "api/TMPEffects.Tags.Collections.TagCollection.StartIndexOnly.html": {
    "href": "api/TMPEffects.Tags.Collections.TagCollection.StartIndexOnly.html",
    "title": "Struct TagCollection.StartIndexOnly | TMPEffects documentation",
    "keywords": "Struct TagCollection.StartIndexOnly Namespace TMPEffects.Tags.Collections protected struct TagCollection.StartIndexOnly : IComparable<TMPEffectTagIndices> Implements IComparable<TMPEffectTagIndices> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors StartIndexOnly(int) public StartIndexOnly(int startIndex) Parameters startIndex int Fields startIndex public readonly int startIndex Field Value int Methods CompareTo(TMPEffectTagIndices) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(TMPEffectTagIndices other) Parameters other TMPEffectTagIndices An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order."
  },
  "api/TMPEffects.Tags.Collections.TagCollection.TempIndices.html": {
    "href": "api/TMPEffects.Tags.Collections.TagCollection.TempIndices.html",
    "title": "Struct TagCollection.TempIndices | TMPEffects documentation",
    "keywords": "Struct TagCollection.TempIndices Namespace TMPEffects.Tags.Collections protected struct TagCollection.TempIndices : IComparable<TMPEffectTagIndices> Implements IComparable<TMPEffectTagIndices> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors TempIndices(int, int) public TempIndices(int startIndex, int orderAtIndex) Parameters startIndex int orderAtIndex int Methods CompareTo(TMPEffectTagIndices) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(TMPEffectTagIndices other) Parameters other TMPEffectTagIndices An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order."
  },
  "api/TMPEffects.Tags.Collections.TagCollection.html": {
    "href": "api/TMPEffects.Tags.Collections.TagCollection.html",
    "title": "Class TagCollection | TMPEffects documentation",
    "keywords": "Class TagCollection Namespace TMPEffects.Tags.Collections Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. public class TagCollection : ITagCollection, IReadOnlyTagCollection, IReadOnlyCollection<TMPEffectTagTuple>, IEnumerable<TMPEffectTagTuple>, IEnumerable Inheritance object TagCollection Implements ITagCollection IReadOnlyTagCollection IReadOnlyCollection<TMPEffectTagTuple> IEnumerable<TMPEffectTagTuple> IEnumerable Derived ObservableTagCollection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TagCollection(IList<TMPEffectTagTuple>, ITMPTagValidator) public TagCollection(IList<TMPEffectTagTuple> tags, ITMPTagValidator validator = null) Parameters tags IList<TMPEffectTagTuple> validator ITMPTagValidator TagCollection(ITMPTagValidator) public TagCollection(ITMPTagValidator validator = null) Parameters validator ITMPTagValidator Fields tags protected IList<TMPEffectTagTuple> tags Field Value IList<TMPEffectTagTuple> validator protected readonly ITMPTagValidator validator Field Value ITMPTagValidator Properties TagCount The amount of TMPEffectTagTuple in this collection. public int TagCount { get; } Property Value int Methods AdjustOrderAtIndexAt(int, TMPEffectTagIndices) protected void AdjustOrderAtIndexAt(int listIndex, TMPEffectTagIndices indices) Parameters listIndex int indices TMPEffectTagIndices BinarySearchIndexFirstIndexOf(StartIndexOnly) protected int BinarySearchIndexFirstIndexOf(TagCollection.StartIndexOnly indices) Parameters indices TagCollection.StartIndexOnly Returns int BinarySearchIndexOf(IComparable<TMPEffectTagIndices>) protected int BinarySearchIndexOf(IComparable<TMPEffectTagIndices> indices) Parameters indices IComparable<TMPEffectTagIndices> Returns int Clear() Clear the entire collection. public virtual void Clear() Contains(TMPEffectTag, TMPEffectTagIndices?) Whether this collection contains the given tag with the given indices (if supplied). public bool Contains(TMPEffectTag tag, TMPEffectTagIndices? indices = null) Parameters tag TMPEffectTag The tag to check. indices TMPEffectTagIndices? The tag indices. If you don't care about the tag's indices, leave as default. Returns bool true if this collection contains the given tag with the given indices (if supplied); otherwise false. CopyTo(TMPEffectTag[], int) public void CopyTo(TMPEffectTag[] array, int arrayIndex) Parameters array TMPEffectTag[] arrayIndex int FindIndex(TMPEffectTag) protected int FindIndex(TMPEffectTag tag) Parameters tag TMPEffectTag Returns int GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<TMPEffectTagTuple> GetEnumerator() Returns IEnumerator<TMPEffectTagTuple> An enumerator that can be used to iterate through the collection. IndicesOf(TMPEffectTag) Get the associated indices of the given tag. public TMPEffectTagIndices? IndicesOf(TMPEffectTag tag) Parameters tag TMPEffectTag The tag to get the indices of. Returns TMPEffectTagIndices? The indices of the given tag, if the tag is contained in the collection; otherwise null. Remove(TMPEffectTag, TMPEffectTagIndices?) Remove the given tag, with the specified indices (if supplied). public virtual bool Remove(TMPEffectTag tag, TMPEffectTagIndices? indices = null) Parameters tag TMPEffectTag The tag to remove. indices TMPEffectTagIndices? The indices of the tag. Returns bool true if the tag was removed; false otherwise. RemoveAllAt(int, TMPEffectTagTuple[], int) Remove all tags starting at the given startIndex. public virtual int RemoveAllAt(int startIndex, TMPEffectTagTuple[] buffer = null, int bufferIndex = 0) Parameters startIndex int The start index. buffer TMPEffectTagTuple[] Buffer to save the removed tags into. Leave at default if you do not want to get the tags. bufferIndex int The offset index of the buffer, i.e. the index at which the tags should be inserted into buffer. Returns int The amount of removed tags. RemoveAt(int, int?) Remove the tag starting at the given startIndex with the correct order. If order is left to default, the first tag at startIndex will be removed. public virtual bool RemoveAt(int startIndex, int? order = null) Parameters startIndex int The start index. order int? The order at the start index. Returns bool true if a tag was removed; false otherwise. TagAt(int, int?) Get the tag at the given startIndex with the correct order. If order is left to default, the first tag at startIndex will be returned. public TMPEffectTag TagAt(int startIndex, int? order = null) Parameters startIndex int The start index. order int? The order at the start index. Returns TMPEffectTag The tag at the given indices, if it exists; otherwise null. TagsAt(int) Get the tags starting at the given startIndex. public IEnumerable<TMPEffectTagTuple> TagsAt(int startIndex) Parameters startIndex int The start index. Returns IEnumerable<TMPEffectTagTuple> All tags starting at the given startIndex. TagsAt(int, TMPEffectTagTuple[], int) Get the tags starting at the given startIndex. public int TagsAt(int startIndex, TMPEffectTagTuple[] buffer, int bufferIndex = 0) Parameters startIndex int The start index. buffer TMPEffectTagTuple[] The buffer the tags will be stored in. bufferIndex int The offset index of the buffer, i.e. the index at which the tags should be inserted into buffer. Returns int The amount of tags starting at the given startIndex. TryAdd(TMPEffectTag, int, int, int?) Attempt to add a new tag to the collection. If orderAtIndex is left to default, the order will be assigned so it is the first tag at the given startIndex. public virtual bool TryAdd(TMPEffectTag tag, int startIndex = 0, int endIndex = -1, int? orderAtIndex = null) Parameters tag TMPEffectTag The tag to add. startIndex int The tag's start index. endIndex int The tag's end index. orderAtIndex int? The tag's order at index. Returns bool true if the tag was successfully added; false otherwise. TryAdd(TMPEffectTag, TMPEffectTagIndices) Attempt to add a new tag to the collection. public virtual bool TryAdd(TMPEffectTag tag, TMPEffectTagIndices indices) Parameters tag TMPEffectTag The tag to add. indices TMPEffectTagIndices The tag's indices. Returns bool true if the tag was successfully added; false otherwise."
  },
  "api/TMPEffects.Tags.Collections.html": {
    "href": "api/TMPEffects.Tags.Collections.html",
    "title": "Namespace TMPEffects.Tags.Collections | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.Tags.Collections Classes CachedCollection<T> Manages a collection of ITagWrapper that represent a cached tag. Will keep itself synchronized with the given ObservableTagCollection. CachedCollection<T>.MinMax The minimum and maximum collection index of cached tags potentially relevant to a given text index. ObservableTagCollection An observable ITagCollection. ReadOnlyTagCollection Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. TagCollection Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. Structs CachedCollection<T>.StructContainingEnumerable Helper struct for GetContaining_NonAlloc(int). CachedCollection<T>.StructContainingEnumerator Helper struct for GetContaining_NonAlloc(int). CachedCollection<T>.StructReversedContainingEnumerable Helper struct for GetContainingReversed_NonAlloc(int). CachedCollection<T>.StructReversedContainingEnumerator Helper struct for GetContainingReversed_NonAlloc(int). TagCollection.StartIndexOnly TagCollection.TempIndices Interfaces IReadOnlyTagCollection A readonly collection of TMPEffectTagTuple. ITagCollection A writable collection of TMPEffectTagTuple. ITagCollectionManager<TKey> Interface for a manager of ITagCollection."
  },
  "api/TMPEffects.Tags.ITMPPrefixSupplier.html": {
    "href": "api/TMPEffects.Tags.ITMPPrefixSupplier.html",
    "title": "Interface ITMPPrefixSupplier | TMPEffects documentation",
    "keywords": "Interface ITMPPrefixSupplier Namespace TMPEffects.Tags Interface for supplying prefix. public interface ITMPPrefixSupplier Properties Prefix The supplied prefix. char Prefix { get; } Property Value char"
  },
  "api/TMPEffects.Tags.ITMPTagValidator.html": {
    "href": "api/TMPEffects.Tags.ITMPTagValidator.html",
    "title": "Interface ITMPTagValidator | TMPEffects documentation",
    "keywords": "Interface ITMPTagValidator Namespace TMPEffects.Tags Tag validation interface. public interface ITMPTagValidator Methods ValidateOpenTag(TagInfo, out TMPEffectTag, out int) Validate a given ParsingUtility.TagInfo. MUST be of type Open. bool ValidateOpenTag(ParsingUtility.TagInfo tagInfo, out TMPEffectTag data, out int endIndex) Parameters tagInfo ParsingUtility.TagInfo Information about the tag. data TMPEffectTag Assuming the tag is validated, this will be set to the created TMPEffectTag; otherwise it will be null. endIndex int Assuming the tag is validated, this will be set to the endIndex of the tag. TODO this arguably exceeds ITMPTagValidators responsibilities Returns bool true if the tag is successfully validated; false otherwise. Exceptions ArgumentException ValidateTag(TMPEffectTag) Validate a given TMPEffectTag. bool ValidateTag(TMPEffectTag tag) Parameters tag TMPEffectTag Information about the tag. Returns bool true if the tag is successfully validated; false otherwise. ValidateTag(TagInfo) Validate a given ParsingUtility.TagInfo. bool ValidateTag(ParsingUtility.TagInfo tagInfo) Parameters tagInfo ParsingUtility.TagInfo Information about the tag. Returns bool true if the tag is successfully validated; false otherwise."
  },
  "api/TMPEffects.Tags.ITagCacher-1.html": {
    "href": "api/TMPEffects.Tags.ITagCacher-1.html",
    "title": "Interface ITagCacher<T> | TMPEffects documentation",
    "keywords": "Interface ITagCacher<T> Namespace TMPEffects.Tags Generic interface for caching tags. public interface ITagCacher<T> where T : ITagWrapper Type Parameters T Type that will be used to represent a cached tag. Methods CacheTag(TMPEffectTag, TMPEffectTagIndices) Cache the given tag and its associated indices. T CacheTag(TMPEffectTag tag, TMPEffectTagIndices indices) Parameters tag TMPEffectTag The tag to cache. indices TMPEffectTagIndices The associated indices. Returns T The cached tag."
  },
  "api/TMPEffects.Tags.ITagWrapper.html": {
    "href": "api/TMPEffects.Tags.ITagWrapper.html",
    "title": "Interface ITagWrapper | TMPEffects documentation",
    "keywords": "Interface ITagWrapper Namespace TMPEffects.Tags Interface that wraps an TMPEffectTag as well as an TMPEffectTagIndices instance. public interface ITagWrapper Properties Indices The wrapped tag indices. TMPEffectTagIndices Indices { get; } Property Value TMPEffectTagIndices Tag The wrapped tag. TMPEffectTag Tag { get; } Property Value TMPEffectTag"
  },
  "api/TMPEffects.Tags.TMPEffectTag.html": {
    "href": "api/TMPEffects.Tags.TMPEffectTag.html",
    "title": "Class TMPEffectTag | TMPEffects documentation",
    "keywords": "Class TMPEffectTag Namespace TMPEffects.Tags A TMPEffects tag. Contains any data \"inherent\" to the given tag. public sealed class TMPEffectTag : IEquatable<TMPEffectTag> Inheritance object TMPEffectTag Implements IEquatable<TMPEffectTag> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TMPEffectTag(string, char, IDictionary<string, string>) public TMPEffectTag(string name, char prefix, IDictionary<string, string> parameters) Parameters name string prefix char parameters IDictionary<string, string> Properties Name The name of the tag. public string Name { get; } Property Value string Parameters The parameters of the tag. public ReadOnlyDictionary<string, string> Parameters { get; } Property Value ReadOnlyDictionary<string, string> Prefix The prefix of the tag. public char Prefix { get; } Property Value char Methods Equals(TMPEffectTag) Indicates whether the current object is equal to another object of the same type. public bool Equals(TMPEffectTag other) Parameters other TMPEffectTag An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false."
  },
  "api/TMPEffects.Tags.TMPEffectTagIndices.html": {
    "href": "api/TMPEffects.Tags.TMPEffectTagIndices.html",
    "title": "Struct TMPEffectTagIndices | TMPEffects documentation",
    "keywords": "Struct TMPEffectTagIndices Namespace TMPEffects.Tags The indices of an TMPEffectTag. The indices can be regarded as a half-open interval of [StartIndex, EndIndex). For example, an instance with StartIndex == 5 and EndIndex == 10 \"contains\" the indices 5, 6, 7, 8 and 9. public struct TMPEffectTagIndices : IComparable<TMPEffectTagIndices>, IEquatable<TMPEffectTagIndices> Implements IComparable<TMPEffectTagIndices> IEquatable<TMPEffectTagIndices> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors TMPEffectTagIndices(int, int, int) public TMPEffectTagIndices(int startIndex, int endIndex, int orderAtIndex) Parameters startIndex int endIndex int orderAtIndex int Properties ContainedIndices Enumeration of all contained indices. public IEnumerable<int> ContainedIndices { get; } Property Value IEnumerable<int> EndIndex The (exclusive) end index of the tag. public int EndIndex { get; } Property Value int IsEmpty Whether the tag is empty, i.e. doesn't contain any indices. public bool IsEmpty { get; } Property Value bool IsOpen Whether the tag is open, meaning it is never closed and therefore does not have a defined end index; the tag's index interval ranges from the StartIndex to the end of whatever text it is applied to. public bool IsOpen { get; } Property Value bool Length The length of the interval, meaning the difference between EndIndex and StartIndex. Is -1 if the tag is open. public int Length { get; } Property Value int OrderAtIndex The order at the start index. If there are multiple tags with the same start index, this will define their order: tags with lower order come first, tags with higher index come later. Note that the order may have gaps (e.g. there are three tags at a given index, with order -5, 4 and 10 respectively). public int OrderAtIndex { get; } Property Value int StartIndex The (inclusive) start index of the tag. public int StartIndex { get; } Property Value int Methods CompareTo(TMPEffectTagIndices) Compares this instance to another instance of TMPEffectTagIndices. First compares StartIndex. If those are equal, compares OrderAtIndex. The EndIndex is not considered. public int CompareTo(TMPEffectTagIndices other) Parameters other TMPEffectTagIndices The instance to compare this instance to. Returns int Less than zero => This instance precedes other in the sort order. Zero => This instance occurs in the same position in the sort order as other. Greater than zero => This instance follows other in the sort order. Contains(int) Whether the indices contain the given index. public bool Contains(int index) Parameters index int The index. Returns bool true if the indices containg the given index; false otherwise. Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. Equals(TMPEffectTagIndices) Indicates whether the current object is equal to another object of the same type. public bool Equals(TMPEffectTagIndices other) Parameters other TMPEffectTagIndices An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Operators operator ==(TMPEffectTagIndices, TMPEffectTagIndices) public static bool operator ==(TMPEffectTagIndices c1, TMPEffectTagIndices c2) Parameters c1 TMPEffectTagIndices c2 TMPEffectTagIndices Returns bool operator >(TMPEffectTagIndices, TMPEffectTagIndices) public static bool operator >(TMPEffectTagIndices c1, TMPEffectTagIndices c2) Parameters c1 TMPEffectTagIndices c2 TMPEffectTagIndices Returns bool operator !=(TMPEffectTagIndices, TMPEffectTagIndices) public static bool operator !=(TMPEffectTagIndices c1, TMPEffectTagIndices c2) Parameters c1 TMPEffectTagIndices c2 TMPEffectTagIndices Returns bool operator <(TMPEffectTagIndices, TMPEffectTagIndices) public static bool operator <(TMPEffectTagIndices c1, TMPEffectTagIndices c2) Parameters c1 TMPEffectTagIndices c2 TMPEffectTagIndices Returns bool"
  },
  "api/TMPEffects.Tags.TMPEffectTagTuple.html": {
    "href": "api/TMPEffects.Tags.TMPEffectTagTuple.html",
    "title": "Struct TMPEffectTagTuple | TMPEffects documentation",
    "keywords": "Struct TMPEffectTagTuple Namespace TMPEffects.Tags Readonly struct that combines an TMPEffectTag and an TMPEffectTagIndices. public struct TMPEffectTagTuple : IEquatable<TMPEffectTagTuple> Implements IEquatable<TMPEffectTagTuple> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors TMPEffectTagTuple(TMPEffectTag, TMPEffectTagIndices) public TMPEffectTagTuple(TMPEffectTag tag, TMPEffectTagIndices indices) Parameters tag TMPEffectTag indices TMPEffectTagIndices Fields Indices The tag indices. public readonly TMPEffectTagIndices Indices Field Value TMPEffectTagIndices Tag The tag. public readonly TMPEffectTag Tag Field Value TMPEffectTag Methods Equals(TMPEffectTagTuple) Indicates whether the current object is equal to another object of the same type. public bool Equals(TMPEffectTagTuple other) Parameters other TMPEffectTagTuple An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false."
  },
  "api/TMPEffects.Tags.html": {
    "href": "api/TMPEffects.Tags.html",
    "title": "Namespace TMPEffects.Tags | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.Tags Classes TMPEffectTag A TMPEffects tag. Contains any data \"inherent\" to the given tag. Structs TMPEffectTagIndices The indices of an TMPEffectTag. The indices can be regarded as a half-open interval of [StartIndex, EndIndex). For example, an instance with StartIndex == 5 and EndIndex == 10 \"contains\" the indices 5, 6, 7, 8 and 9. TMPEffectTagTuple Readonly struct that combines an TMPEffectTag and an TMPEffectTagIndices. Interfaces ITMPPrefixSupplier Interface for supplying prefix. ITMPTagValidator Tag validation interface. ITagCacher<T> Generic interface for caching tags. ITagWrapper Interface that wraps an TMPEffectTag as well as an TMPEffectTagIndices instance."
  },
  "api/TMPEffects.TextProcessing.ITagProcessorManager.html": {
    "href": "api/TMPEffects.TextProcessing.ITagProcessorManager.html",
    "title": "Interface ITagProcessorManager | TMPEffects documentation",
    "keywords": "Interface ITagProcessorManager Namespace TMPEffects.TextProcessing Interface for manager of TagProcessor. public interface ITagProcessorManager : IEnumerable<TagProcessor>, IEnumerable Inherited Members IEnumerable<TagProcessor>.GetEnumerator() Properties TagProcessors Mapping of prefix to list of TagProcessor. ReadOnlyDictionary<char, ReadOnlyCollection<TagProcessor>> TagProcessors { get; } Property Value ReadOnlyDictionary<char, ReadOnlyCollection<TagProcessor>> Methods AddProcessor(char, TagProcessor, int) Add a processor. void AddProcessor(char prefix, TagProcessor processor, int priority = 0) Parameters prefix char Prefix of tags processed by processor. processor TagProcessor The processor. priority int Priority of this processor. Only one processors can process any given tag, so the order that processors are invoked in matters. Less than zero => last processed zero => first processed (highest priority) Greater than zero => priority-th processed Greater than current amount of processors => last processed RemoveProcessor(char, TagProcessor) Remove a processor. bool RemoveProcessor(char prefix, TagProcessor processor) Parameters prefix char Prefix of tags processed by processor. processor TagProcessor The processor. Returns bool true if the processors was removed; otherwise false."
  },
  "api/TMPEffects.TextProcessing.ParsingUtility.TagInfo.html": {
    "href": "api/TMPEffects.TextProcessing.ParsingUtility.TagInfo.html",
    "title": "Class ParsingUtility.TagInfo | TMPEffects documentation",
    "keywords": "Class ParsingUtility.TagInfo Namespace TMPEffects.TextProcessing Utility class that holds data about a parsed tag. public class ParsingUtility.TagInfo Inheritance object ParsingUtility.TagInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TagInfo() public TagInfo() TagInfo(int, int, TagType, char, string, string) public TagInfo(int startIndex, int endIndex, ParsingUtility.TagType type, char prefix, string name, string parameterString) Parameters startIndex int endIndex int type ParsingUtility.TagType prefix char name string parameterString string Fields endIndex End index of the tag in the source text. public int endIndex Field Value int name Name of the tag. public string name Field Value string parameterString The parameters of the tag, unparsed. public string parameterString Field Value string prefix Prefix of the tag. public char prefix Field Value char startIndex Start index of the tag in the source text. public int startIndex Field Value int type Type of the tag (open, close). public ParsingUtility.TagType type Field Value ParsingUtility.TagType"
  },
  "api/TMPEffects.TextProcessing.ParsingUtility.TagType.html": {
    "href": "api/TMPEffects.TextProcessing.ParsingUtility.TagType.html",
    "title": "Enum ParsingUtility.TagType | TMPEffects documentation",
    "keywords": "Enum ParsingUtility.TagType Namespace TMPEffects.TextProcessing Tag type enum. Either open, close, or both. [Flags] public enum ParsingUtility.TagType Fields Close = 2 Open = 1"
  },
  "api/TMPEffects.TextProcessing.ParsingUtility.html": {
    "href": "api/TMPEffects.TextProcessing.ParsingUtility.html",
    "title": "Class ParsingUtility | TMPEffects documentation",
    "keywords": "Class ParsingUtility Namespace TMPEffects.TextProcessing Utility methods for text processing and parsing. public static class ParsingUtility Inheritance object ParsingUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetNextTag(string, int, ref TagInfo, TagType) Get the next tag in text, starting from startIndex. public static bool GetNextTag(string text, int startIndex, ref ParsingUtility.TagInfo tag, ParsingUtility.TagType type = TagType.Open | TagType.Close) Parameters text string The full string. startIndex int The index to start the search from. tag ParsingUtility.TagInfo Reference to a ParsingUtility.TagInfo. Will be set to the parsed tag if one is found. type ParsingUtility.TagType The type of tag to get. Leave at default for either type. Returns bool true if a next tag was found; false otherwise. GetTagParametersDict(string) public static Dictionary<string, string> GetTagParametersDict(string tag) Parameters tag string Returns Dictionary<string, string> IsTag(string, int, int, TagType) Checks if the given string contains a substring starting at startIndex, going up to maxIndex, that is a well formed tag. public static bool IsTag(string text, int startIndex, int maxIndex = -1, ParsingUtility.TagType type = TagType.Open | TagType.Close) Parameters text string The string to check. startIndex int The start index of the substring. maxIndex int The end index of the substring. Leave at default to set to length of text. type ParsingUtility.TagType Returns bool true if the given string contains a substring starting at startIndex, going up to maxIndex, that is a well formed tag; otherwise false. IsTag(string, TagType) Checks if the given string is a well formed tag (of the given type, if supplied). public static bool IsTag(string tag, ParsingUtility.TagType type = TagType.Open | TagType.Close) Parameters tag string The string to check. type ParsingUtility.TagType The type of tag to check for. Leave default for either type. Returns bool true if the the given string is a tag (of the given type, if supplied); otherwise false. TryParseTag(string, int, int, ref TagInfo, TagType) Attempt to parse a tag from the substring of text given by startIndex and endIndex. public static bool TryParseTag(string text, int startIndex, int endIndex, ref ParsingUtility.TagInfo tag, ParsingUtility.TagType type = TagType.Open | TagType.Close) Parameters text string The full string. startIndex int Start index of the substring. endIndex int End index of the substring. tag ParsingUtility.TagInfo Reference to a ParsingUtility.TagInfo. Will be set to the parsed tag if successful. type ParsingUtility.TagType The type of tag to check for. Leave at default for either type. Returns bool true if a tag was successfully parsed from the substring; false otherwise."
  },
  "api/TMPEffects.TextProcessing.TMPTextProcessor.TMPTextProcessorEventHandler.html": {
    "href": "api/TMPEffects.TextProcessing.TMPTextProcessor.TMPTextProcessorEventHandler.html",
    "title": "Delegate TMPTextProcessor.TMPTextProcessorEventHandler | TMPEffects documentation",
    "keywords": "Delegate TMPTextProcessor.TMPTextProcessorEventHandler Namespace TMPEffects.TextProcessing public delegate void TMPTextProcessor.TMPTextProcessorEventHandler(string text) Parameters text string"
  },
  "api/TMPEffects.TextProcessing.TMPTextProcessor.html": {
    "href": "api/TMPEffects.TextProcessing.TMPTextProcessor.html",
    "title": "Class TMPTextProcessor | TMPEffects documentation",
    "keywords": "Class TMPTextProcessor Namespace TMPEffects.TextProcessing Preprocesses the text, removing valid tags. As part of a post process, also adjusts the indices of the parsed tags to accomodate for native TextMeshPro tags. public class TMPTextProcessor : ITextPreprocessor, ITagProcessorManager, IEnumerable<TagProcessor>, IEnumerable Inheritance object TMPTextProcessor Implements ITagProcessorManager IEnumerable<TagProcessor> IEnumerable Constructors TMPTextProcessor(TMP_Text) public TMPTextProcessor(TMP_Text text) Parameters text TMP_Text Properties TagProcessors Mapping of prefix to list of TagProcessor. public ReadOnlyDictionary<char, ReadOnlyCollection<TagProcessor>> TagProcessors { get; } Property Value ReadOnlyDictionary<char, ReadOnlyCollection<TagProcessor>> TextComponent The associated TMP_Text component. public TMP_Text TextComponent { get; } Property Value TMP_Text Methods AddProcessor(char, TagProcessor, int) Add a processor. public void AddProcessor(char prefix, TagProcessor processor, int priority = 0) Parameters prefix char Prefix of tags processed by processor. processor TagProcessor The processor. priority int Priority of this processor. Only one processors can process any given tag, so the order that processors are invoked in matters. Less than zero => last processed zero => first processed (highest priority) Greater than zero => priority-th processed Greater than current amount of processors => last processed AdjustIndices() Adjust the indices that were cached during the preprocess stage to accomodate for index changes due to native TextMeshPro tags. public void AdjustIndices() GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<TagProcessor> GetEnumerator() Returns IEnumerator<TagProcessor> An enumerator that can be used to iterate through the collection. PreprocessText(string) Preprocess the text. Remove TMPEffects tags from text Cache the tags incl. their indices public string PreprocessText(string text) Parameters text string The text to preprocess. Returns string The preprocessed text. RemoveProcessor(char, TagProcessor) Remove a processor. public bool RemoveProcessor(char prefix, TagProcessor processor) Parameters prefix char Prefix of tags processed by processor. processor TagProcessor The processor. Returns bool true if the processors was removed; otherwise false. Events BeginAdjustIndices Raised just before the AdjustIndices routine begins. public event TMPTextProcessor.TMPTextProcessorEventHandler BeginAdjustIndices Event Type TMPTextProcessor.TMPTextProcessorEventHandler BeginPreProcess Raised just before the PreProcess routine begins. public event TMPTextProcessor.TMPTextProcessorEventHandler BeginPreProcess Event Type TMPTextProcessor.TMPTextProcessorEventHandler FinishAdjustIndices Raised once the AdjustIndices routine finished. public event TMPTextProcessor.TMPTextProcessorEventHandler FinishAdjustIndices Event Type TMPTextProcessor.TMPTextProcessorEventHandler FinishPreProcess Raised once the PreProcess routine finished. public event TMPTextProcessor.TMPTextProcessorEventHandler FinishPreProcess Event Type TMPTextProcessor.TMPTextProcessorEventHandler"
  },
  "api/TMPEffects.TextProcessing.TagProcessor.html": {
    "href": "api/TMPEffects.TextProcessing.TagProcessor.html",
    "title": "Class TagProcessor | TMPEffects documentation",
    "keywords": "Class TagProcessor Namespace TMPEffects.TextProcessing Handles processing of, and stores successfully processed tags. public sealed class TagProcessor Inheritance object TagProcessor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TagProcessor(ITMPTagValidator) public TagProcessor(ITMPTagValidator validator) Parameters validator ITMPTagValidator Fields ALL_KEYWORD Tags with this keyword as name will close all open tags of this tag processor. public const string ALL_KEYWORD = \"all\" Field Value string MOST_RECENT_KEYWORD Tags with this keyword as name will close teh most recent open tag of this tag processor. public const string MOST_RECENT_KEYWORD = \"\" Field Value string ProcessedTags All processed tags. public readonly ReadOnlyCollection<KeyValuePair<TMPEffectTagIndices, TMPEffectTag>> ProcessedTags Field Value ReadOnlyCollection<KeyValuePair<TMPEffectTagIndices, TMPEffectTag>> Methods Process(TagInfo, int, int) Process the given tag. public bool Process(ParsingUtility.TagInfo tagInfo, int textIndex, int orderAtIndex) Parameters tagInfo ParsingUtility.TagInfo Information about the tag. textIndex int The index of the tag within its source text. orderAtIndex int The order at the index of the tag withing its source text. Returns bool true if tag is successfully processed, false otherwise. Reset() Reset this TagProcessor. public void Reset()"
  },
  "api/TMPEffects.TextProcessing.TagProcessorManager.html": {
    "href": "api/TMPEffects.TextProcessing.TagProcessorManager.html",
    "title": "Class TagProcessorManager | TMPEffects documentation",
    "keywords": "Class TagProcessorManager Namespace TMPEffects.TextProcessing Manages multiple TagProcessor. public class TagProcessorManager : ITagProcessorManager, IEnumerable<TagProcessor>, IEnumerable Inheritance object TagProcessorManager Implements ITagProcessorManager IEnumerable<TagProcessor> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TagProcessorManager() public TagProcessorManager() Properties TagProcessors Mapping of prefix to list of TagProcessor. public ReadOnlyDictionary<char, ReadOnlyCollection<TagProcessor>> TagProcessors { get; } Property Value ReadOnlyDictionary<char, ReadOnlyCollection<TagProcessor>> Methods AddProcessor(char, TagProcessor, int) Add a processor. public void AddProcessor(char prefix, TagProcessor processor, int priority = 0) Parameters prefix char Prefix of tags processed by processor. processor TagProcessor The processor. priority int Priority of this processor. Only one processors can process any given tag, so the order that processors are invoked in matters. Less than zero => last processed zero => first processed (highest priority) Greater than zero => priority-th processed Greater than current amount of processors => last processed Clear() Remove all processors. public void Clear() GetEnumerator() Get all TagProcessor managed by this instance. public IEnumerator<TagProcessor> GetEnumerator() Returns IEnumerator<TagProcessor> All TagProcessor managed by this instance. RegisterTo(TMPTextProcessor) Register all TagProcessor to the given textProcessor. public void RegisterTo(TMPTextProcessor textProcessor) Parameters textProcessor TMPTextProcessor The TMPTextProcessor to register to. RemoveProcessor(char, TagProcessor) Remove a processor. public bool RemoveProcessor(char prefix, TagProcessor processor) Parameters prefix char Prefix of tags processed by processor. processor TagProcessor The processor. Returns bool true if the processors was removed; otherwise false. UnregisterFrom(TMPTextProcessor) Unregister all TagProcessor from the given textProcessor. public void UnregisterFrom(TMPTextProcessor textProcessor) Parameters textProcessor TMPTextProcessor The TMPTextProcessor to unregister from."
  },
  "api/TMPEffects.TextProcessing.html": {
    "href": "api/TMPEffects.TextProcessing.html",
    "title": "Namespace TMPEffects.TextProcessing | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.TextProcessing Classes ParsingUtility Utility methods for text processing and parsing. ParsingUtility.TagInfo Utility class that holds data about a parsed tag. TMPTextProcessor Preprocesses the text, removing valid tags. As part of a post process, also adjusts the indices of the parsed tags to accomodate for native TextMeshPro tags. TagProcessor Handles processing of, and stores successfully processed tags. TagProcessorManager Manages multiple TagProcessor. Interfaces ITagProcessorManager Interface for manager of TagProcessor. Enums ParsingUtility.TagType Tag type enum. Either open, close, or both. Delegates TMPTextProcessor.TMPTextProcessorEventHandler"
  },
  "index.html": {
    "href": "index.html",
    "title": "TMPEffects | TMPEffects documentation",
    "keywords": "TMPEffects If you want to, please support me / TMPEffects on Ko-fi! TMPEffects allows you to easily apply all kinds of effects to your TextMeshPro texts using (custom) tags • Animate text blocks continuously • Show and hide text over time • Animate the show / hide sequence • Raise commands at any given index Raise events at any given index API to create your own tags (animations, commands) For a full preview of built-in animations, show / hide animations, and commands, see the respective documentation. Dependencies and compatibility TMPEffects is compatible with Unity 2021.3 and up Tested in 2021.3, 2022.3 and 2023.2; if you have compatibility issues in another version (>= 2021.3), please open an issue for it! Only dependency: Unity's TextMeshPro package (automatically included in Unity 2018.3 and up) Installation TMPEffects is available on the OpenUPM registry. Alternatively, you can install TMPEffects through the Unity Package Manager, using the git url: https://github.com/Luca3317/TMPEffects.git?path=/Package If you don't know how to install packages using git urls, see the docs. If you instead want to simply clone the repository, you will have to manually import the required resources located under Assets > TMPEffects > Resources. Documentation The full documentation can be found here"
  },
  "manual/animatingacharacter.html": {
    "href": "manual/animatingacharacter.html",
    "title": "Animating a character | TMPEffects documentation",
    "keywords": "Animating a character This section guides you through how you animate characters in TMPEffects. As shown in Creating animations, the Animate method takes two parameters: CharData IAnimationContext For general information about these types, see the respective documentation. Applying transformations to a character Moving the character To move the character, simply use the SetPosition(Vector3 position) or AddPositionDelta(Vector3 delta) method on CharData. Most of the time, you will want to do this using the original position of the character and an offset. public void Animate(CharData cData, IAnimationContext context) { // Move the character up 125 units over time, then down again; indefinitely float val = Mathf.PingPong(context.animatorContext.PassedTime * 50, 125); cData.SetPosition(cData.InitialPosition + Vector3.up * val); } Your browser does not support the video tag. Rotating the character To rotate the character, use CharData's SetRotation(Quaternion rotation) method. If you want to rotate around a specific pivot, you may set it using either the SetPivot(Vector3 pivot) method or the AddPivotDelta(Vector3 delta) method. If you don't set a pivot for the rotation, it will rotate around the center of the character. public void Animate(CharData cData, IAnimationContext context) { // Rotate the character indefinitely in the z axis over time float angle = context.animatorContext.PassedTime * 50 % 360; cData.SetRotation(Quaternion.Euler(0, 0, angle)); // And by adding this line, it will use the pivot you set; // in this case the character will rotate around the point 150 units from its // center on the x axis cData.AddPivotDelta(Vector3.right * 150); } Your browser does not support the video tag. Scaling the character To scale the character, use the SetScale(Vector3 scale) method. public void Animate(CharData cData, IAnimationContext context) { // Ping-pong the scale between (0, 0, 0) and (1, 1, 1) over time float val = Mathf.PingPong(context.animatorContext.PassedTime, 1); Vector3 scale = Vector3.one * val; cData.SetScale(scale); } Your browser does not support the video tag. Modifying a character's vertices Setting the vertices' positions You can set the positions of the character's vertices using the SetPosition(int i, Vector3 value) method on the VertexData type. The integer specifies the vertex to modify (again, see CharData) while the vector specifies the new position. public void Animate(CharData cData, IAnimationContext context) { // Pingpong the magnitude of the offset between 0 and 125 over time, // then add that offset to the two top vertices float val = Mathf.PingPong(context.animatorContext.PassedTime * 50, 125); for (int i = 1; i < 3; i++) { cData.mesh.SetPosition(i, cData.initialMesh.GetPosition(i) + Vector3.up * val); } } Your browser does not support the video tag. Setting the vertices' colors Using the SetColor(int i, Color32 value, bool ignoreAlpha) method, you can set the color value of each vertex. If you pass true for ignoreAlpha, only the RGB color channels are overwritten; the alpha channel will remain unchanged. If you want to do the opposite of this and only set the alpha channel, then you can use the SetAlpha(int i, float alpha) method. public void Animate(CharData cData, IAnimationContext context) { // Set each vertex color to red and set the alpha dependent on passed time. Color32 color = Color.red; float alpha = Mathf.PingPong(context.animatorContext.PassedTime * 125, 255); for (int i = 0; i < 4; i++) { cData.mesh.SetColor(i, color, true); cData.mesh.SetAlpha(i, alpha); } } Your browser does not support the video tag. Setting the vertices' UVs Using the SetUV0(int i, Vector2 uv) and SetUV2(int i, Vector2 uv) methods, you can set the UV0 and UV2 values of each vertex respectively. These properties are more niche compared to the other ones, and you will likely use them much less; char is the only built-in animation to utilize this property. public void Animate(CharData cData, IAnimationContext context) { // Pan the UV0 of the character over time Vector2 delta = Vector2.right * context.animatorContext.PassedTime; for (int i = 0; i &lt; 4; i++) { cData.mesh.SetUV0(i, cData.initialMesh.GetUV0(i) + delta); } } Your browser does not support the video tag. Making your animation fancier The above character transformations and vertex modifiers are all you really need to animate your character! Combined with easing functions (see: AnimationCurveUtility, Waves), even these really simple animations above can look quite nice already. For example, the animation code for the built-in jump animation is hardly more complicated than that for the first animation on this page (at least once you've looked at Waves \uD83D\uDE09). public override void Animate(CharData cData, IAnimationContext context) { Data data = (Data)context.customData; float eval = data.wave.Evaluate(context.animatorContext.PassedTime, GetWaveOffset(cData, context, data.waveOffsetType)).Item1; cData.SetPosition(cData.InitialPosition + Vector3.up * eval); } Your browser does not support the video tag."
  },
  "manual/animationcurveutility.html": {
    "href": "manual/animationcurveutility.html",
    "title": "AnimationCurveUtility | TMPEffects documentation",
    "keywords": "AnimationCurveUtility AnimationCurveUtility is a static utility class that allows easy creation of various AnimationCurves. The full API docs can be found here. .center { display: block; margin-left: auto; margin-right: auto; margin-top: 2em; margin-bottom: 2em; width: 40%; } Predefined curves All of the easing functions presented at this link are implemented: https://easings.net/ You can create the corresponding AnimationCurve like this: AnimationCurveUtility.EaseInOutSine(). You can also get the Bézier points (don't worry about what this means if you don't know \uD83D\uDE04) that define the AnimationCurve, so you can manipulate them to easily create slightly modified versions of the existing curves using the Bézier constructors. Bezier constructors You can create AnimationCurves using Bézier points. Simply call Bezier(params Vector2[] points) with your points Bézier points. The method will automatically infer whether you are creating a linear, quadratic or cubic Bézier curve based on the amount of points. If the amount of points does not clearly indicate one specific type, higher degree Bézier curves are preferred. There are also the LinearBezier, QuadraticBezier, and CubicBezier methods, if you want to make sure the correct degree Bézier curve is created. ⚠️ When creating your own AnimationCurves like this, always keep in the back of your mind that Unity's AnimationCurves use time as input; this means the Bézier curve must at all times advance on the X axis, or you will get an invalid AnimationCurve. For example, imagine the quadratic curve defined by the points (0,0), (0,1), (1,1): This will yield an invalid curve! Consider the very beginning of this curve. At the very beginning, the curve moves perfectly straight up; that is not possible in AnimationCurves. Something even more extreme, like the curve moving \"back\" / to the left, is of course not possible either: Huge props to qwe321qwe321qwe321 on GitHub for his BezierToAnimationCurve implementation, as well as the optimized curve points!"
  },
  "manual/animationutility.html": {
    "href": "manual/animationutility.html",
    "title": "AnimationUtility | TMPEffects documentation",
    "keywords": "AnimationUtility AnimationUtility is a static utility class to be used with all animation types. The full API docs can be found here. Raw Positions & Deltas One of TMPAnimator's settings is a toggle that decides whether animations should be scaled or not (see TMPAnimator Settings). In some cases, you will want to ignore this scaling in your animation though. For example, the built-in spread animation sets the individual vertices of the character to the center point of the character, to make it invisible at first and then over time spread out from the center point to the original vertex positions. If this was scaled, then the vertices would in many cases move either not enough, or too far, to make the character invisible. These methods allow you to get and set positions and deltas that ignore the scaling of the animator: Getters Vector3 GetRawVertex(int index, Vector3 position, CharData cData, ref IAnimationContext ctx) - Calculate the raw version of the passed in vertex position, i.e. the one that will ignore the animator's scaling. Vector3 GetRawPosition(Vector3 position, CharData cData, ref IAnimationContext ctx) - Calculate the raw version of the passed in character position, i.e. the one that will ignore the animator's scaling. Vector3 GetRawDelta(Vector3 delta, CharData cData, ref IAnimationContext ctx) - Calculate the raw version of the passed in delta, i.e. the one that will ignore the animator's scaling. Setters void SetVertexRaw(int index, Vector3 position, CharData cData, IAnimationContext ctx) - Set the raw position of the vertex at the given index. This position will ignore the animator's scaling. void SetPositionRaw(Vector3 position, CharData cData, IAnimationContext ctx) - Set the raw position of the character. This position will ignore the animator's scaling. void AddVertexDeltaRaw(int index, Vector3 delta, CharData cData, IAnimationContext ctx) - Add a raw delta to the vertex at the given index. This delta will ignore the animator's scaling. void AddPositionDeltaRaw(Vector3 delta, CharData cData, IAnimationContext ctx) - Add a raw delta to the position of the character. This delta will ignore the animator's scaling. AnchorToPosition Given a Vector2 that represents an anchor (see ParameterTypes), you can calculate the actual position on the character using the Vector2 AnchorToPosition(Vector2 anchor, CharData cData) method. GetValue A simple wrapper method that allows you to evaluate an AnimationCurve in any WrapMode. Wave Utility The AnimationUtility class contains a Wave type; for more information about it as well as the WaveOffsetType enum, see the next section. These are the utility methods for the Wave type: Converting functions There are a few simple, general converting functions (that are not specific to the Wave type, but to waves in general): float FrequencyToPeriod(float frequency) - Get the period of a wave from its frequency float PeriodToFrequency(float period) - Get the frequency of a wave from its period float WaveLengthVelocityToFrequency(float wavelength, float wavevelocity) - Get the frequency of a wave from its wavelength and velocity float WaveLengthFrequencyToVelocity(float wavelength, float frequency) - Get the velocity of a wave from its wavelength and frequency float WaveVelocityFrequencyToLength(float wavevelocity, float frequency) - Get the wavelength of a wave from its velocity and frequency GetWaveOffset When evaluating a Wave, you have to pass in an offset, which is dependent on the current character you are animating as well as the WaveOffsetType you are using; the float GetWaveOffset(CharData cData, IAnimationContext ctx, WaveOffsetType type) calculates the correct offset for you."
  },
  "manual/autoparameters.html": {
    "href": "manual/autoparameters.html",
    "title": "AutoParameters | TMPEffects documentation",
    "keywords": "AutoParameters AutoParameters is a plugin for TMPEffects that minimizes any parameter-related boilerplate for animations by automatically implementing the ValidateParameters, SetParameters and GetNewCustomData methods for you. For more information, see the page on it."
  },
  "manual/chardata.html": {
    "href": "manual/chardata.html",
    "title": "CharData | TMPEffects documentation",
    "keywords": "CharData The CharData class holds information about a character, which is primarily used by the TMPAnimator and its animations. In addition to holding a selection of data supplied by the respective TMP_CharacterInfo, accessible through the info field, also holds TMPEffects-specific data and methods to manipulate said data. Modifiable properties Each CharData has a position, rotation and scale property. You may modify all of those properties using the respective setter methods. CharData also exposes the initial, readonly value of each of those properties. Through the mesh field, you can access the character's VertexData. In TextMeshPro, each character consists of a rectangular mesh. VertexData allows you to modify the properties of each of the four vertices of the character mesh. These properties are: Position Color UV0 UV2 VertexData also exposes a ReadOnlyVertexData object through its initial field. It contains the initial, readonly VertexData. Animating CharData For an explanation and examples as to how you can animate characters by modifying the mentioned properties, see Animating a character."
  },
  "manual/databases.html": {
    "href": "manual/databases.html",
    "title": "Databases | TMPEffects documentation",
    "keywords": "Databases In TMPEffects, the set of animations a TMPAnimator can use (or the set of commands a TMPWriter can use) is defined by the database it uses. Databases, like animations and commands, are ScriptableObject assets. You can create a new database by right-clicking in your project view, then Create -> TMPEffects -> Database, again, just like animations and commands. You can then add any animation / command to your database, and assign it to a TMPAnimator / TMPWriter component in the inspector. Of course, you can also modify the built-in default databases any way you want, or assign different databases to be used as default database in the TMPEffects settings (in the top bar, Edit -> Preferences -> TMPEffects). SceneAnimations and SceneCommands are separate from databases and are instead added to a dictionary in the component's inspector; see the individual sections on them."
  },
  "manual/effecttag.html": {
    "href": "manual/effecttag.html",
    "title": "TMPEffectTag | TMPEffects documentation",
    "keywords": "TMPEffectTag TMPEffectTag, together with TMPEffectTagIndices, is the data structure used to represent a tag in the code, for example animation tags or command tags. The API docs can be found here. Properties The TMPEffectTag consists of the following properties: Name : string Prefix : char Parameters : ReadOnlyDictionary<string, string> Example: the show tag <+fade anc=zero dur=0.55> would be: Name : \"fade\" Prefix : '+' Parameters : {{ \"anc\", \"zero\" }, { \"dur\", \"0.55\" }} Indices The TMPEffectTagIndices struct consists of: StartIndex : int EndIndex : int OrderAtIndex : int The indices are a half open interval; meaning a tag with a StartIndex of 5 and an EndIndex of 12 will \"contain\" the indices 5, 6, 7, 8, 9, 10, 11 and 12. The OrderAtIndex is used to maintain an order if there are multiple tags at the same index. Generally speaking, the tags' OrderAtIndex won't be sequential (i.e. 1, 2, 3, and so on), but may skip around. You will notice this if you iterate, for example, over the BasicTags property of a TMPAnimator. The only invariant OrderAtIndex it guaranteed to follow is that they are sorted from smallest to largest."
  },
  "manual/ianimationcontext.html": {
    "href": "manual/ianimationcontext.html",
    "title": "IAnimationContext | TMPEffects documentation",
    "keywords": "IAnimationContext An instance of the IAnimationContext type serves as the context for all animations. Properties IAnimationContext exposes various properties that will be useful for your animations: CustomData: The custom data object created in GetNewCustomData (see Creating Animations). SegmentData: Contains information about the animation segment the current character belongs to. StartIndex: The first index of the segment within the containing text Length: The lenght of the segment FirstVisibleIndex: The index of the first visible character (i.e. non-whitespace character) LastVisibleIndex: The index of the last visible character (i.e. non-whitespace character) FirstAnimationIndex: The index of the first character will actually be animated (i.e. not whitespace, not excluded by TMPAnimator) LastAnimationIndex: The index of the last character will actually be animated (i.e. not whitespace, not excluded by TMPAnimator) Max: The maximum vertex positions of text in this segment Min: The minimum vertex positions of text in this segment SegmentIndexOf(CharData): Get the index within this segment for the passed in CharData State: Exposes multiple readonly properties about the current state of the CharData (with previous animations already applied). Generally, to be used with the late tag parameters (see Getting started with TMPAnimator). CalculateVertexPositions(): Calculate the current vertex positions. Results can be read from BL_Result, TL_Result, TR_Result, BR_Result. Finished(int), Finished(CharData): Check whether the given CharData is done animating. To be used with show and hide animations (see Creating show / hide animations). FinishAnimation(CharData): Finish the animation for the given CharData. To be used with show and hide animations (see Creating show / hide animations). AnimatorContext: The IAnimatorContext exposes properties about the animator state. PassedTime: The time that has passed since the animator began animating. Generally speaking, you should use this as the time value for basic animations DeltaTime: The current delta time used by the animator to update the animations. UseScaledTime: Whether the animator uses scaled time (=> whether PassedTime is scaled) ScaleAnimations: Whether the animator scales the animation. Used by various AnimationUtility methods. StateTime(CharData): How long the given CharData has been in its current visibility state for. Generally speaking, you should use this as the time value for show and hide animations VisibleTime(CharData): How long the given CharData has been visible for. Can use this alternatively to PassedTime for basic animations"
  },
  "manual/installation.html": {
    "href": "manual/installation.html",
    "title": "Installation | TMPEffects documentation",
    "keywords": "Installation TMPEffects is available on the OpenUPM registry. Alternatively, you can install TMPEffects through the Unity Package Manager, using the git url: https://github.com/Luca3317/TMPEffects.git For that, open the Package Manager window in Unity and click on the '+' icon in the top left. Then, paste the above git url and hit enter. Done! Importing Resources Once installed, when you first access a TMPEffects component, you will be prompted to import the required resources. These are the asset files for the built-in animations, commands and databases, as well as a settings file (which you can access through Unity's Preferences). They will be imported into Assets/TMPEffects. Warning ⚠️ Ideally, you should reload the current scene once you imported these resources, otherwise some asset references might not be correctly updated until the next domain reload. After that, you should be good to go \uD83D\uDE03 Optionally, there are a few basic samples you can import."
  },
  "manual/introduction.html": {
    "href": "manual/introduction.html",
    "title": "Introduction | TMPEffects documentation",
    "keywords": "Introduction TMPEffects is a tool for Unity that allows you to easily apply many different kinds of effects to your text. It consists of two main components: TMPAnimator allows you to animate text over time TMPWriter allows you to show and hide text over time, as well as execute commands or raise events at any given index Using both components in conjunction also allows you to apply special animations to text that is in the process of being shown or hidden."
  },
  "manual/parameters.html": {
    "href": "manual/parameters.html",
    "title": "Parameters | TMPEffects documentation",
    "keywords": "Parameters The following three sections introduce you to the different parameter types, and show you how to make your life easier when writing animations (or commands)."
  },
  "manual/parametertypes.html": {
    "href": "manual/parametertypes.html",
    "title": "Parameter types | TMPEffects documentation",
    "keywords": "Parameter types TMPEffects supports a variety of different parameter types that come with built-in parsing utilities (see the next section). Supported types This is the full list of currently supported parameter types: float int bool Color Vector2 Vector3 Vector2Offset Vector3Offset Anchor TypedVector2 TypedVector3 AnimationCurve WaveOffsetType Array Type formatting This is an overview of how to correctly format the different parameter types in your tags, most with at least one example. float: Must use . as decimal, not , 2.54, 3 int: Just a plain integer number 12 bool: Either true or false Color: Colors may be defined either in HEX format, HSV format or RGB(A) format. In addition to that, there are a bunch of supported keywords #DEADBEEF,hsv(0.3,64,52), rgb(0,0.5,0.5), indigo Vector2: Two bracketed floats, separated by comma (0.3, 22.4) Vector3: Three bracketed floats, separated by comma (or two; third float automatically set to zero) (0.3, 22.4, 0) = (0.3, 22.4) Vector2Offset: Same as Vector2, but with leading o: o:(0.3, 22.4) Vector2Offset: Same as Vector3, but with leading o: (0.3, 22.4, 0) = o:(0.3, 22.4) Anchor: Same as Vector2, but with leading a: a:(0.3, 22.4) TypedVector2: Format of either Vector2, Vector2Offset or Anchor (0.3, 22.4), o:(0.3, 22.4), a:(0.3, 22.4) TypedVector3: Format of either Vector3, Vector3Offset or Anchor (0.3, 22.4, 0), o:(0.3, 22.4, 0), a:(0.3, 22.4) AnimationCurve: Generally keywords; though you may also construct custom curves by specifying one of the predefined methods (cubic, quadratic, linear) or just a raw vector sequence. See AnimationCurveUtility for more info. easinoutsine, quadratic((0,0),(0.2,0.7),(1,1)), (0,0),(0.2,0.7),(1,1) WaveOffsetType: Keywords index / idx, segmentindex / sindex / sidx, x / xpos, y / ypos Array: Multiple of the desired type, separated by a semicolon 0.3;4.82;1, red;green;blue, true;false;false"
  },
  "manual/parameterutility.html": {
    "href": "manual/parameterutility.html",
    "title": "ParameterUtility | TMPEffects documentation",
    "keywords": "ParameterUtility ParameterUtility is a static utility class for parameter validation and parsing, to be used with all types of animations and commands. The full API docs can be found here. For each of the supported parameter types listed in the previous section, there is a HasXYZParameter method, a HasNonXYZParameter method, a GetXYZParameter and a TryGetXZYParameter method. Each of these methods are explained individually below. HasParameter bool HasXYZParameter(IDictionary<string, string>, string name, params string[] aliases) checks whether the given set of parameters contains a parameter of the given name, or any of the aliases, that is of type XYZ. Example: HasFloatParameter(parameters, \"duration\", \"dur\", \"d\") returns true if parameters contains a parameter named either \"duration\", \"dur\" or \"d\", and the value could be converted to type float. Otherwise, it returns false. HasNonParameter bool HasNonXYZParameter(IDictionary<string, string>, string name, params string[] aliases) checks whether the given set of parameters contains a parameter of the given name, or any of the aliases, that is NOT of type XYZ. Example: HasNonFloatParameter(parameters, \"duration\", \"dur\", \"d\") returns true exactly when parameters contains a parameter named either \"duration\", \"dur\" or \"d\", but the value could NOT be converted to type float. Otherwise, it returns false. GetParameter XYZ GetXYZParameter(IDictionary<string, string>, string name, params string[] aliases) returns the parameter defined by the given name, or any of the aliases, converted to type XYZ. Otherwise, it will throw an exception. Example: GetFloatParameter(parameters, \"duration\", \"dur\", \"d\") throws an exception if parameters does not contain a parameter named either \"duration\", \"dur\" or \"d\", or, if the parameter is defined, it could not be converted to type float. Otherwise, it will return the parameter converted to type float. TryGetParameter bool TryGetXYZParameter(out XYZ value, IDictionary<string, string>, string name, params string[] aliases) wraps GetParameter in a try-catch statement, returning true if it was successful, otherwise it returns false. If successful, you can get the value of the converted parameter from the out XYZ value parameter. Example: TryGetFloatParameter(out float value, parameters, \"duration\", \"dur\", \"d\") returns false if parameters does not contain a parameter named either \"duration\", \"dur\" or \"d\", or, if the parameter is defined, it could not be converted to type float. Otherwise, it will return true and value will be set to the parameter converted to type float. Array For array parameters, each of these four methods have an additional required parameter: ParseDelegate<string, T, IDictionary<string, T>, where ParseDelegate is defined as: public delegate W ParseDelegate<T, U, V, W>(T input, out U output, V keywords). Essentially, this delegate is used to parse the individual elements of the array. You can use the ParsingUtility.StringToXYZ methods for this (they are not further explained here, but you can look at the API docs for them). Example: TryGetArrayParameter<float>(out float[] value, parameters, ParsingUtility.StringToFloat, \"numbers\", \"nums\") ParameterDefined In addition to these type-specific methods, there are also generic methods for checking whether a parameter is defined, without performing any type checks. These are: bool ParameterDefined(IDictionary<string, string>, string name, params string[] aliases): Checks whether a parameter of the given name or any of its aliases is present in the dictionary. EXACTLY one must be defined for this to return true; if for example two aliases are present it is considered not defined. string GetDefinedParameter(IDictionary<string, string>, string name, params string[] aliases): If the parameter is defined according to ParameterDefined, this will return the value of that parameter. Otherwise, it will throw an exception. bool TryGetDefinedParameter(out string value, IDictionary<string, string>, string name, params string[] aliases): Wraps GetDefinedParameter in a try-catch statement. If successful, the parameter value will be stored in the out string value parameter. Waves If your animation uses Waves, you can use the pre-defined wave parameters set by using ValidateWaveParameters(IDictionary<string, string> parameters, string prefix = \"\") and GetWaveParameters(IDictionary<string, string> parameters, string prefix = \"\") in ValidateParameters and SetParameters respectively. The passed in prefix lets you use multiple waves with differently prefixed parameter names. If you have a default wave, you can combine it with the set parameters like this: [SerializeField] Wave wave; public void SetParameters(object customData, IDictionary&lt;string, string&gt; parameters) { Data d = customData as Data; // Cast custom data to whatever type it is d.Wave = CreateWave(wave, GetWaveParameters(parameters)); } This will create a new wave from the set parameters and the values defined in the default wave as fallback values for the non-set parameters. For the full list of parameters that are part of the wave parameters set, see the API documentation."
  },
  "manual/tagcollections.html": {
    "href": "manual/tagcollections.html",
    "title": "TagCollections | TMPEffects documentation",
    "keywords": "TagCollections TagCollection is a collection of TMPEffectTagTuples, which combine TMPEffectTags and TMPEffecTagIndices. It maintains an order for the tags based on their indices, and exposes multiple functions to get contained tags based on their indices, and vice versa. When creating a TagCollection, you can pass a ITMPTagValidator, to guarantee you may only add specific tags to the collection. For normal use cases, you won't be creating TagCollections though; generally, you will use the TagCollections exposed by the TMPAnimator and TMPWriter to add or remove tags from script. Be aware that if you add tags to a TagCollection, if there is already a tag present with the exact same StartIndex and OrderAtIndex, that the OrderAtIndex of the contained tags will be adjusted."
  },
  "manual/tmpanimator.html": {
    "href": "manual/tmpanimator.html",
    "title": "TMPAnimator | TMPEffects documentation",
    "keywords": "TMPAnimator TMPAnimator is one of the two main components of TMPEffects, along with TMPWriter. Primarily, it allows you to Your browser does not support the video tag."
  },
  "manual/tmpanimator_addinganimations.html": {
    "href": "manual/tmpanimator_addinganimations.html",
    "title": "| TMPEffects documentation",
    "keywords": ""
  },
  "manual/tmpanimator_animationutility_wave.html": {
    "href": "manual/tmpanimator_animationutility_wave.html",
    "title": "Wave | TMPEffects documentation",
    "keywords": "Wave The Wave class significantly streamlines the process of creating periodic animations. .center { display: block; margin-left: auto; margin-right: auto; margin-top: 2em; margin-bottom: 2em; width: 50%; } .center2 { display: block; margin-left: auto; margin-right: auto; margin-top: 2em; margin-bottom: 2em; width: 70%; } Defining a wave Waves are defined by, and created using, eight different parameters, which are as follows: Upward Curve: Defines the \"shape\" of the half of the curve that moves up Downward Curve: Defines the \"shape\" of the half of the curve that moves down Up Period: Defines the amount of time it takes to travel the upward curve Down Period: Defines the amount of time it takes to travel the downward curve Amplitude: Defines the maximum value the wave reaches; this is 1 by default Crest Wait: Defines the amount of time the wave maintains its peak Trough Wait: Defines the amount of time the wave maintains its minimum Uniformity: Defines how much the offset passed in when evaluating the wave is considered The following diagram illustrates the first five parameters. On the left you see the upward curve, on the right the downward curve. The second diagram illustrates crest and trough wait. Both essentially insert a period of time during which the wave's value does not change. The uniformity is hard to visualize in a diagram in this way; I find it easier to just imagine it abstractly as the uniformity the animation will show across the animated text segment. Below, you see the same animation with the exact same wave, except that the first animation uses uniformity = 0, the second uniformity = 0.25, the third uniformity = 1. Your browser does not support the video tag. Creating a wave You create a wave simply by passing in these eight values into Waves constructor. Since this class is designed specifically to be used with animations though, likely you will mostly be creating it using the CreateWave method from the ParameterUtility class. For info about how to use wave as a parameter in your animations, see ParameterUtility Wave. Evaluating a wave Once you have created a Wave, you can evaluate it using a time value and an offset value: (float, int) Evaluate(float time, float offset). As you can tell by the signature, Evaluate returns two values. The float is the actual value of the curve for the given time and offset. The integer indicates whether the curve is currently travelling up or down; if it is negative, the curve is moving down, if it is positive, the curve is moving up. This value is useful for when you want to switch the behavior of your animation depending on what curve the wave is currently travelling. For example, the built-in fade animation can use different anchors depending on whether the character is fading in or out. The animation below visualizes how fade uses both values of the Evaluate method. Your browser does not support the video tag. Checking wave extrema You can check if the wave passed an extrema (so either the crest or the trough) during the last update, using the int PassedExtrema(float time, float deltaTime, float offset) method. Once again, you need the time value and the offset, and additionally here you need the deltaTime since you last checked. Essentially, the method checks whether the wave passed an extrema during the time interval of [timeValue - deltaTime, timeValue]. A positive return value indicates that a maximum was passed, a negative return value indicates that a minimum was passed, and 0 indicates neither was. An additional, optional parameter is PulseExtrema. If the checked wave has a crest or trough wait, this parameter defines whether an extremum is passed once the wait time begins, or once it ends. PulseExtrema can also consider both to be an extrema, but of course be aware that it will then notify you of each extremum twice. If multiple extrema were passed during the specified interval, it will notify you of the latest one."
  },
  "manual/tmpanimator_builtinbasicanimations.html": {
    "href": "manual/tmpanimator_builtinbasicanimations.html",
    "title": "Built-in animations | TMPEffects documentation",
    "keywords": "Built-in animations This section gives you a complete overview of all built-in basic animations and their parameters (for show / hide / scene animations see the respective sections). Basic animations are those type of animation seen in the previous section, which animate a piece of text continuously over time. .anim-grid { display: grid; grid-template-columns: repeat(3, 1fr); } .centered-video { } .flex-row{ display: flex; flex-direction: row; justify-content: space-evenly; } .flex-row > div { flex: 1; } .anim-container { margin-left: 1.2rem; margin-right: 1.2rem; } .wrap-collabsible { margin-bottom: 1.2rem 0; display: flex; justify-content: center; flex-direction: column; align-items: center; } input[type='checkbox'] { display: none; } .lbl-toggle { display: block; font-weight: bold; font-family: monospace; font-size: 1.2rem; text-transform: uppercase; text-align: center; padding: 1rem; color: #A77B0E; background: #FAE042; cursor: pointer; border-radius: 0px; transition: all 0.00s ease-out; user-select: none; width: 100%; } .lbl-toggle:hover { color: #7C5A0B; } .lbl-toggle::before { content: ' '; display: inline-block; border-top: 5px solid transparent; border-bottom: 5px solid transparent; border-left: 5px solid currentColor; vertical-align: middle; margin-right: .7rem; transform: translateY(-2px); transition: transform .0s ease-out; } .toggle:checked + .lbl-toggle::before { transform: rotate(90deg) translateX(-3px); } .collapsible-content { max-height: 0px; overflow: hidden; transition: max-height .00s ease-in-out; } .toggle:checked + .lbl-toggle + .collapsible-content { max-height: 100vh; } .toggle:checked + .lbl-toggle { border-bottom-right-radius: 0; border-bottom-left-radius: 0; } .collapsible-content .content-inner { background: rgba(250, 224, 66, .2); border-bottom: 1px solid rgba(250, 224, 66, .45); border-bottom-left-radius: 7px; border-bottom-right-radius: 7px; padding: .5rem 1rem; } Your browser does not support the video tag. wave Parameters Wave: see ParameterUtility.Waves WaveOffsetType: The way the offset for the wave is calculated. waveoffset, woffset, waveoff, woff Your browser does not support the video tag. Fade Parameters Wave: see ParameterUtility.Waves WaveOffsetType: The way the offset for the wave is calculated. waveoffset, woffset, waveoff, woff MaxOpacity: The maximum opacity that is reached. maxopacity, maxop, max FadeInAnchor: The anchor used for fading in. fadeinanchor, fianchor, fianc, fia FadeInDirection: The direction used for fading in. fadeindirection, fidirection, fidir, fid MinOpacity: The minimum opacity that is reached. minopacity, minop, min FadeOutAnchor: The anchor used for fading out. fadeoutanchor, foanchor, foanc, foa FadeOutDirection: The direction used for fading out. fadeoutdirection, fodirection, fodir, fod Your browser does not support the video tag. Pivot Parameters Wave: see ParameterUtility.Waves WaveOffsetType: The way the offset for the wave is calculated. waveoffset, woffset, waveoff, woff Pivot: The pivot position of the rotation. pivot, pv, p RotationAxis: The axis to rotate around. rotationaxis, axis, a MaxAngleLimit: The maximum angle of the rotation. maxangle, maxa, max MinAngleLimit: The minimum angle of the rotation. minangle, mina, min Your browser does not support the video tag. funky Parameters Speed: The speed at which the animation plays. speed, sp, s SqueezeFactor: The percentage of its original size the text is squeezed to. squeezefactor, squeeze, sqz Amplitude: The amplitude the text pushes to the left / right. amplitude, amp Your browser does not support the video tag. Fade Parameters Characters: The pool of characters to change to. characters, chars, char, c Probability: The probability to change to a character different from the original. probability, prob, p MinWait: The minimum amount of time to wait once a character changed (or did not change). minwait, minw, min MaxWait: The maximum amount of time to wait once a character changed (or did not change). maxwait, maxw, max AutoCase: Whether to ensure capitalized characters are only changed to other capitalized characters, and vice versa. autocase, case Your browser does not support the video tag. shake Parameters Uniform: Whether to apply the shake uniformly across the text. uniform, uni MaxXAmplitude: The maximum X amplitude of each shake. maxxamplitude, maxxamp, maxxa, maxx MinXAmplitude: The minimum X amplitude of each shake. minxamplitude, minxamp, minxa, minx MaxYAmplitude: The maximum Y amplitude of each shake. maxyamplitude, maxyamp, maxya, maxy MinYAmplitude: The minimum Y amplitude of each shake. minyamplitude, minyamp, minya, miny UniformWait: Whether to use uniform wait time across the text. Ignored if uniform is true. uniformwait, uniwait, uniw MaxWait: The minimum amount of time to wait after each shake. maxwait, maxw MinWait: The maximum amount of time to wait after each shake. minwait, minw Your browser does not support the video tag. grow Parameters Wave: see ParameterUtility.Waves WaveOffsetType: The way the offset for the wave is calculated. waveoffset, woffset, waveoff, woff MaxScale: The maximum scale to grow to. maxscale, maxscl, max MinScale: The minimum scale to shrink to. minscale, minscl, min Your browser does not support the video tag. Fade Parameters Wave: see ParameterUtility.Waves WaveOffsetType: The way the offset for the wave is calculated. waveoffset, woffset, waveoff, woff Colors: The colors to cycle through. colors, clrs Your browser does not support the video tag. spread Parameters Wave: see ParameterUtility.Waves WaveOffsetType: The way the offset for the wave is calculated. waveoffset, woffset, waveoff, woff GrowAnchor: The anchor used for growing. growanchor, growanc, ganc GrowDirection: The direction used for growing. growdirection, growdir, gdir ShrinkAnchor: The anchor used for shrinking. shrinkanchor, shrinkanc, sanc ShrinkDirection: The direction used for shrinking. shrinkdirection, shrinkdir, sdir MaxPercentage: The maximum percentage to spread to, at 1 being completely shown. maxpercentage, maxp, max MinPercentage: The minimum percentage to unspread to, at 0 being completely hidden. minpercentage, minp, min Your browser does not support the video tag. pivotc Parameters Pivot: The pivot position of the rotation. pivot, pv, p RotationAxis: The axis to rotate around. rotationaxis, axis, a Speed: The speed of the rotation, in rotations per second. speed, sp, s Your browser does not support the video tag. Your browser does not support the video tag. <swing> and <jump> are based on previous animations; they use the same code with different default values. <swing> is based on <pivot>, <jump> is based on <wave>. The parameters are therefore identical with the ones they are based on."
  },
  "manual/tmpanimator_builtinshowhideanimations.html": {
    "href": "manual/tmpanimator_builtinshowhideanimations.html",
    "title": "Built-in animations | TMPEffects documentation",
    "keywords": "Built-in animations This section gives you a complete overview of all built-in show and hide animations and their parameters (for basic / scene animations see the respective sections). Each of the animations listed here has both a show and a hide version. .centered-video { } .anim-grid { display: grid; grid-template-columns: repeat(3, 1fr); } .grid-item { border: 1px solid black; padding: 10px; } .flex-row{ display: flex; flex-direction: row; justify-content: space-evenly; } .flex-row > div { flex: 1; } .anim-container { margin-left: 1.2rem; margin-right: 1.2rem; } .wrap-collabsible { margin-bottom: 1.2rem 0; display: flex; justify-content: center; flex-direction: column; align-items: center; } input[type='checkbox'] { display: none; } .lbl-toggle { display: block; font-weight: bold; font-family: monospace; font-size: 1.2rem; text-transform: uppercase; text-align: center; padding: 1rem; color: #A77B0E; background: #FAE042; cursor: pointer; border-radius: 0px; transition: all 0.00s ease-out; user-select: none; width: 100%; } .lbl-toggle:hover { color: #7C5A0B; } .lbl-toggle::before { content: ' '; display: inline-block; border-top: 5px solid transparent; border-bottom: 5px solid transparent; border-left: 5px solid currentColor; vertical-align: middle; margin-right: .7rem; transform: translateY(-2px); transition: transform .0s ease-out; } .toggle:checked + .lbl-toggle::before { transform: rotate(90deg) translateX(-3px); } .collapsible-content { max-height: 0px; overflow: hidden; transition: max-height .00s ease-in-out; } .toggle:checked + .lbl-toggle + .collapsible-content { max-height: 100vh; } .toggle:checked + .lbl-toggle { border-bottom-right-radius: 0; border-bottom-left-radius: 0; } .collapsible-content .content-inner { background: rgba(250, 224, 66, .2); border-bottom: 1px solid rgba(250, 224, 66, .45); border-bottom-left-radius: 7px; border-bottom-right-radius: 7px; padding: .5rem 1rem; } Your browser does not support the video tag. fade Parameters Duration: How long the animation will take to fully show / hide the character. duration, dur, d Curve: The curve used for fading in / out. curve, crv, c Anchor: The anchor that is faded in / out from. anchor, anc, a Direction: The direction that is faded in / out from. direction, dir Show:StartOpacity: The opacity that is faded in from. startopacity, startop, start Hide:TargetOpacity: The opacity that is faded out from. targetopacity, targetop, target Your browser does not support the video tag. pivot Parameters Duration: How long the animation will take to fully show / hide the character. duration, dur, d Curve: The curve used for getting the t-value to interpolate between the angles. curve, crv, c Pivot: The pivot position of the rotation. pivot, pv, p StartAngle: The starting euler angles. startangle, start TargetAngle: The target euler angles. targetangle, target Your browser does not support the video tag. grow Parameters Duration: How long the animation will take to fully show / hide the character. duration, dur, d Curve: The curve used for getting the t-value to interpolate between the scales. curve, crv, c Show StartScale: The scale to start growing to the initial scale from. startscale, startscl, start Hide TargetScale: The scale to grow to from the initial scale. targetscale, targetscl, target Your browser does not support the video tag. spread Parameters Duration: How long the animation will take to fully show / hide the character. duration, dur, d Curve: The curve used for getting the t-value to interpolate between the percentages. curve, crv, c Anchor: The anchor from where the character spreads. anchor, anc, a Direction: The direction in which the character spreads. direction, dir, d StartPercentage: The start percentage of the spread, 0 being fully hidden. startpercentage, start TargetPercentage: The target percentage of the spread, 1 being fully shown. targetpercentage, target Your browser does not support the video tag. move Parameters Duration: How long the animation will take to fully show / hide the character. duration, dur, d Curve: The curve used for getting the t-value to interpolate between the start and target position. curve, crv, c Show StartPositon: The postion to move the character in from. startposition, startpos, start Hide TargetPosition: The postion to move the character to. targetposition, targetpos, target Your browser does not support the video tag. shake Parameters Duration: How long the animation will take to fully show / hide the character. duration, dur, d MaxXAmplitude: The maximum X amplitude of each shake. maxxamplitude, maxxamp, maxxa, maxx MinXAmplitude: The minimum X amplitude of each shake. minxamplitude, minxamp, minxa, minx MaxYAmplitude: The maximum Y amplitude of each shake. maxyamplitude, maxyamp, maxya, maxy MinYAmplitude: The minimum Y amplitude of each shake. minyamplitude, minyamp, minya, miny MaxWait: The minimum amount of time to wait after each shake. maxwait, maxw MinWait: The maximum amount of time to wait after each shake. minwait, minw WaitCurve: The curve that defines the falloff of the wait between each shake. waitcurve, waitcrv, waitc AmplitudeCurve: The curve that defines the falloff of the amplitude of each shake. amplitudecurve, amplitudecrv, amplitudec, ampcurve, ampcrv, ampc Your browser does not support the video tag. char Parameters Duration: How long the animation will take to fully show / hide the character. duration, dur, d Characters: The pool of characters to change to. characters, chars, char, c Probability: The probability to change to a character different from the original. probability, prob, p MinWait: The minimum amount of time to wait once a character changed (or did not change). minwait, minw, min MaxWait: The maximum amount of time to wait once a character changed (or did not change). maxwait, maxw, max AutoCase: Whether to ensure capitalized characters are only changed to other capitalized characters, and vice versa. autocase, case WaitCurve: The curve that defines the falloff of the wait between each change. waitcurve, waitcrv, waitc Probability: The curve that defines the falloff of the probability of changing to a character other than the original. probabilitycurve, probabilitycrv, probabilityc, probcurve, probcrv, probc"
  },
  "manual/tmpanimator_componentoverview.html": {
    "href": "manual/tmpanimator_componentoverview.html",
    "title": "TMPAnimator overview | TMPEffects documentation",
    "keywords": "TMPAnimator overview This section gives an overview of the actual TMPAnimator component, both for the inspector and scripting. The full API documentation can be found here. Preview To toggle the editor preview of animations, press the TogglePreview at the top of the TMPAnimator inspector. Next to it, the button labeled Reset time resets the time tracked by the TMPAnimator component, and therefore all animations. Updating the animations In the inspector or through the SetUpdateFrom method, you can set how the animations are updated. If UpdateFrom is set to either Update, LateUpdate or FixedUpdate, the animations are automatically updated in the respective Unity callback. In order to play animations in play mode, you will have to call StartAnimating or set the Play On Start to true in either the inspector or some other script's Awake function. You can then stop animating again by simply calling StopAnimating. Alternatively, if you want more fine-tuned control over when and how often animations are updated, for example if you want to limit the updates per second to at most 300, you can set the TMPAnimator's UpdateFrom to Script. This causes the animations to no longer be updated automatically; instead you may call UpdateAnimations(float deltaTime) manually whenever you like. Note that if UpdateFrom is set to Script, you should not call StartAnimating or StopAnimating, since this will have no effect besides logging a warning to Unity's console. Vice versa, if UpdateFrom is set to be automatically updated, you should not call UpdateAnimations(float deltaTime); it again does nothing but log a warning. The state of UpdateFrom has no effect on the editor preview. Animation databases The TMPAnimator inspector has a foldout labeled Animations. There, you may choose the animation database that is used to process animation tags from the TextMeshPro component's text. If you toggle Use default database to true, the default animation database is automatically selected for you. The default database is defined in the TMPEffects preferences file. You can also set the database used by the TMPAnimator component through script, using the SetDatabase(TMPAnimationDatabase db) method. Below the database, there are three other fields: SceneAnimations, SceneShowAnimations and SceneHideAnimations. These are simply dictionaries that allow you to map tag names to SceneAnimations. Tags defined here are also parsed by the TMPAnimator. For more about databases, see Databases. For more about SceneAnimations, see SceneAnimations. Animator settings TMPAnimator has various settings that modify the way it animates its text. Each of these is settable through both the inspector and through script. Animations override: The default override behavior for all animation tags. If true, each tag overrides any of its category (basic / show / hide) that came before it, and only that one is applied. Otherwise, animations are stacked by default. Each tag can manually define its override behavior by using the override (shorthand: or) parameter. Default show / hide string: Allows you to define a default show / hide animation that is used for the entirety of the text, if no other show / hide animation tag effects it. Set this like you would add any tag to your text, e.g. <+fade dur=0.65 anc=a:bottom>>, <-spread crv=easeinoutsine>>. Exclusions: For each of the animationg categories (basic / show / hide), you can define a set of characters that is excluded from all animations. For example, if you don't want numbers to be animated, you could set Excluded Characters to \"1234567890\". In addition to this, there is an Exclude Punctuation toggle for each of the categories. Scale animations: Defines whether animations should be scaled to the font size property of the TMP_Text component. If true, animations will look identical regardless of font size. Use scaled time: Defines whether animations should use scaled time or not. Adding & removing tags through script The TMPAnimator class exposes four different TagCollections: BasicTags, which contains all parsed basic animation tags, ShowTags, which contains all parsed show animation tags and HideTags, which contains all parsed hide animation tags. Additionally, Tags is the union of the other three collections. For each of the TagCollections, you may freely add and remove tags at any point."
  },
  "manual/tmpanimator_creatinganimations.html": {
    "href": "manual/tmpanimator_creatinganimations.html",
    "title": "Creating animations | TMPEffects documentation",
    "keywords": "Creating animations This section walks you through creating your own animations, specifically basic animations, or animations that derive from TMPAnimation. For what small differences there are, see Creating show / hide animation and Creating scene animations. Creating the class First, create a new C# script in the Unity editor. Add the following using statement at the top of your class: using TMPEffects.TMPAnimations;. Then, make the created class derive from TMPAnimation. In order to be able to create the animation object in the Unity editor and add it to your database, make sure to decorate the class with the CreateAssetMenu attribute. Methods You will have errors due to TMPAnimation's abstract members not being implemented. Auto-implement them using your IDE, or add them manually. When you are done, your class should look something like this: using UnityEngine; using TMPEffects.TMPAnimations; [CreateAssetMenu(fileName=\"new YourFirstAnimation\", menuName=\"Your/Path/YourFirstAnimation\")] public class YourFirstAnimation : TMPAnimation { public override void Animate(CharData cData, IAnimationContext context) { throw new System.NotImplementedException(); } public override bool ValidateParameters(IDictionary<string, string> parameters) { throw new System.NotImplementedException(); } public override object GetNewCustomData() { throw new System.NotImplementedException(); } public override void SetParameters(object customData, IDictionary<string, string> parameters) { throw new System.NotImplementedException(); } } Let's go over each method individually. Animate(CharData cData, IAnimationContext context): The primary method of your animation. This method will be called each animation update, once for each animated character. We'll go into more detail about this method in the next section. ValidateParameters(IDictionary<string, string>): This method is called once during tag processing. It allows you to specify whether a given tag for this animation has valid parameters. ParameterUtility will come in handy here. Return true if the parameters are valid, return false if not. If false, the tag will not be processed. GetNewCustomData(): Allows you to create a piece of custom data that will be passed into Animate as part of the IAnimationContext. Used for storing parameters, keeping other consistent values (for example, create an RNG once and store it here instead of creating it every Animate call), and anything else you need. In here, you should also set the default values for the parameters defined in the inspector. SetParameters(object customData, IDictionary<string, string>): This method is called once, right after tag processing is done. The passed in customData object is the object you created and returned in GetNewCustomData. It allows you to store the tag parameters in your object and access them in Animate. Full example The code below is the full implementation of the built-in wave animation. If the code seems somewhat daunting don't worry; you will have to have looked at AnimationUtility, ParameterUtility, and Animating a character to fully get what's going on here \uD83D\uDE42 using System.Collections.Generic; using UnityEngine; using TMPEffects.CharacterData; using static TMPEffects.ParameterUtility; using static TMPEffects.TMPAnimations.AnimationUtility; using TMPEffects.Extensions; namespace TMPEffects.TMPAnimations.Animations { [CreateAssetMenu(fileName = \"new WaveAnimation\", menuName = \"TMPEffects/Animations/Wave\")] public class WaveAnimation : TMPAnimation { [Tooltip(\"The wave that defines the behavior of this animation. No prefix.\\nFor more information about Wave, see the section on it in the documentation.\")] [SerializeField] Wave wave = new Wave(AnimationCurveUtility.EaseInOutSine(), AnimationCurveUtility.EaseInOutSine(), 0.5f, 0.5f, 1f, 1f, 0.2f); [Tooltip(\"The way the offset for the wave is calculated.\\nFor more information about Wave, see the section on it in the documentation.\\nAliases: waveoffset, woffset, waveoff, woff\")] [SerializeField] WaveOffsetType waveOffsetType = WaveOffsetType.XPos; // Animate the character public override void Animate(CharData cData, IAnimationContext context) { // Cast your custom data object to the type Data data = (Data)context.customData; // Evaluate the wave data structure at the current time, with the characters offset (see AnimationUtility section for info on this) float eval = data.wave.Evaluate(context.animatorContext.PassedTime, GetWaveOffset(cData, context, data.waveOffsetType)).Item1; // Set the new position of the character cData.SetPosition(cData.info.initialPosition + Vector3.up * eval); } // Validate the tag's parameters public override bool ValidateParameters(IDictionary<string, string> parameters) { // If there is no parameters, return true (wave does not have any required parameters) if (parameters == null) return true; // If there is a parameter \"waveoffset\" (or one of its aliases) // but it has the wrong type, return false if (HasNonWaveOffsetParameter(parameters, \"waveoffset\", WaveOffsetAliases)) return false; // If the wave parameters could not be validated, return false // Note: \"WaveParameters\" does not refer to anything specific to \"WaveAnimation\" here. // WaveParameters is a predefined parameter bundle in ParameterUtility. See the section on it for more info. if (!ValidateWaveParameters(parameters)) return false; // else return true return true; } // Create the custom data object, set the default values for the parameters, and return it public override object GetNewCustomData() { return new Data() { wave = this.wave, waveOffsetType = this.waveOffsetType }; } // Set the parameters defined in the tag public override void SetParameters(object customData, IDictionary<string, string> parameters) { // If there is no parameters, return early if (parameters == null) return; // Cast your custom data object to the type Data data = (Data)customData; // If has the waveoffset parameter set it in your custom data object if (TryGetWaveOffsetParameter(out var wot, parameters, \"waveoffset\", WaveOffsetAliases)) data.waveOffsetType = wot; // Set the wave in your custom data object // As with ValidateWaveParameters, \"Wave\" refers to the parameter bundle // defined in ParameterUtility, not \"WaveAnimation\". data.wave = CreateWave(this.wave, GetWaveParameters(parameters)); } // The class used to store the parameter values private class Data { public Wave wave; public WaveOffsetType waveOffsetType; } } } Adding the animation to a database To actually use the animation in your text, you will have to follow these steps: Create an animation object: Right click in your project view and create it (it will be in the path you specified in the CreateAssetMenu attribute). Add that object to the database you want to use and give it a name Use that database in the TMPAnimator component Done! You can now use your custom animation like any of the built-in ones. Creating show / hide animations Creating show and hide animations works 99% the same as creating basic animations. The only differences are: Instead of deriving from TMPAnimation, you must derive from TMPShowAnimation or TMPHideAnimation respectively. Warning ⚠️ You HAVE to call context.FinishAnimation(cData) at some point in the animation; This will notify the animator that this show animation is finished, and the character may transition from the Showing state to the Shown state. Because of this, all built-in show and hide animations have a duration parameter, and context.FinishAnimation(cData); is called when that duration is exceeded. See the example below for a simple way to do that. public void Animate(CharData cData, IAnimationContext context) { ReadOnlyAnimatorContext ac = context.animatorContext; Data d = context.customData as Data; // Check if the difference between the time that passed since the animator started // playing and the time the character entered the SHOWING state exceeds the duration if (ac.PassedTime - ac.StateTime(cData) >= d.duration) { context.FinishAnimation(cData); return; } // Actual animation logic here... } Creating scene animations Creating a scene animation, scene show animation or scene hide animation is almost the exact same as creating a basic animation, show animation or hide animation; the only difference is that you will have to derive from TMPSceneAnimation, TMPSceneShowAnimation or TMPSceneHideAnimation respectively, and that you don't add the CreateAssetMenu attribute. Since it is not a ScriptableObject, you of course don't add it to a database either; instead, you add it as a component to a GameObject in your scene, and add that GameObject to your TMPAnimator as described here: Adding scene animation. Warning ⚠️ The context.FinishAnimation(cData) call is required for TMPSceneShowAnimation and TMPSceneHideAnimation as well."
  },
  "manual/tmpanimator_gettingstarted.html": {
    "href": "manual/tmpanimator_gettingstarted.html",
    "title": "Getting started with TMPAnimator | TMPEffects documentation",
    "keywords": "Getting started with TMPAnimator After adding TMPEffects to your project, add a TMPAnimator component to a GameObject with a TMP_Text component (either TextMeshPro - Text or TextMeshPro - Text (UI)). Applying your first animation Write some placeholder text in the TextMeshPro's component textbox. Analogous to TextMeshPro's built-in rich text tags (e.g. <color>, <s>), you can add animations to your text by simply adding animation tags. Try adding <wave> before your placeholder text, and then hitting the Toggle Preview button in the TMPAnimator's inspector. In the scene and game view, you should now see that your text is being animated. It should look something like this: Your browser does not support the video tag. Warning ⚠️ If the <wave> tag is still visible in the scene / game view, the tag is not being correctly processed. Make sure to use the default database by toggling Use default database in the TMPAnimator inspector's Animations foldout. You can close the animation using </wave>. Only text between the opening and closing tag is animated. Modifying the animation Optionally, you can pass various parameter to animation tags. For example, the <wave> tag supports amplitude and uniformity, among others. You could modify the tag like so: <wave amplitude=10 uniformity=0.5>, which should result in something like this: Your browser does not support the video tag. Try to play around with these two values to get something you like! Theres a lot more customization you can apply for almost all animation tags; a complete overview of all tags and their respective parameters can be found in Built-in animations. Stacking animations First, close the <wave> if you haven't already. After the closing tag, add another tag, <palette>, as well as some text after this tag that will be animated by it. Your text should look like this now: \"<wave> *Text* </wave> <palette> *More text* </palette>\", although you will notice the last closing tag is completely optional in this case. The animated text should look like this: Your browser does not support the video tag. If you now remove the closing </wave> tag, the second text will be animated by both tags (assuming the Animations override toggle in the Animator settings foldout is set to false, which it will be by default). It should look something like this: Your browser does not support the video tag. In this manner, you can stack a (theoretically) limitless amount of animations. Of course, there's no guarantee all combinations will mesh well together \uD83D\uDE09 If you switch the Animations override toggle in the TMPAnimator's inspector to true, the second text will be animated as before. This toggle only defines the default behavior of animation tags; you can decide whether a tag should override the previous tags individually by adding the override parameter to a tag, like so: <palette override=true>. All animation tags support this parameter. Late animations / second pass Another parameter supported by all animation tags is late, and is used like so: <wave late>. If set, the animation will be applied in a second pass within the TMPAnimator, meaning it will be applied after all animations that do not have this parameter. You will not need this parameter in the large majority of cases. It is useful primarily for when you need the mesh data of the character to consider the changes made by the other animations. For example, the flashlight effect shown below needs the late parameter to work correctly, as it operates on the vertex positions of the characters. If it was applied before the wave animation, the flashlight would use the incorrect, initial vertex positions. Your browser does not support the video tag. More information about how animations work (and how to create your own) can be found in Creating Animations."
  },
  "manual/tmpanimator_sceneanimations.html": {
    "href": "manual/tmpanimator_sceneanimations.html",
    "title": "Scene animations | TMPEffects documentation",
    "keywords": "Scene animations In addition to TMPAnimation, TMPShowAnimation and TMPHideAnimation, which the animations we've seen so far derive from and which are stored on disk, there is also a SceneAnimation equivalent for each. These are alternative versions of the base classes for the respective category which derive from Unity's MonoBehaviour. The primary purpose of them is to allow you to easily reference Scene objects. Adding scene animations When you have a GameObject with a SceneAnimation component on it, you can simply drag it into the corresponding dictionary in TMPAnimator's Animations foldout, the same way you would assign any scene reference. Once you did that, enter a fitting name for the animation in the field next to where you dragged the SceneAnimation. That's it! You can now use the animation in your text through a tag like any of the built-in animations. Applying scene animations Scene animations are applied in the exact same way as their respective counterpart: Scene animation tags can be directly inserted into the text, where scene show animations are prefixed with a '+', scene hide animations with a '-', and basic scene animation tags are not prefixed. Creating scene animations For information about how to create scene animations, see Creating animations."
  },
  "manual/tmpanimator_showhideanimations.html": {
    "href": "manual/tmpanimator_showhideanimations.html",
    "title": "Show / hide animations | TMPEffects documentation",
    "keywords": "Show / hide animations In addition to basic animations, which are applied continuously, there are also show animations and hide animations, which will be applied only when the effected text is in the process of being shown / hidden. Applying show / hide animations Generally speaking, both show and hide animations require you to add a TMPWriter component to the same GameObject as your TMPAnimator. (You could also write a custom script to show and hide the text in the manner required for show / hide animations to take effect, using TMPAnimator's or TMPWriter's Show/Hide methods.) Show and hide animations are applied in much the same way as basic animations are; in your TMP_Text component, simply add the supported show / hide animation tags like you would regular TextMeshPro tags. Show animation tags are prefixed with a '+', for example <+fade>. Hide animation tags are prefixed with a '-', for example <-move>. For both, the corresponding closing tag must also include the prefix, after the slash: </+fade>, </-move>. So, for example, the string \"<+fade><-move>My placeholder text\" would animate the text like this: Your browser does not support the video tag. If you want to try out recreating this animation, you will have to add a TMPWriter component your TMPAnimator GameObject, and set it up like described in TMPWriter. Setting parameters and stacking show / hide animations works completely analogous to basic animations."
  },
  "manual/tmpwriter.html": {
    "href": "manual/tmpwriter.html",
    "title": "TMPWriter | TMPEffects documentation",
    "keywords": "TMPWriter TMPWriter is one of the two main components of TMPEffects, along with TMPAnimator. Primarily, it allows you to Your browser does not support the video tag. as well as execute commands and invoke events when specific indices are reached."
  },
  "manual/tmpwriter_builtincommands.html": {
    "href": "manual/tmpwriter_builtincommands.html",
    "title": "Getting started with TMPWriter | TMPEffects documentation",
    "keywords": "Getting started with TMPWriter This section gives you a complete overview of all built-in commands. All of the built-in commands modify the TMPWriter's writing behavior (with the exception of <!debug=\"\">). SceneCommands allow you to call any method you want. .anim-grid { display: grid; grid-template-columns: repeat(2, 1fr); } .anim-grid > div { margin-bottom: 1.2rem; margin-top: 1.2rem; } Wait - Pause the writer for the given amount of time Parameters: name : time in seconds Example: I WILL NOW <!wait=1.5>WAIT Your browser does not support the video tag. Show - Show the text block from the very start Parameters: None Example: THIS WILL ALWAYS BE <!show>SHOWN</!show>, FROM THE VERY START Your browser does not support the video tag. Delay - Set the delay between showing characters Parameters: name : delay in seconds Example: <!delay=0.25>I START SLOW...<!delay=0.05>BUT NOW IM FAST Your browser does not support the video tag. Skippable - Set whether the text is skippable Parameters: name : true/false Example: <!skippable=true>WHEN IM SKIPPED, I WONT <!skippable=false>GO ALL THE WAY Your browser does not support the video tag. Debug - Print a message to the Unity console; you hopefully wont need this much but I decided to leave it in anyway \uD83D\uDE04 Parameters: name : Your message type : l(og) / w(arning) / e(rror) Example: PRINTING TO THE CONSOLE NOW:<!debug=\"Test Message\" type=\"warning\">"
  },
  "manual/tmpwriter_componentoverview.html": {
    "href": "manual/tmpwriter_componentoverview.html",
    "title": "TMPWriter overview | TMPEffects documentation",
    "keywords": "TMPWriter overview This section gives an overview of the actual TMPWriter component, both for the inspector and scripting. The full API documentation can be found here. Preview To preview the writer in editor mode, you can hit the play button in the Writer preview section at the top of the TMPWriter inspector. Right next to it, are the buttons for resetting, stopping, and skipping the writer respectively. The progress bar lets you freely skip to any point of the writing process. The two toggles above the player decide whether events and commands are executed in the editor preview. There is a few things to consider with them: Event toggle You will also have to set the actual events you want to raise to Editor and Runtime. [!WARNING] ⚠️ Be careful about which events you allow to be raised in preview mode. Generally I'd recommend setting the event toggle to false completely. Command toggle SceneCommands are never raised in preview mode. If you create any new commands, you can decide whether it should be raised in preview mode through its ExecuteInPreview property. Controlling the writer TMPWriter supplies multiple methods to control the writer. StartWriter(): Starts (or resumes) the writing process StopWriter(): Stops the writing process ResetWriter(): Stops the writing process and resets it ResetWriter(int index): Stops the writing process and resets it to the given index (must be smaller than the current index of the writer) SkipWriter(bool skipShowAnimations): Skips the current text until the next unskippable section, or until the end of the text. Does nothing if the current section is unskippable RestartWriter(bool skipShowAnimations): Stops the writing process, resets it and then starts it again There are also a few method that let you modify the writing process in a more subtle way: Wait(float seconds): Wait for the given amount of time until showing the next character; behavior is equivalent to the wait tag SetDelay(float seconds): Sets the delay used after each character; behavior is equivalent to the delay tag SetSkippable(bool skippable): Sets whether the current text section is skippable; behavior is equivalent to the skippable tag WaitUntil(Func condition) : Wait until the given condition evaluates to true; [!WARNING] ⚠️ WaitUntil has no built-in timeout. It is up to you to ensure the condition wont be false forever / for too long Default values for the delay as well as the \"skippability\" of the text can be set in the TMPWriter inspector. Command databases The TMPWriter inspector has a foldout labeled Commands. There, you may choose the command database that is used to process command tags from the TextMeshPro component's text. If you toggle Use default database to true, the default command database is automatically selected for you. The default database is defined in the TMPEffects preferences file. You can also set the database used by the TMPWriter component through script, using the SetDatabase(TMPCommandDatabase db) method. Below the database, there is another field, SceneCommands, which is simply a dictionary that allows you to map tag names to SceneCommands. Tags defined here are also parsed by the TMPWriter. For more about databases, see Databases. For more about SceneCommands, see SceneCommands. Writer events Besides the OnTextEvent (see Getting started), there are the following events you may listen to: OnCharacterShown(CharData cData): Raised whenever the writer shows a new character; passes the newly shown character OnStartWriter(): Raised whenever the writing process is started OnStopWriter(): Raised whenever the writing process is stopped OnResetWriter(int index): Raised whenever the writing process is reset; passes the index that was reset to OnResetWriter(int index): Raised whenever the writing process is skipped; passes the index that was skipped to OnFinishWriter(): Raised whenever the writing process is finished, and the whole text is shown Adding & removing tags through script The TMPWriter class exposes three different TagCollections: CommandTags, which contains all parsed command tags and EventTags, which contains all parsed event tags. Additionally, Tags is the union of the other two collections. For each of the TagCollections, you may freely add and remove tags at any point."
  },
  "manual/tmpwriter_creatingcommands.html": {
    "href": "manual/tmpwriter_creatingcommands.html",
    "title": "Creating commands | TMPEffects documentation",
    "keywords": "Creating commands This section walks you through creating your own commands. First, create a new C# script in the Unity editor. Creating the class Add the following using statement at the top of your class: using TMPEffects.TMPCommands;. Then, make the created class derive from TMPCommand. In order to be able to create the command object in the Unity editor and add it to your database, make sure to decorate the class with the CreateAssetMenu attribute. Members You will have errors due to TMPCommand's abstract members not being implemented. Auto-implement them using your IDE, or add them manually. When you are done, your class should look something like this: using UnityEngine; using TMPEffects.TMPCommands; [CreateAssetMenu(fileName=\"new YourFirstCommand\", menuName=\"Your/Path/YourFirstCommand\")] public class YourFirstCommand : TMPCommand { public override TagType TagType => throw new System.NotImplementedException(); public override bool ExecuteInstantly => throw new System.NotImplementedException(); public override bool ExecuteOnSkip => throw new System.NotImplementedException(); public override void ExecuteCommand(TMPCommandArgs args) { throw new System.NotImplementedException(); } public override bool ValidateParameters(IDictionary<string, string> parameters) { throw new System.NotImplementedException(); } } Let's go over each member individually. Properties TagType: Defines whether the tags for this command should operate on an index, a text block, or either option. For example, the built-in wait command operates on an index, and the built-in command show operates on a text block (see Built-in commands). ExecuteInstantly: Commands where this property is true are executed the moment the TMPWriter begins the writing process, instead of when their opening tag index is reached. From the built-in tags, only show is executed instantly. ExecuteOnSkip: Commands where this property is true are executed even when their index is skipped over by the writer (i.e., when TMPWriter.SkipWriter() is called). This should be true for commands that need to ensure they are being called even if skipped over, for example a command that starts a quest or adds an item to the player's inventory. Optional properties There are a few optional properties. If you don't override them, they are set to false by default. In both cases, this is to protect you from yourself \uD83D\uDE09 Only set these to true if you are sure it is safe for your case! ExecuteRepeatable: Commands where this property is true may be executed multiple times, specifically if the writer is reset / restarted at any point (i.e., when TMPWriter.ResetWriter() is called). This should be false for commands that need to ensure they are only ever raised once, for example a command that starts a quest or adds an item to the player's inventory. ExecuteInPreview: Commands where this property is true are executed in the editor preview. [!WARNING] ⚠️ Note that you must wrap this property in a #if UNITY_EDITOR preprocessor directive if you want to override it; otherwise your builds will fail. Methods ValidateParameters(IDictionary<string, string> parameters): This method is called during tag processing. It allows you to specify whether a given tag for this command has valid parameters. ParameterUtility will come in handy here. Return true if the parameters are valid, return false if not. If false, the tag will not be processed. ExecuteCommand(TMPCommandArgs args): The meat of your command. This executes the actual command you are implementing. TMPCommandArgs The sole argument for the ExecuteCommand method. It's kept relatively simple: it provides access to the actual EffectTag, through which you may get the tag's parameters, the EffectTagIndices, and the executing TMPWriter. Full example As complete example, the class below is the implementation of the built-in delay command. using System.Collections.Generic; using UnityEngine; namespace TMPEffects.TMPCommands.Commands { [CreateAssetMenu(fileName = \"new DelayCommand\", menuName = \"TMPEffects/Commands/Delay\")] public class DelayCommand : TMPCommand { public override TagType TagType => TagType.Index; public override bool ExecuteInstantly => false; public override bool ExecuteOnSkip => true; public override bool ExecuteRepeatable => true; #if UNITY_EDITOR public override bool ExecuteInPreview => true; #endif public override void ExecuteCommand(TMPCommandArgs args) { if (ParameterUtility.TryGetFloatParameter(out float delay, args.tag.Parameters, \"\")) { args.writer.SetDelay(delay); return; } // Since validate parameters ensures the parameter is present and float, // this state should be impossible to reach throw new System.InvalidOperationException(); } public override bool ValidateParameters(IDictionary<string, string> parameters) { if (parameters == null) return false; if (!parameters.ContainsKey(\"\")) return false; return ParameterUtility.HasFloatParameter(parameters, \"\"); } } } Adding the command to a database To actually use the command in your text, you will have to follow these steps: Create a command object: Right click in your project view and create it (it will be in the path you specified in the CreateAssetMenu attribute). Add that object to the database you want to use and give it a name Use that database in the TMPWriter component Done! You can now use your custom command like any of the built-in ones. Creating scene commands See Scene commands on how to add scene commands."
  },
  "manual/tmpwriter_gettingstarted.html": {
    "href": "manual/tmpwriter_gettingstarted.html",
    "title": "Getting started with TMPWriter | TMPEffects documentation",
    "keywords": "Getting started with TMPWriter After adding TMPEffects to your project, add a TMPWriter component to a GameObject with a TMP_Text component (either TextMeshPro - Text or TextMeshPro - Text (UI)). Writing your first text Write some placeholder text in the TextMeshPro's component textbox. Hit the play button in the preview section of the TMPWriter inspector, or start playing the scene. Your text should be being written, and it should look something like this, with each character appearing one after the other, with a short delay in between: Your browser does not support the video tag. Warning ⚠️ If your text is instantly showing all at once, or is writing too slowly, ensure the Delay field in the inspector, which defines the delay after showing a character in seconds, is set to a sensible value. The example above uses a delay of 0.075 seconds. Adding command tags TMPWriter allows you to easily execute commands when a specific index is reached. You may add them using command tags, prefixed by a '!'. For example, <!wait=1.5> will pause the writer for 1.5 seconds before continuing. Your browser does not support the video tag. A full overview of all built-in command tags is given in the next section. Adding event tags In addition to command tags, TMPWriter also supports event tags. TMPWriter exposes multiple UnityEvents, to which you may subscribe in the inspector or through code. One of these events is TextEvent. Whenever the writer reaches the index of an event tag, TextEvent is raised with the parsed tag as parameter. Unlike command tags or animation tags, you may use any name for event tags, as well as any parameters. Typically, you would use the tag name in the event callbacks to check whether to process the event / tag. Here are a few example tags: <?myevent>, <?characterspeaking=\"Faust\">, <?alert message=\"*Your message*\" priority=\"warning\"> Animating text appearances The examples above look pretty boring; you can change the way the text is shown, as well as hidden, by using a TMPAnimator component along with TMPWriter. The example below shows you a few variations. Your browser does not support the video tag. For info about how to set up the TMPAnimator, see the sections on TMPAnimator."
  },
  "manual/tmpwriter_scenecommands.html": {
    "href": "manual/tmpwriter_scenecommands.html",
    "title": "Scene commands | TMPEffects documentation",
    "keywords": "Scene commands In addition to TMPCommand, which the commands we've seen so far derive from and which are stored on disk, there is also the SceneCommand type. It allows you to call any method of your scene objects. .my-grid { display: grid; grid-template-columns: repeat(2, 1fr); grid-column-gap:3em; } Adding scene commands When you add a new element to the SceneCommands dictionary found in TMPWriter's Commands foldout, you will see an empty field Name on the left side. Here you can assign a name to reference the command with. On the right, in UnityEvent field, you can simply drag any GameObject and choose the method to call when this command is invoked. The example creates a SceneCommand called \"waituntil\", which calls a method \"WaitUntil(TMPCommandArgs args)\". Using scene commands SceneCommands are applied in the exact same way as their respective counterpart: SceneCommand tags can be directly inserted into the text, with a '!' prefix."
  }
}