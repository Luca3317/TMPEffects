{
  "api/TMPEffects.CharacterData.CharData.Info.html": {
    "href": "api/TMPEffects.CharacterData.CharData.Info.html",
    "title": "Struct CharData.Info | TMPEffects documentation",
    "keywords": "Struct CharData.Info Holds a selection of data of TMP_CharacterInfo, as well as some data about the initial mesh of the character. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: TMPEffects.CharacterData Assembly: .dll Syntax public struct CharData.Info Constructors | Edit this page View Source Info(int, TMP_CharacterInfo, int, TMP_WordInfo) Declaration public Info(int index, TMP_CharacterInfo cInfo, int wordIndex, TMP_WordInfo wInfo) Parameters Type Name Description int index TMP_CharacterInfo cInfo int wordIndex TMP_WordInfo wInfo Fields | Edit this page View Source ascender The ascender of the character. Declaration public readonly float ascender Field Value Type Description float | Edit this page View Source baseLine The baseline of the character. Declaration public readonly float baseLine Field Value Type Description float | Edit this page View Source character The actual character. Declaration public readonly char character Field Value Type Description char | Edit this page View Source color The color of this character. Declaration public readonly Color32 color Field Value Type Description Color32 | Edit this page View Source descender The descender of the character. Declaration public readonly float descender Field Value Type Description float | Edit this page View Source elementType Declaration public readonly TMP_TextElementType elementType Field Value Type Description TMP_TextElementType | Edit this page View Source fontAsset The font asset used for this character. Declaration public readonly TMP_FontAsset fontAsset Field Value Type Description TMP_FontAsset | Edit this page View Source index The index of the character within the source text. Declaration public readonly int index Field Value Type Description int | Edit this page View Source isVisible Whether the character is inherently visible; i.e. is no whitespace. Declaration public readonly bool isVisible Field Value Type Description bool | Edit this page View Source lineNumber The line number of the line this character belongs to. Declaration public readonly int lineNumber Field Value Type Description int | Edit this page View Source origin Declaration public readonly float origin Field Value Type Description float | Edit this page View Source pageNumber The page number of the page this character belongs to. Declaration public readonly int pageNumber Field Value Type Description int | Edit this page View Source pointSize The point size. Declaration public readonly float pointSize Field Value Type Description float | Edit this page View Source referenceScale The reference scale of this character. Declaration public readonly float referenceScale Field Value Type Description float | Edit this page View Source spriteAsset The sprite asset used for this sprite. Declaration public readonly TMP_SpriteAsset spriteAsset Field Value Type Description TMP_SpriteAsset | Edit this page View Source wordFirstIndex The first index of the word this character belongs to. Declaration public readonly int wordFirstIndex Field Value Type Description int | Edit this page View Source wordLastIndex The last index of the word this character belongs to. Declaration public readonly int wordLastIndex Field Value Type Description int | Edit this page View Source wordLen The length of the word this character belongs to. Declaration public readonly int wordLen Field Value Type Description int | Edit this page View Source wordNumber The inde Declaration public readonly int wordNumber Field Value Type Description int | Edit this page View Source xAdvance The xAdvance factor of the character. Declaration public readonly float xAdvance Field Value Type Description float"
  },
  "api/TMPEffects.CharacterData.CharData.html": {
    "href": "api/TMPEffects.CharacterData.CharData.html",
    "title": "Class CharData | TMPEffects documentation",
    "keywords": "Class CharData Holds information about a character. In addition to holding a selection of data supplied by the respective TMP_CharacterInfo, accessible through the info field, also holds TMPEffects specific data and methods to manipulate said data. Inheritance object CharData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.CharacterData Assembly: .dll Syntax public class CharData Constructors | Edit this page View Source CharData(int, TMP_CharacterInfo, int) Declaration public CharData(int index, TMP_CharacterInfo cInfo, int wordIndex) Parameters Type Name Description int index TMP_CharacterInfo cInfo int wordIndex | Edit this page View Source CharData(int, TMP_CharacterInfo, int, TMP_WordInfo?) Declaration public CharData(int index, TMP_CharacterInfo cInfo, int wordIndex, TMP_WordInfo? wInfo = null) Parameters Type Name Description int index TMP_CharacterInfo cInfo int wordIndex TMP_WordInfo? wInfo Fields | Edit this page View Source InitialPosition The initial position of this character. Declaration public readonly Vector3 InitialPosition Field Value Type Description Vector3 | Edit this page View Source InitialRotation The initial rotation of this character. Declaration public readonly Quaternion InitialRotation Field Value Type Description Quaternion | Edit this page View Source InitialScale The initial scale of this character. Declaration public readonly Vector3 InitialScale Field Value Type Description Vector3 | Edit this page View Source defaultRotation The default rotation of any CharData. Declaration public static readonly Quaternion defaultRotation Field Value Type Description Quaternion | Edit this page View Source defaultScale The default scale of any CharData. Declaration public static readonly Vector3 defaultScale Field Value Type Description Vector3 | Edit this page View Source info Holds a selection of TMP_CharacterInfo data. Declaration public readonly CharData.Info info Field Value Type Description CharData.Info | Edit this page View Source mesh The mesh of the character. Declaration public readonly VertexData mesh Field Value Type Description VertexData Properties | Edit this page View Source Position The character's position. Declaration public Vector3 Position { get; } Property Value Type Description Vector3 | Edit this page View Source Rotation The character's rotation. Declaration public Quaternion Rotation { get; } Property Value Type Description Quaternion | Edit this page View Source RotationPivot The character's rotation pivot. Declaration public Vector3 RotationPivot { get; } Property Value Type Description Vector3 | Edit this page View Source Scale The character's scale. Declaration public Vector3 Scale { get; } Property Value Type Description Vector3 | Edit this page View Source alphasDirty Whether the vertex alphas have been manipulated. Declaration public bool alphasDirty { get; } Property Value Type Description bool | Edit this page View Source colorsDirty Whether the vertex colors have been manipulated. Declaration public bool colorsDirty { get; } Property Value Type Description bool | Edit this page View Source initialMesh The initial mesh of this character. Declaration public ReadOnlyVertexData initialMesh { get; } Property Value Type Description ReadOnlyVertexData | Edit this page View Source positionDirty Whether the position has been manipulated from the character's initial position. Declaration public bool positionDirty { get; } Property Value Type Description bool | Edit this page View Source rotationDirty Whether the rotation has been manipulated from the character's initial rotation. Declaration public bool rotationDirty { get; } Property Value Type Description bool | Edit this page View Source scaleDirty Whether the scale has been manipulated from the character's initial scale. Declaration public bool scaleDirty { get; } Property Value Type Description bool | Edit this page View Source uvsDirty Whether the UVs have been manipulated. Declaration public bool uvsDirty { get; } Property Value Type Description bool | Edit this page View Source verticesDirty Whether the vertices have been manipulated. Declaration public bool verticesDirty { get; } Property Value Type Description bool Methods | Edit this page View Source AddPivotDelta(Vector3) Add a delta to the pivot of the character. Note that the pivot is independent of the character's position, rotation and scale. Declaration public void AddPivotDelta(Vector3 delta) Parameters Type Name Description Vector3 delta The delta to add to the position of the pivot. | Edit this page View Source AddPositionDelta(Vector3) Add a delta to the position of the character. Declaration public void AddPositionDelta(Vector3 delta) Parameters Type Name Description Vector3 delta The delta to add to the position of the character. | Edit this page View Source AddVertexDelta(int, Vector3) Add a positon delta to the vertex at the given index. Declaration public void AddVertexDelta(int index, Vector3 delta) Parameters Type Name Description int index The index of the vertex. Vector3 delta The delta to add to the position of the vertex. | Edit this page View Source Reset() Reset changes made to the character's mesh, position, rotation, scale and pivot. Declaration public void Reset() | Edit this page View Source ResetColors() Reset the character's vertex colors. Declaration public void ResetColors() | Edit this page View Source ResetPivot() Reset the character's pivot. Declaration public void ResetPivot() | Edit this page View Source ResetPosition() Reset the character's position. Declaration public void ResetPosition() | Edit this page View Source ResetRotation() Reset the character's rotation. Declaration public void ResetRotation() | Edit this page View Source ResetScale() Reset the character's scale. Declaration public void ResetScale() | Edit this page View Source ResetUVs() Reset the character's UVs. Declaration public void ResetUVs() | Edit this page View Source ResetVertices() Reset the character's vertices. Declaration public void ResetVertices() | Edit this page View Source SetPivot(Vector3) Set the pivot of this character. Note that the pivot is independent of the character's position, scale and rotation. Declaration public void SetPivot(Vector3 pivot) Parameters Type Name Description Vector3 pivot The new position of the pivot. | Edit this page View Source SetPosition(Vector3) Set the position of the character. Declaration public void SetPosition(Vector3 position) Parameters Type Name Description Vector3 position The new position of the character. | Edit this page View Source SetRotation(Quaternion) Set the rotation of this character. Declaration public void SetRotation(Quaternion rotation) Parameters Type Name Description Quaternion rotation The new rotation of this character. | Edit this page View Source SetScale(Vector3) Set the scale of this character. Declaration public void SetScale(Vector3 scale) Parameters Type Name Description Vector3 scale The new scale of this character. | Edit this page View Source SetVertex(int, Vector3) Set the position of the vertex at the given index. Declaration public void SetVertex(int index, Vector3 position) Parameters Type Name Description int index The index of the vertex. Vector3 position The new position of the vertex."
  },
  "api/TMPEffects.CharacterData.CharDataState.html": {
    "href": "api/TMPEffects.CharacterData.CharDataState.html",
    "title": "Class CharDataState | TMPEffects documentation",
    "keywords": "Class CharDataState Utility class that stores a CharData and modifications to it, allowing you to make multiple modifications iteratively and to apply at once. Used in TMPAnimator to apply animations. Inheritance object CharDataState Implements ICharDataState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.CharacterData Assembly: .dll Syntax public class CharDataState : ICharDataState Fields | Edit this page View Source cData Declaration public CharData cData Field Value Type Description CharData | Edit this page View Source context Declaration public AnimatorContext context Field Value Type Description AnimatorContext Properties | Edit this page View Source BL The position of the bottomleft vertex. Declaration public Vector3 BL { get; set; } Property Value Type Description Vector3 | Edit this page View Source BLMax The maximum position modification of the bottomleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Declaration public Vector3 BLMax { get; set; } Property Value Type Description Vector3 | Edit this page View Source BLMin The minimum position modification of the bottomleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Declaration public Vector3 BLMin { get; set; } Property Value Type Description Vector3 | Edit this page View Source BL_Color The color value of the bottomleft vertex. Declaration public Color32 BL_Color { get; } Property Value Type Description Color32 | Edit this page View Source BL_Result Contains the calculated position of the bottomleft vertex after calling CalculateVertexPositions(). Declaration public Vector3 BL_Result { get; set; } Property Value Type Description Vector3 | Edit this page View Source BL_UV The UV value of the bottomleft vertex. Declaration public Vector2 BL_UV { get; set; } Property Value Type Description Vector2 | Edit this page View Source BL_UV2 The UV2 value of the bottomleft vertex. Declaration public Vector2 BL_UV2 { get; set; } Property Value Type Description Vector2 | Edit this page View Source BR The position of the bottomright vertex. Declaration public Vector3 BR { get; set; } Property Value Type Description Vector3 | Edit this page View Source BRMax The maximum position modification of the bottomright vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Declaration public Vector3 BRMax { get; set; } Property Value Type Description Vector3 | Edit this page View Source BRMin The minimum position modification of the bottomleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Declaration public Vector3 BRMin { get; set; } Property Value Type Description Vector3 | Edit this page View Source BR_Color The color value of the bottomright vertex. Declaration public Color32 BR_Color { get; } Property Value Type Description Color32 | Edit this page View Source BR_Result Contains the calculated position of the bottomright vertex after calling CalculateVertexPositions(). Declaration public Vector3 BR_Result { get; set; } Property Value Type Description Vector3 | Edit this page View Source BR_UV The UV value of the bottomright vertex. Declaration public Vector2 BR_UV { get; set; } Property Value Type Description Vector2 | Edit this page View Source BR_UV2 The UV2 value of the bottomright vertex. Declaration public Vector2 BR_UV2 { get; set; } Property Value Type Description Vector2 | Edit this page View Source Rotations All rotations and the pivot they will be applied around. Declaration public IEnumerable<(Quaternion, Vector3)> Rotations { get; } Property Value Type Description IEnumerable<(Quaternion, Vector3)> | Edit this page View Source TL The position of the topleft vertex. Declaration public Vector3 TL { get; set; } Property Value Type Description Vector3 | Edit this page View Source TLMax The maximum position modification of the topleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Declaration public Vector3 TLMax { get; set; } Property Value Type Description Vector3 | Edit this page View Source TLMin The minimum position modification of the topleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Declaration public Vector3 TLMin { get; set; } Property Value Type Description Vector3 | Edit this page View Source TL_Color The color value of the topleft vertex. Declaration public Color32 TL_Color { get; } Property Value Type Description Color32 | Edit this page View Source TL_Result Contains the calculated position of the topleft vertex after calling CalculateVertexPositions(). Declaration public Vector3 TL_Result { get; set; } Property Value Type Description Vector3 | Edit this page View Source TL_UV The UV value of the topleft vertex. Declaration public Vector2 TL_UV { get; set; } Property Value Type Description Vector2 | Edit this page View Source TL_UV2 The UV2 value of the topleft vertex. Declaration public Vector2 TL_UV2 { get; set; } Property Value Type Description Vector2 | Edit this page View Source TR The position of the topright vertex. Declaration public Vector3 TR { get; set; } Property Value Type Description Vector3 | Edit this page View Source TRMax The maximum position modification of the topright vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Declaration public Vector3 TRMax { get; set; } Property Value Type Description Vector3 | Edit this page View Source TRMin The minimum position modification of the topright vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Declaration public Vector3 TRMin { get; set; } Property Value Type Description Vector3 | Edit this page View Source TR_Color The color value of the topright vertex. Declaration public Color32 TR_Color { get; } Property Value Type Description Color32 | Edit this page View Source TR_Result Contains the calculated position of the topright vertex after calling CalculateVertexPositions(). Declaration public Vector3 TR_Result { get; set; } Property Value Type Description Vector3 | Edit this page View Source TR_UV The UV value of the topright vertex. Declaration public Vector2 TR_UV { get; set; } Property Value Type Description Vector2 | Edit this page View Source TR_UV2 The UV2 value of the topright vertex. Declaration public Vector2 TR_UV2 { get; set; } Property Value Type Description Vector2 | Edit this page View Source positionDelta The accumulated position delta of all modifications. Declaration public Vector3 positionDelta { get; set; } Property Value Type Description Vector3 | Edit this page View Source scaleDelta The accumulated scale delta of all modifications. Declaration public Matrix4x4 scaleDelta { get; set; } Property Value Type Description Matrix4x4 Methods | Edit this page View Source CalculateVertexPositions() Calculate the vertex positions, applying all rotations, transformations and scale operations. Will set BL_Result, TL_Result, TR_Result and BR_Result. Declaration public void CalculateVertexPositions() | Edit this page View Source Reset(AnimatorContext, CharData) Declaration public void Reset(AnimatorContext context, CharData cData) Parameters Type Name Description AnimatorContext context CharData cData | Edit this page View Source UpdateVertexOffsets() Declaration public void UpdateVertexOffsets() Implements ICharDataState"
  },
  "api/TMPEffects.CharacterData.ICharDataState.html": {
    "href": "api/TMPEffects.CharacterData.ICharDataState.html",
    "title": "Interface ICharDataState | TMPEffects documentation",
    "keywords": "Interface ICharDataState Exposes vertex state of a CharData to allow iterative modifications. Used in CharDataState and ReadOnlyCharDataState. Namespace: TMPEffects.CharacterData Assembly: .dll Syntax public interface ICharDataState Properties | Edit this page View Source BL The position of the bottomleft vertex. Declaration Vector3 BL { get; } Property Value Type Description Vector3 | Edit this page View Source BLMax The maximum position modification of the bottomleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Declaration Vector3 BLMax { get; } Property Value Type Description Vector3 | Edit this page View Source BLMin The minimum position modification of the bottomleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Declaration Vector3 BLMin { get; } Property Value Type Description Vector3 | Edit this page View Source BL_Color The color value of the bottomleft vertex. Declaration Color32 BL_Color { get; } Property Value Type Description Color32 | Edit this page View Source BL_Result Contains the calculated position of the bottomleft vertex after calling CalculateVertexPositions(). Declaration Vector3 BL_Result { get; } Property Value Type Description Vector3 | Edit this page View Source BL_UV The UV value of the bottomleft vertex. Declaration Vector2 BL_UV { get; } Property Value Type Description Vector2 | Edit this page View Source BL_UV2 The UV2 value of the bottomleft vertex. Declaration Vector2 BL_UV2 { get; } Property Value Type Description Vector2 | Edit this page View Source BR The position of the bottomright vertex. Declaration Vector3 BR { get; } Property Value Type Description Vector3 | Edit this page View Source BRMax The maximum position modification of the bottomright vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Declaration Vector3 BRMax { get; } Property Value Type Description Vector3 | Edit this page View Source BRMin The minimum position modification of the bottomleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Declaration Vector3 BRMin { get; } Property Value Type Description Vector3 | Edit this page View Source BR_Color The color value of the bottomright vertex. Declaration Color32 BR_Color { get; } Property Value Type Description Color32 | Edit this page View Source BR_Result Contains the calculated position of the bottomright vertex after calling CalculateVertexPositions(). Declaration Vector3 BR_Result { get; } Property Value Type Description Vector3 | Edit this page View Source BR_UV The UV value of the bottomright vertex. Declaration Vector2 BR_UV { get; } Property Value Type Description Vector2 | Edit this page View Source BR_UV2 The UV2 value of the bottomright vertex. Declaration Vector2 BR_UV2 { get; } Property Value Type Description Vector2 | Edit this page View Source Rotations All rotations and the pivot they will be applied around. Declaration IEnumerable<(Quaternion, Vector3)> Rotations { get; } Property Value Type Description IEnumerable<(Quaternion, Vector3)> | Edit this page View Source TL The position of the topleft vertex. Declaration Vector3 TL { get; } Property Value Type Description Vector3 | Edit this page View Source TLMax The maximum position modification of the topleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Declaration Vector3 TLMax { get; } Property Value Type Description Vector3 | Edit this page View Source TLMin The minimum position modification of the topleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Declaration Vector3 TLMin { get; } Property Value Type Description Vector3 | Edit this page View Source TL_Color The color value of the topleft vertex. Declaration Color32 TL_Color { get; } Property Value Type Description Color32 | Edit this page View Source TL_Result Contains the calculated position of the topleft vertex after calling CalculateVertexPositions(). Declaration Vector3 TL_Result { get; } Property Value Type Description Vector3 | Edit this page View Source TL_UV The UV value of the topleft vertex. Declaration Vector2 TL_UV { get; } Property Value Type Description Vector2 | Edit this page View Source TL_UV2 The UV2 value of the topleft vertex. Declaration Vector2 TL_UV2 { get; } Property Value Type Description Vector2 | Edit this page View Source TR The position of the topright vertex. Declaration Vector3 TR { get; } Property Value Type Description Vector3 | Edit this page View Source TRMax The maximum position modification of the topright vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Declaration Vector3 TRMax { get; } Property Value Type Description Vector3 | Edit this page View Source TRMin The minimum position modification of the topright vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Declaration Vector3 TRMin { get; } Property Value Type Description Vector3 | Edit this page View Source TR_Color The color value of the topright vertex. Declaration Color32 TR_Color { get; } Property Value Type Description Color32 | Edit this page View Source TR_Result Contains the calculated position of the topright vertex after calling CalculateVertexPositions(). Declaration Vector3 TR_Result { get; } Property Value Type Description Vector3 | Edit this page View Source TR_UV The UV value of the topright vertex. Declaration Vector2 TR_UV { get; } Property Value Type Description Vector2 | Edit this page View Source TR_UV2 The UV2 value of the topright vertex. Declaration Vector2 TR_UV2 { get; } Property Value Type Description Vector2 | Edit this page View Source positionDelta The accumulated position delta of all modifications. Declaration Vector3 positionDelta { get; } Property Value Type Description Vector3 | Edit this page View Source scaleDelta The accumulated scale delta of all modifications. Declaration Matrix4x4 scaleDelta { get; } Property Value Type Description Matrix4x4 Methods | Edit this page View Source CalculateVertexPositions() Calculate the vertex positions, applying all rotations, transformations and scale operations. Will set BL_Result, TL_Result, TR_Result and BR_Result. Declaration void CalculateVertexPositions()"
  },
  "api/TMPEffects.CharacterData.ReadOnlyCharDataState.html": {
    "href": "api/TMPEffects.CharacterData.ReadOnlyCharDataState.html",
    "title": "Class ReadOnlyCharDataState | TMPEffects documentation",
    "keywords": "Class ReadOnlyCharDataState Readonly version of CharDataState. Used to expose the current state of the CharData in IAnimationContext, allowing you to take it into account in your animations (ideally with late animations, see the docs). Inheritance object ReadOnlyCharDataState Implements ICharDataState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.CharacterData Assembly: .dll Syntax public class ReadOnlyCharDataState : ICharDataState Constructors | Edit this page View Source ReadOnlyCharDataState(CharDataState) Declaration public ReadOnlyCharDataState(CharDataState state) Parameters Type Name Description CharDataState state Properties | Edit this page View Source BL The position of the bottomleft vertex. Declaration public Vector3 BL { get; } Property Value Type Description Vector3 | Edit this page View Source BLMax The maximum position modification of the bottomleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Declaration public Vector3 BLMax { get; } Property Value Type Description Vector3 | Edit this page View Source BLMin The minimum position modification of the bottomleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Declaration public Vector3 BLMin { get; } Property Value Type Description Vector3 | Edit this page View Source BL_Color The color value of the bottomleft vertex. Declaration public Color32 BL_Color { get; } Property Value Type Description Color32 | Edit this page View Source BL_Result Contains the calculated position of the bottomleft vertex after calling CalculateVertexPositions(). Declaration public Vector3 BL_Result { get; } Property Value Type Description Vector3 | Edit this page View Source BL_UV The UV value of the bottomleft vertex. Declaration public Vector2 BL_UV { get; } Property Value Type Description Vector2 | Edit this page View Source BL_UV2 The UV2 value of the bottomleft vertex. Declaration public Vector2 BL_UV2 { get; } Property Value Type Description Vector2 | Edit this page View Source BR The position of the bottomright vertex. Declaration public Vector3 BR { get; } Property Value Type Description Vector3 | Edit this page View Source BRMax The maximum position modification of the bottomright vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Declaration public Vector3 BRMax { get; } Property Value Type Description Vector3 | Edit this page View Source BRMin The minimum position modification of the bottomleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Declaration public Vector3 BRMin { get; } Property Value Type Description Vector3 | Edit this page View Source BR_Color The color value of the bottomright vertex. Declaration public Color32 BR_Color { get; } Property Value Type Description Color32 | Edit this page View Source BR_Result Contains the calculated position of the bottomright vertex after calling CalculateVertexPositions(). Declaration public Vector3 BR_Result { get; } Property Value Type Description Vector3 | Edit this page View Source BR_UV The UV value of the bottomright vertex. Declaration public Vector2 BR_UV { get; } Property Value Type Description Vector2 | Edit this page View Source BR_UV2 The UV2 value of the bottomright vertex. Declaration public Vector2 BR_UV2 { get; } Property Value Type Description Vector2 | Edit this page View Source Rotations All rotations and the pivot they will be applied around. Declaration public IEnumerable<(Quaternion, Vector3)> Rotations { get; } Property Value Type Description IEnumerable<(Quaternion, Vector3)> | Edit this page View Source TL The position of the topleft vertex. Declaration public Vector3 TL { get; } Property Value Type Description Vector3 | Edit this page View Source TLMax The maximum position modification of the topleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Declaration public Vector3 TLMax { get; } Property Value Type Description Vector3 | Edit this page View Source TLMin The minimum position modification of the topleft vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Declaration public Vector3 TLMin { get; } Property Value Type Description Vector3 | Edit this page View Source TL_Color The color value of the topleft vertex. Declaration public Color32 TL_Color { get; } Property Value Type Description Color32 | Edit this page View Source TL_Result Contains the calculated position of the topleft vertex after calling CalculateVertexPositions(). Declaration public Vector3 TL_Result { get; } Property Value Type Description Vector3 | Edit this page View Source TL_UV The UV value of the topleft vertex. Declaration public Vector2 TL_UV { get; } Property Value Type Description Vector2 | Edit this page View Source TL_UV2 The UV2 value of the topleft vertex. Declaration public Vector2 TL_UV2 { get; } Property Value Type Description Vector2 | Edit this page View Source TR The position of the topright vertex. Declaration public Vector3 TR { get; } Property Value Type Description Vector3 | Edit this page View Source TRMax The maximum position modification of the topright vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Declaration public Vector3 TRMax { get; } Property Value Type Description Vector3 | Edit this page View Source TRMin The minimum position modification of the topright vertex. This is used in calculating the scaling of all vertex position modifications in CalculateVertexPositions(); you can most likely ignore this. Declaration public Vector3 TRMin { get; } Property Value Type Description Vector3 | Edit this page View Source TR_Color The color value of the topright vertex. Declaration public Color32 TR_Color { get; } Property Value Type Description Color32 | Edit this page View Source TR_Result Contains the calculated position of the topright vertex after calling CalculateVertexPositions(). Declaration public Vector3 TR_Result { get; } Property Value Type Description Vector3 | Edit this page View Source TR_UV The UV value of the topright vertex. Declaration public Vector2 TR_UV { get; } Property Value Type Description Vector2 | Edit this page View Source TR_UV2 The UV2 value of the topright vertex. Declaration public Vector2 TR_UV2 { get; } Property Value Type Description Vector2 | Edit this page View Source positionDelta The accumulated position delta of all modifications. Declaration public Vector3 positionDelta { get; } Property Value Type Description Vector3 | Edit this page View Source scaleDelta The accumulated scale delta of all modifications. Declaration public Matrix4x4 scaleDelta { get; } Property Value Type Description Matrix4x4 Methods | Edit this page View Source CalculateVertexPositions() Calculate the vertex positions, applying all rotations, transformations and scale operations. Will set BL_Result, TL_Result, TR_Result and BR_Result. Declaration public void CalculateVertexPositions() Implements ICharDataState"
  },
  "api/TMPEffects.CharacterData.ReadOnlyVertexData.html": {
    "href": "api/TMPEffects.CharacterData.ReadOnlyVertexData.html",
    "title": "Class ReadOnlyVertexData | TMPEffects documentation",
    "keywords": "Class ReadOnlyVertexData Holds data about a character's mesh. Inheritance object ReadOnlyVertexData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.CharacterData Assembly: .dll Syntax public class ReadOnlyVertexData Constructors | Edit this page View Source ReadOnlyVertexData(TMP_CharacterInfo) Declaration public ReadOnlyVertexData(TMP_CharacterInfo info) Parameters Type Name Description TMP_CharacterInfo info | Edit this page View Source ReadOnlyVertexData(TMP_Vertex, TMP_Vertex, TMP_Vertex, TMP_Vertex) Declaration public ReadOnlyVertexData(TMP_Vertex bl, TMP_Vertex tl, TMP_Vertex tr, TMP_Vertex br) Parameters Type Name Description TMP_Vertex bl TMP_Vertex tl TMP_Vertex tr TMP_Vertex br Fields | Edit this page View Source initial The initial vertex of the character. Declaration public readonly ReadOnlyVertexData initial Field Value Type Description ReadOnlyVertexData Properties | Edit this page View Source BL_Alpha Get or set the alpha of the bottom left vertex. Declaration public byte BL_Alpha { get; } Property Value Type Description byte | Edit this page View Source BL_Color Get or set the color of the bottom left vertex. Note that this will mark both colors and alphas as dirty. Use SetColor(int, Color32, bool) if you want to only set color. Declaration public Color32 BL_Color { get; } Property Value Type Description Color32 | Edit this page View Source BL_Position Get or set the position of the bottom left vertex. Declaration public Vector3 BL_Position { get; } Property Value Type Description Vector3 | Edit this page View Source BL_UV0 Get or set the UV0 of the bottom left vertex. Declaration public Vector3 BL_UV0 { get; } Property Value Type Description Vector3 | Edit this page View Source BL_UV2 Get or set the UV2 of the bottom left vertex. Declaration public Vector3 BL_UV2 { get; } Property Value Type Description Vector3 | Edit this page View Source BR_Alpha Get or set the alpha of the bottom right vertex. Declaration public byte BR_Alpha { get; } Property Value Type Description byte | Edit this page View Source BR_Color Get or set the color of the bottom right vertex. Note that this will mark both colors and alphas as dirty. Use SetColor(int, Color32, bool) if you want to only set color. Declaration public Color32 BR_Color { get; } Property Value Type Description Color32 | Edit this page View Source BR_Position Get or set the position of the bottom right vertex. Declaration public Vector3 BR_Position { get; } Property Value Type Description Vector3 | Edit this page View Source BR_UV0 Get or set the UV0 of the bottom right vertex. Declaration public Vector3 BR_UV0 { get; } Property Value Type Description Vector3 | Edit this page View Source BR_UV2 Get or set the UV2 of the bottom right vertex. Declaration public Vector3 BR_UV2 { get; } Property Value Type Description Vector3 | Edit this page View Source TL_Alpha Get or set the alpha of the top left vertex. Declaration public byte TL_Alpha { get; } Property Value Type Description byte | Edit this page View Source TL_Color Get or set the color of the top left vertex. Note that this will mark both colors and alphas as dirty. Use SetColor(int, Color32, bool) if you want to only set color. Declaration public Color32 TL_Color { get; } Property Value Type Description Color32 | Edit this page View Source TL_Position Get or set the position of the top left vertex. Declaration public Vector3 TL_Position { get; } Property Value Type Description Vector3 | Edit this page View Source TL_UV0 Get or set the UV0 of the bottom right vertex. Declaration public Vector3 TL_UV0 { get; } Property Value Type Description Vector3 | Edit this page View Source TL_UV2 Get or set the UV2 of the bottom right vertex. Declaration public Vector3 TL_UV2 { get; } Property Value Type Description Vector3 | Edit this page View Source TR_Alpha Get or set the alpha of the top right vertex. Declaration public byte TR_Alpha { get; } Property Value Type Description byte | Edit this page View Source TR_Color Get or set the color of the top right vertex. Note that this will mark both colors and alphas as dirty. Use SetColor(int, Color32, bool) if you want to only set color. Declaration public Color32 TR_Color { get; } Property Value Type Description Color32 | Edit this page View Source TR_Position Get or set the position of the top right vertex. Declaration public Vector3 TR_Position { get; } Property Value Type Description Vector3 | Edit this page View Source TR_UV0 Get or set the UV0 of the top right vertex. Declaration public Vector3 TR_UV0 { get; } Property Value Type Description Vector3 | Edit this page View Source TR_UV2 Get or set the UV2 of the top right vertex. Declaration public Vector3 TR_UV2 { get; } Property Value Type Description Vector3 Methods | Edit this page View Source GetAlpha(int) Get the alpha of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right Declaration public byte GetAlpha(int i) Parameters Type Name Description int i The index. Returns Type Description byte The alpha of the vertex associated with the index. Exceptions Type Condition ArgumentOutOfRangeException | Edit this page View Source GetColor(int) Get the color of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right Declaration public Color32 GetColor(int i) Parameters Type Name Description int i The index. Returns Type Description Color32 The color of the vertex associated with the index. Exceptions Type Condition ArgumentOutOfRangeException | Edit this page View Source GetPosition(int) Get the position of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right Declaration public Vector3 GetPosition(int i) Parameters Type Name Description int i The index. Returns Type Description Vector3 The position of the vertex associated with the index. Exceptions Type Condition ArgumentOutOfRangeException | Edit this page View Source GetUV0(int) Get the UV0 of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right Declaration public Vector2 GetUV0(int i) Parameters Type Name Description int i The index. Returns Type Description Vector2 The UV0 of the vertex associated with the index. Exceptions Type Condition ArgumentOutOfRangeException | Edit this page View Source GetUV2(int) Get the UV2 of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right Declaration public Vector2 GetUV2(int i) Parameters Type Name Description int i The index. Returns Type Description Vector2 The UV2 of the vertex associated with the index. Exceptions Type Condition ArgumentOutOfRangeException"
  },
  "api/TMPEffects.CharacterData.VertexData.html": {
    "href": "api/TMPEffects.CharacterData.VertexData.html",
    "title": "Class VertexData | TMPEffects documentation",
    "keywords": "Class VertexData Holds data about a character's mesh. Inheritance object VertexData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.CharacterData Assembly: .dll Syntax public class VertexData Constructors | Edit this page View Source VertexData(TMP_CharacterInfo) Declaration public VertexData(TMP_CharacterInfo info) Parameters Type Name Description TMP_CharacterInfo info | Edit this page View Source VertexData(TMP_Vertex, TMP_Vertex, TMP_Vertex, TMP_Vertex) Declaration public VertexData(TMP_Vertex bl, TMP_Vertex tl, TMP_Vertex tr, TMP_Vertex br) Parameters Type Name Description TMP_Vertex bl TMP_Vertex tl TMP_Vertex tr TMP_Vertex br Fields | Edit this page View Source initial The initial vertex of the character. Declaration public readonly ReadOnlyVertexData initial Field Value Type Description ReadOnlyVertexData Properties | Edit this page View Source BL_Alpha Get or set the alpha of the bottom left vertex. Declaration public byte BL_Alpha { get; set; } Property Value Type Description byte | Edit this page View Source BL_Color Get or set the color of the bottom left vertex. Note that this will mark both colors and alphas as dirty. Use SetColor(int, Color32, bool) if you want to only set color. Declaration public Color32 BL_Color { get; set; } Property Value Type Description Color32 | Edit this page View Source BL_Position Get or set the position of the bottom left vertex. Declaration public Vector3 BL_Position { get; set; } Property Value Type Description Vector3 | Edit this page View Source BL_UV0 Get or set the UV0 of the bottom left vertex. Declaration public Vector3 BL_UV0 { get; set; } Property Value Type Description Vector3 | Edit this page View Source BL_UV2 Get or set the UV2 of the bottom left vertex. Declaration public Vector3 BL_UV2 { get; set; } Property Value Type Description Vector3 | Edit this page View Source BR_Alpha Get or set the alpha of the bottom right vertex. Declaration public byte BR_Alpha { get; set; } Property Value Type Description byte | Edit this page View Source BR_Color Get or set the color of the bottom right vertex. Note that this will mark both colors and alphas as dirty. Use SetColor(int, Color32, bool) if you want to only set color. Declaration public Color32 BR_Color { get; set; } Property Value Type Description Color32 | Edit this page View Source BR_Position Get or set the position of the bottom right vertex. Declaration public Vector3 BR_Position { get; set; } Property Value Type Description Vector3 | Edit this page View Source BR_UV0 Get or set the UV0 of the bottom right vertex. Declaration public Vector3 BR_UV0 { get; set; } Property Value Type Description Vector3 | Edit this page View Source BR_UV2 Get or set the UV2 of the bottom right vertex. Declaration public Vector3 BR_UV2 { get; set; } Property Value Type Description Vector3 | Edit this page View Source TL_Alpha Get or set the alpha of the top left vertex. Declaration public byte TL_Alpha { get; set; } Property Value Type Description byte | Edit this page View Source TL_Color Get or set the color of the top left vertex. Note that this will mark both colors and alphas as dirty. Use SetColor(int, Color32, bool) if you want to only set color. Declaration public Color32 TL_Color { get; set; } Property Value Type Description Color32 | Edit this page View Source TL_Position Get or set the position of the top left vertex. Declaration public Vector3 TL_Position { get; set; } Property Value Type Description Vector3 | Edit this page View Source TL_UV0 Get or set the UV0 of the bottom right vertex. Declaration public Vector3 TL_UV0 { get; set; } Property Value Type Description Vector3 | Edit this page View Source TL_UV2 Get or set the UV2 of the bottom right vertex. Declaration public Vector3 TL_UV2 { get; set; } Property Value Type Description Vector3 | Edit this page View Source TR_Alpha Get or set the alpha of the top right vertex. Declaration public byte TR_Alpha { get; set; } Property Value Type Description byte | Edit this page View Source TR_Color Get or set the color of the top right vertex. Note that this will mark both colors and alphas as dirty. Use SetColor(int, Color32, bool) if you want to only set color. Declaration public Color32 TR_Color { get; set; } Property Value Type Description Color32 | Edit this page View Source TR_Position Get or set the position of the top right vertex. Declaration public Vector3 TR_Position { get; set; } Property Value Type Description Vector3 | Edit this page View Source TR_UV0 Get or set the UV0 of the top right vertex. Declaration public Vector3 TR_UV0 { get; set; } Property Value Type Description Vector3 | Edit this page View Source TR_UV2 Get or set the UV2 of the top right vertex. Declaration public Vector3 TR_UV2 { get; set; } Property Value Type Description Vector3 | Edit this page View Source alphasDirty Whether the vertex alphas have been manipulated. Declaration public bool alphasDirty { get; } Property Value Type Description bool | Edit this page View Source colorsDirty Whether the vertex colors have been manipulated. Declaration public bool colorsDirty { get; } Property Value Type Description bool | Edit this page View Source positionsDirty Whether the positions have been manipulated. Declaration public bool positionsDirty { get; } Property Value Type Description bool | Edit this page View Source uvsDirty Whether the UVs have been manipulated. Declaration public bool uvsDirty { get; } Property Value Type Description bool Methods | Edit this page View Source GetAlpha(int) Get the alpha of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right Declaration public byte GetAlpha(int i) Parameters Type Name Description int i The index. Returns Type Description byte The alpha of the vertex associated with the index. Exceptions Type Condition ArgumentOutOfRangeException | Edit this page View Source GetColor(int) Get the color of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right Declaration public Color32 GetColor(int i) Parameters Type Name Description int i The index. Returns Type Description Color32 The color of the vertex associated with the index. Exceptions Type Condition ArgumentOutOfRangeException | Edit this page View Source GetPosition(int) Get the position of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right Declaration public Vector3 GetPosition(int i) Parameters Type Name Description int i The index. Returns Type Description Vector3 The position of the vertex associated with the index. Exceptions Type Condition ArgumentOutOfRangeException | Edit this page View Source GetUV0(int) Get the UV0 of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right Declaration public Vector2 GetUV0(int i) Parameters Type Name Description int i The index. Returns Type Description Vector2 The UV0 of the vertex associated with the index. Exceptions Type Condition ArgumentOutOfRangeException | Edit this page View Source GetUV2(int) Get the UV2 of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right Declaration public Vector2 GetUV2(int i) Parameters Type Name Description int i The index. Returns Type Description Vector2 The UV2 of the vertex associated with the index. Exceptions Type Condition ArgumentOutOfRangeException | Edit this page View Source Reset() Reset the mesh to initial. Declaration public void Reset() | Edit this page View Source ResetAlphas() Declaration public void ResetAlphas() | Edit this page View Source ResetColors() Reset the vertex colors to initial. Declaration public void ResetColors() | Edit this page View Source ResetPositions() Reset the vertices to initial. Declaration public void ResetPositions() | Edit this page View Source ResetUVs() Reset the UVs to initial. Declaration public void ResetUVs() | Edit this page View Source SetAlpha(int, float) Set the alpha of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right Declaration public void SetAlpha(int i, float value) Parameters Type Name Description int i The index. float value Exceptions Type Condition ArgumentOutOfRangeException | Edit this page View Source SetColor(int, Color32, bool) Set the color of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right Declaration public void SetColor(int i, Color32 value, bool ignoreAlpha = false) Parameters Type Name Description int i The index. Color32 value The color to set the vertex too. bool ignoreAlpha Whether to ignore the alpha of the passed in color. Exceptions Type Condition ArgumentOutOfRangeException | Edit this page View Source SetPosition(int, Vector3) Set the position of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right Declaration public void SetPosition(int i, Vector3 value) Parameters Type Name Description int i The index. Vector3 value Exceptions Type Condition ArgumentOutOfRangeException | Edit this page View Source SetUV0(int, Vector2) Set the UV0 of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right Declaration public void SetUV0(int i, Vector2 value) Parameters Type Name Description int i The index. Vector2 value Exceptions Type Condition ArgumentOutOfRangeException | Edit this page View Source SetUV2(int, Vector2) Set the UV2 of the vertex associated with the index. 0 => bottom left 1 => top left 2 => top right 3 => bottom right Declaration public void SetUV2(int i, Vector2 value) Parameters Type Name Description int i The index. Vector2 value Exceptions Type Condition ArgumentOutOfRangeException"
  },
  "api/TMPEffects.CharacterData.VisibilityState.html": {
    "href": "api/TMPEffects.CharacterData.VisibilityState.html",
    "title": "Enum VisibilityState | TMPEffects documentation",
    "keywords": "Enum VisibilityState A character's visibility state. A character can be either fully shown or hidden, or in the process of being shown or hidden. Namespace: TMPEffects.CharacterData Assembly: .dll Syntax public enum VisibilityState Fields Name Description Hidden The character is fully hidden. Hiding The character is in the process of being hidden. Showing The character is in the process of being shown. Shown The character is fully shown."
  },
  "api/TMPEffects.CharacterData.html": {
    "href": "api/TMPEffects.CharacterData.html",
    "title": "Namespace TMPEffects.CharacterData | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.CharacterData Classes CharData Holds information about a character. In addition to holding a selection of data supplied by the respective TMP_CharacterInfo, accessible through the info field, also holds TMPEffects specific data and methods to manipulate said data. CharDataState Utility class that stores a CharData and modifications to it, allowing you to make multiple modifications iteratively and to apply at once. Used in TMPAnimator to apply animations. ReadOnlyCharDataState Readonly version of CharDataState. Used to expose the current state of the CharData in IAnimationContext, allowing you to take it into account in your animations (ideally with late animations, see the docs). ReadOnlyVertexData Holds data about a character's mesh. VertexData Holds data about a character's mesh. Structs CharData.Info Holds a selection of data of TMP_CharacterInfo, as well as some data about the initial mesh of the character. Interfaces ICharDataState Exposes vertex state of a CharData to allow iterative modifications. Used in CharDataState and ReadOnlyCharDataState. Enums VisibilityState A character's visibility state. A character can be either fully shown or hidden, or in the process of being shown or hidden."
  },
  "api/TMPEffects.Components.Animator.AnimationUpdater.html": {
    "href": "api/TMPEffects.Components.Animator.AnimationUpdater.html",
    "title": "Class AnimationUpdater | TMPEffects documentation",
    "keywords": "Class AnimationUpdater Inheritance object AnimationUpdater Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.Components.Animator Assembly: .dll Syntax [Serializable] public class AnimationUpdater Constructors | Edit this page View Source AnimationUpdater(Action<float>, uint) Declaration public AnimationUpdater(Action<float> updateAction, uint maxUpdatesPerSecond) Parameters Type Name Description Action<float> updateAction uint maxUpdatesPerSecond Properties | Edit this page View Source MaxUpdatesPerSecond Declaration public uint MaxUpdatesPerSecond { get; } Property Value Type Description uint Methods | Edit this page View Source Reset() Declaration public void Reset() | Edit this page View Source SetMaxUpdatesPerSecond(uint) Declaration public void SetMaxUpdatesPerSecond(uint maxUpdatesPerSecond) Parameters Type Name Description uint maxUpdatesPerSecond | Edit this page View Source Update(float) Declaration public bool Update(float deltaTime) Parameters Type Name Description float deltaTime Returns Type Description bool"
  },
  "api/TMPEffects.Components.Animator.AnimatorContext.html": {
    "href": "api/TMPEffects.Components.Animator.AnimatorContext.html",
    "title": "Class AnimatorContext | TMPEffects documentation",
    "keywords": "Class AnimatorContext To be used with TMPAnimator. Contains context data of the respective TMPAnimator. Inheritance object AnimatorContext Implements IAnimatorContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.Components.Animator Assembly: .dll Syntax [Serializable] public class AnimatorContext : IAnimatorContext Constructors | Edit this page View Source AnimatorContext() Declaration public AnimatorContext() | Edit this page View Source AnimatorContext(TMPAnimator) Declaration public AnimatorContext(TMPAnimator animator) Parameters Type Name Description TMPAnimator animator | Edit this page View Source AnimatorContext(TMPAnimator, bool, bool, bool, Func<int, float>, Func<int, float>) Declaration public AnimatorContext(TMPAnimator animator, bool scaleAnimations, bool useScaledTime, bool scaleUniformly, Func<int, float> getVisibleTime, Func<int, float> getStateTime) Parameters Type Name Description TMPAnimator animator bool scaleAnimations bool useScaledTime bool scaleUniformly Func<int, float> getVisibleTime Func<int, float> getStateTime Fields | Edit this page View Source _StateTime Declaration [NonSerialized] public Func<int, float> _StateTime Field Value Type Description Func<int, float> | Edit this page View Source _VisibleTime Declaration [NonSerialized] public Func<int, float> _VisibleTime Field Value Type Description Func<int, float> | Edit this page View Source deltaTime Declaration [NonSerialized] public float deltaTime Field Value Type Description float | Edit this page View Source passed Declaration [NonSerialized] public float passed Field Value Type Description float Properties | Edit this page View Source Animator The animating TMPAnimator. Declaration public TMPAnimator Animator { get; set; } Property Value Type Description TMPAnimator | Edit this page View Source DeltaTime The current delta time (=> time since last animation update). Declaration public float DeltaTime { get; set; } Property Value Type Description float | Edit this page View Source PassedTime The time that has passed since the animator began animating. Declaration public float PassedTime { get; set; } Property Value Type Description float | Edit this page View Source ScaleAnimations Whether animations are scaled. Declaration public bool ScaleAnimations { get; set; } Property Value Type Description bool | Edit this page View Source ScaleUniformly Whether to scale animations uniformly (based on the default font size of the animator) or on a per character basis. Ignored if ScaleAnimations is false. Declaration public bool ScaleUniformly { get; set; } Property Value Type Description bool | Edit this page View Source UseScaledTime Whether animations use scaled time. Declaration public bool UseScaledTime { get; set; } Property Value Type Description bool Methods | Edit this page View Source StateTime(int) Check how long the CharData at the given index has been in its current VisibilityState. Generally, to be used with show and hide animations. Declaration public float StateTime(int index) Parameters Type Name Description int index The index of the character to check. Returns Type Description float How long the CharData at the given index has been in its current VisibilityState. | Edit this page View Source StateTime(CharData) Check how long the passed CharData has been in its current VisibilityState. Generally, to be used with show and hide animations. Declaration public float StateTime(CharData cData) Parameters Type Name Description CharData cData The character to check. Returns Type Description float How long the passed CharData has been in its current VisibilityState. | Edit this page View Source VisibleTime(int) Check how long the CharData at the given index has been visible. Declaration public float VisibleTime(int index) Parameters Type Name Description int index Returns Type Description float How long the CharData at the given index has been visible. | Edit this page View Source VisibleTime(CharData) Check how long the passed CharData has been visible. Declaration public float VisibleTime(CharData cData) Parameters Type Name Description CharData cData The character to check. Returns Type Description float How long the passed CharData has been visible. Implements IAnimatorContext"
  },
  "api/TMPEffects.Components.Animator.IAnimatorContext.html": {
    "href": "api/TMPEffects.Components.Animator.IAnimatorContext.html",
    "title": "Interface IAnimatorContext | TMPEffects documentation",
    "keywords": "Interface IAnimatorContext To be used with TMPAnimator. Contains context data of the respective TMPAnimator. Namespace: TMPEffects.Components.Animator Assembly: .dll Syntax public interface IAnimatorContext Properties | Edit this page View Source Animator The animating TMPAnimator. Declaration TMPAnimator Animator { get; } Property Value Type Description TMPAnimator | Edit this page View Source DeltaTime The current delta time (=> time since last animation update). Declaration float DeltaTime { get; } Property Value Type Description float | Edit this page View Source PassedTime The time that has passed since the animator began animating. Declaration float PassedTime { get; } Property Value Type Description float | Edit this page View Source ScaleAnimations Whether animations are scaled. Declaration bool ScaleAnimations { get; } Property Value Type Description bool | Edit this page View Source ScaleUniformly Whether to scale animations uniformly (based on the default font size of the animator) or on a per character basis. Ignored if ScaleAnimations is false. Declaration bool ScaleUniformly { get; } Property Value Type Description bool | Edit this page View Source UseScaledTime Whether animations use scaled time. Declaration bool UseScaledTime { get; } Property Value Type Description bool Methods | Edit this page View Source StateTime(int) Check how long the CharData at the given index has been in its current VisibilityState. Generally, to be used with show and hide animations. Declaration float StateTime(int index) Parameters Type Name Description int index The index of the character to check. Returns Type Description float How long the CharData at the given index has been in its current VisibilityState. | Edit this page View Source StateTime(CharData) Check how long the passed CharData has been in its current VisibilityState. Generally, to be used with show and hide animations. Declaration float StateTime(CharData cData) Parameters Type Name Description CharData cData The character to check. Returns Type Description float How long the passed CharData has been in its current VisibilityState. | Edit this page View Source VisibleTime(int) Check how long the CharData at the given index has been visible. Declaration float VisibleTime(int index) Parameters Type Name Description int index Returns Type Description float How long the CharData at the given index has been visible. | Edit this page View Source VisibleTime(CharData) Check how long the passed CharData has been visible. Declaration float VisibleTime(CharData cData) Parameters Type Name Description CharData cData The character to check. Returns Type Description float How long the passed CharData has been visible."
  },
  "api/TMPEffects.Components.Animator.ReadOnlyAnimatorContext.html": {
    "href": "api/TMPEffects.Components.Animator.ReadOnlyAnimatorContext.html",
    "title": "Class ReadOnlyAnimatorContext | TMPEffects documentation",
    "keywords": "Class ReadOnlyAnimatorContext To be used with TMPAnimator. Contains readonly context data of the respective TMPAnimator. Inheritance object ReadOnlyAnimatorContext Implements IAnimatorContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.Components.Animator Assembly: .dll Syntax [Serializable] public class ReadOnlyAnimatorContext : IAnimatorContext Constructors | Edit this page View Source ReadOnlyAnimatorContext(IAnimatorContext) Declaration public ReadOnlyAnimatorContext(IAnimatorContext context) Parameters Type Name Description IAnimatorContext context | Edit this page View Source ReadOnlyAnimatorContext(TMPAnimator, bool, bool, bool, Func<int, float>, Func<int, float>) Declaration public ReadOnlyAnimatorContext(TMPAnimator animator, bool scaleAnimations, bool useScaledTime, bool scaleUniformly, Func<int, float> getVisibleTime, Func<int, float> getStateTime) Parameters Type Name Description TMPAnimator animator bool scaleAnimations bool useScaledTime bool scaleUniformly Func<int, float> getVisibleTime Func<int, float> getStateTime Properties | Edit this page View Source Animator The animating TMPAnimator. Declaration public TMPAnimator Animator { get; } Property Value Type Description TMPAnimator | Edit this page View Source DeltaTime The current delta time (=> time since last animation update). Declaration public float DeltaTime { get; } Property Value Type Description float | Edit this page View Source PassedTime The time that has passed since the animator began animating. Declaration public float PassedTime { get; } Property Value Type Description float | Edit this page View Source ScaleAnimations Whether animations are scaled. Declaration public bool ScaleAnimations { get; } Property Value Type Description bool | Edit this page View Source ScaleUniformly Whether to scale animations uniformly (based on the default font size of the animator) or on a per character basis. Ignored if ScaleAnimations is false. Declaration public bool ScaleUniformly { get; } Property Value Type Description bool | Edit this page View Source UseScaledTime Whether animations use scaled time. Declaration public bool UseScaledTime { get; } Property Value Type Description bool Methods | Edit this page View Source StateTime(int) Check how long the CharData at the given index has been in its current VisibilityState. Generally, to be used with show and hide animations. Declaration public float StateTime(int index) Parameters Type Name Description int index The index of the character to check. Returns Type Description float How long the CharData at the given index has been in its current VisibilityState. | Edit this page View Source StateTime(CharData) Check how long the passed CharData has been in its current VisibilityState. Generally, to be used with show and hide animations. Declaration public float StateTime(CharData cData) Parameters Type Name Description CharData cData The character to check. Returns Type Description float How long the passed CharData has been in its current VisibilityState. | Edit this page View Source VisibleTime(int) Check how long the CharData at the given index has been visible. Declaration public float VisibleTime(int index) Parameters Type Name Description int index Returns Type Description float How long the CharData at the given index has been visible. | Edit this page View Source VisibleTime(CharData) Check how long the passed CharData has been visible. Declaration public float VisibleTime(CharData cData) Parameters Type Name Description CharData cData The character to check. Returns Type Description float How long the passed CharData has been visible. Implements IAnimatorContext"
  },
  "api/TMPEffects.Components.Animator.SegmentData.html": {
    "href": "api/TMPEffects.Components.Animator.SegmentData.html",
    "title": "Struct SegmentData | TMPEffects documentation",
    "keywords": "Struct SegmentData To be used with TMPAnimator and its animations. Contains data about a given animation segment. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: TMPEffects.Components.Animator Assembly: .dll Syntax public struct SegmentData Fields | Edit this page View Source effectiveLength The effective length of the animation segment; i.e. the length of the segment from firstAnimationIndex to lastAnimationIndex. Declaration public readonly int effectiveLength Field Value Type Description int | Edit this page View Source firstAnimationIndex The index of the first character that is relevant to the TMPAnimator and will be animated. Declaration public readonly int firstAnimationIndex Field Value Type Description int | Edit this page View Source firstVisibleIndex The index of the first visible character (i.e. non-whitespace character). Declaration public readonly int firstVisibleIndex Field Value Type Description int | Edit this page View Source lastAnimationIndex The index of the last character that is relevant to the TMPAnimator and will be animated. Declaration public readonly int lastAnimationIndex Field Value Type Description int | Edit this page View Source lastVisibleIndex The index of the last visible character (i.e. non-whitespace character). Declaration public readonly int lastVisibleIndex Field Value Type Description int | Edit this page View Source length The length of the animation segment. Declaration public readonly int length Field Value Type Description int | Edit this page View Source max Declaration public readonly Vector3 max Field Value Type Description Vector3 | Edit this page View Source min Declaration public readonly Vector3 min Field Value Type Description Vector3 | Edit this page View Source startIndex The first index of the segment within the containing text. Declaration public readonly int startIndex Field Value Type Description int Methods | Edit this page View Source IndexToSegmentIndex(int) Declaration public int IndexToSegmentIndex(int index) Parameters Type Name Description int index Returns Type Description int | Edit this page View Source SegmentIndexOf(CharData) Declaration public int SegmentIndexOf(CharData cData) Parameters Type Name Description CharData cData Returns Type Description int"
  },
  "api/TMPEffects.Components.Animator.TMPAnimationType.html": {
    "href": "api/TMPEffects.Components.Animator.TMPAnimationType.html",
    "title": "Enum TMPAnimationType | TMPEffects documentation",
    "keywords": "Enum TMPAnimationType To be used with TMPAnimator. Identifies a specific type of animation. Namespace: TMPEffects.Components.Animator Assembly: .dll Syntax public enum TMPAnimationType : short Fields Name Description Basic The \"standard\" animation type. Animations of this type are updated continuously. Hide Animations of this type are played when a character is hidden. Show Animations of this type are played when a character is shown."
  },
  "api/TMPEffects.Components.Animator.TMPAnimatorUpdater.html": {
    "href": "api/TMPEffects.Components.Animator.TMPAnimatorUpdater.html",
    "title": "Class TMPAnimatorUpdater | TMPEffects documentation",
    "keywords": "Class TMPAnimatorUpdater Inheritance object TMPAnimatorUpdater Namespace: TMPEffects.Components.Animator Assembly: .dll Syntax public class TMPAnimatorUpdater : MonoBehaviour Properties | Edit this page View Source MaxUpdatesPerSecond Declaration public uint MaxUpdatesPerSecond { get; } Property Value Type Description uint Methods | Edit this page View Source SetMaxUpdatesPerSecond(uint) Declaration public void SetMaxUpdatesPerSecond(uint maxUpdatesPerSecond) Parameters Type Name Description uint maxUpdatesPerSecond"
  },
  "api/TMPEffects.Components.Animator.UpdateFrom.html": {
    "href": "api/TMPEffects.Components.Animator.UpdateFrom.html",
    "title": "Enum UpdateFrom | TMPEffects documentation",
    "keywords": "Enum UpdateFrom To be used with TMPAnimator's SetUpdateFrom(UpdateFrom) method. Defines where the TMPAnimator is updated from. Namespace: TMPEffects.Components.Animator Assembly: .dll Syntax [Serializable] public enum UpdateFrom Fields Name Description FixedUpdate TMPAnimator is updated in the FixedUpdate method. LateUpdate TMPAnimator is updated in the LateUpdate method. Script TMPAnimator is not automatically updated; you will need to update it from your own script. Update TMPAnimator is updated in the Update method."
  },
  "api/TMPEffects.Components.Animator.html": {
    "href": "api/TMPEffects.Components.Animator.html",
    "title": "Namespace TMPEffects.Components.Animator | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.Components.Animator Classes AnimationUpdater AnimatorContext To be used with TMPAnimator. Contains context data of the respective TMPAnimator. ReadOnlyAnimatorContext To be used with TMPAnimator. Contains readonly context data of the respective TMPAnimator. TMPAnimatorUpdater Structs SegmentData To be used with TMPAnimator and its animations. Contains data about a given animation segment. Interfaces IAnimatorContext To be used with TMPAnimator. Contains context data of the respective TMPAnimator. Enums TMPAnimationType To be used with TMPAnimator. Identifies a specific type of animation. UpdateFrom To be used with TMPAnimator's SetUpdateFrom(UpdateFrom) method. Defines where the TMPAnimator is updated from."
  },
  "api/TMPEffects.Components.Mediator.TMPMediator.TextChangedEarlyEventHandler.html": {
    "href": "api/TMPEffects.Components.Mediator.TMPMediator.TextChangedEarlyEventHandler.html",
    "title": "Delegate TMPMediator.TextChangedEarlyEventHandler | TMPEffects documentation",
    "keywords": "Delegate TMPMediator.TextChangedEarlyEventHandler Namespace: TMPEffects.Components.Mediator Assembly: .dll Syntax public delegate void TMPMediator.TextChangedEarlyEventHandler(bool textContentChanged, ReadOnlyCollection<CharData> oldCharData) Parameters Type Name Description bool textContentChanged ReadOnlyCollection<CharData> oldCharData"
  },
  "api/TMPEffects.Components.Mediator.TMPMediator.TextChangedLateEventHandler.html": {
    "href": "api/TMPEffects.Components.Mediator.TMPMediator.TextChangedLateEventHandler.html",
    "title": "Delegate TMPMediator.TextChangedLateEventHandler | TMPEffects documentation",
    "keywords": "Delegate TMPMediator.TextChangedLateEventHandler Namespace: TMPEffects.Components.Mediator Assembly: .dll Syntax public delegate void TMPMediator.TextChangedLateEventHandler(bool textContentChanged, ReadOnlyCollection<CharData> oldCharData, ReadOnlyCollection<VisibilityState> oldVisibilities) Parameters Type Name Description bool textContentChanged ReadOnlyCollection<CharData> oldCharData ReadOnlyCollection<VisibilityState> oldVisibilities"
  },
  "api/TMPEffects.Components.Mediator.TMPMediator.VisibilityEventHandler.html": {
    "href": "api/TMPEffects.Components.Mediator.TMPMediator.VisibilityEventHandler.html",
    "title": "Delegate TMPMediator.VisibilityEventHandler | TMPEffects documentation",
    "keywords": "Delegate TMPMediator.VisibilityEventHandler Namespace: TMPEffects.Components.Mediator Assembly: .dll Syntax public delegate void TMPMediator.VisibilityEventHandler(int index, VisibilityState previous) Parameters Type Name Description int index VisibilityState previous"
  },
  "api/TMPEffects.Components.Mediator.TMPMediator.html": {
    "href": "api/TMPEffects.Components.Mediator.TMPMediator.html",
    "title": "Class TMPMediator | TMPEffects documentation",
    "keywords": "Class TMPMediator A mediator class for TMPAnimator and TMPWriter (and potential additions, if any). Handles the pre- and postprocessing of the text, as well as maintaining information about it in the form of a CharData and VisibilityState collection. Inheritance object TMPMediator Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.Components.Mediator Assembly: .dll Syntax public class TMPMediator : IDisposable Fields | Edit this page View Source CharData Declaration public readonly ReadOnlyCollection<CharData> CharData Field Value Type Description ReadOnlyCollection<CharData> | Edit this page View Source Processor The TMPTextProcessor used by the associated TMP_Text component. Declaration public readonly TMPTextProcessor Processor Field Value Type Description TMPTextProcessor | Edit this page View Source Text The associated TMP_Text component. Declaration public readonly TMP_Text Text Field Value Type Description TMP_Text | Edit this page View Source VisibilityStates Declaration public readonly ReadOnlyCollection<VisibilityState> VisibilityStates Field Value Type Description ReadOnlyCollection<VisibilityState> Methods | Edit this page View Source ApplyMesh(CharData) Apply the mesh of the CharData. Declaration public void ApplyMesh(CharData cData) Parameters Type Name Description CharData cData | Edit this page View Source Dispose() Dispose the TMPMediator instance. Declaration public void Dispose() | Edit this page View Source ForceReprocess() Forces a mesh update on the associated TMP_Text component. Will reprocess the text. Declaration public void ForceReprocess() | Edit this page View Source GetVisibilityState(CharData) Get the associated VisibilityState of the given CharData. Declaration public VisibilityState GetVisibilityState(CharData cData) Parameters Type Name Description CharData cData The CharData to get the VisibilityState of. Returns Type Description VisibilityState The associated VisibilityState of the given CharData. Remarks This uses the index property of info to get the associated VisibilityState. Therefore, the responsiblity is on you to ensure cData is valid, i.e. belongs to this TMPMediator instance. Exceptions Type Condition ArgumentOutOfRangeException NullReferenceException | Edit this page View Source RegisterVisibilityProcessor(object) Register as the visibility processor of this TMPMediator. There may be at most one visibility processor registered at any given time. This makes you responsible of applying any actual changes to the mesh of the character when its associated VisibilityState is updated. Subscribe to the VisibilityStateUpdated event to get a callback whenever an VisibilityState is updated. Declaration public bool RegisterVisibilityProcessor(object obj) Parameters Type Name Description object obj The object to identify the subscriber. Returns Type Description bool true if registration was successful; otherwise false. | Edit this page View Source SetText(string) Set the text of the associated TMP_Text component. Declaration public void SetText(string text) Parameters Type Name Description string text | Edit this page View Source SetVisibilityState(int, int, VisibilityState) Set the VisibilityState associated with the CharData at the given indices. Declaration public void SetVisibilityState(int startIndex, int length, VisibilityState state) Parameters Type Name Description int startIndex The first index of the to-be-updated VisibilityState. int length The amount of to-be-updated VisibilityState. VisibilityState state The VisibilityState to set to. Exceptions Type Condition ArgumentOutOfRangeException | Edit this page View Source SetVisibilityState(int, VisibilityState) Set the VisibilityState associated with the CharData at the given index. Declaration public void SetVisibilityState(int index, VisibilityState state) Parameters Type Name Description int index The index of the to-be-updated VisibilityState. VisibilityState state The VisibilityState to set to. Exceptions Type Condition ArgumentOutOfRangeException | Edit this page View Source SetVisibilityState(CharData, VisibilityState) Set the VisibilityState associated with the given CharData. Declaration public void SetVisibilityState(CharData cData, VisibilityState state) Parameters Type Name Description CharData cData The CharData to set the associated VisibilityState of. VisibilityState state The VisibilityState to set to. Remarks This uses the index property of info to get the associated VisibilityState. Therefore, the responsiblity is on you to ensure cData is valid, i.e. belongs to this TMPMediator instance. Exceptions Type Condition ArgumentOutOfRangeException | Edit this page View Source UnregisterVisibilityProcessor(object) Unregister as the visibility processor of this TMPMediator. Declaration public bool UnregisterVisibilityProcessor(object obj) Parameters Type Name Description object obj The object to identify the subscriber. Returns Type Description bool true if registration was successful; otherwise false. Events | Edit this page View Source TextChanged_Early Raised when the associated TMP_Text component raises its TEXT_CHANGED_EVENT, before TextChanged_Late. You should use this callback for initialization, e.g. processing tags. Don't modify data that might mess with the initialization of other listeners, such as setting visibilities or char data. For such operations, use TextChanged_Late. Declaration public event TMPMediator.TextChangedEarlyEventHandler TextChanged_Early Event Type Type Description TMPMediator.TextChangedEarlyEventHandler | Edit this page View Source TextChanged_Late Raised when the associated TMP_Text component raises its TEXT_CHANGED_EVENT, after TextChanged_Early. Declaration public event TMPMediator.TextChangedLateEventHandler TextChanged_Late Event Type Type Description TMPMediator.TextChangedLateEventHandler | Edit this page View Source VisibilityStateUpdated Raised when the VisibilityState of one of the contained CharData is updated. Declaration public event TMPMediator.VisibilityEventHandler VisibilityStateUpdated Event Type Type Description TMPMediator.VisibilityEventHandler Implements IDisposable"
  },
  "api/TMPEffects.Components.Mediator.html": {
    "href": "api/TMPEffects.Components.Mediator.html",
    "title": "Namespace TMPEffects.Components.Mediator | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.Components.Mediator Classes TMPMediator A mediator class for TMPAnimator and TMPWriter (and potential additions, if any). Handles the pre- and postprocessing of the text, as well as maintaining information about it in the form of a CharData and VisibilityState collection. Delegates TMPMediator.TextChangedEarlyEventHandler TMPMediator.TextChangedLateEventHandler TMPMediator.VisibilityEventHandler"
  },
  "api/TMPEffects.Components.TMPAnimator.html": {
    "href": "api/TMPEffects.Components.TMPAnimator.html",
    "title": "Class TMPAnimator | TMPEffects documentation",
    "keywords": "Class TMPAnimator Animates the character of a TMP_Text component. Inheritance object TMPEffectComponent TMPAnimator Inherited Members TMPEffectComponent.TextComponent TMPEffectComponent.SetText(string) TMPEffectComponent.Show(int, int, bool) TMPEffectComponent.Hide(int, int, bool) TMPEffectComponent.ShowAll(bool) TMPEffectComponent.HideAll(bool) TMPEffectComponent.Mediator TMPEffectComponent.FreeMediator() TMPEffectComponent.UpdateMediator() Namespace: TMPEffects.Components Assembly: .dll Syntax public class TMPAnimator : TMPEffectComponent Remarks One of the two main components of TMPEffects, along with TMPWriter. TMPAnimator allows you to apply animations to the characters of a TMP_Text component. There are three types of animations: You may control when the animations are updated by setting UpdateFrom to Script and calling UpdateAnimations(float). Fields | Edit this page View Source ANIMATION_PREFIX The prefix used for basic animation tags. Declaration public const char ANIMATION_PREFIX = '\\0' Field Value Type Description char | Edit this page View Source HIDE_ANIMATION_PREFIX The prefix used for hide animation tags. Declaration public const char HIDE_ANIMATION_PREFIX = '-' Field Value Type Description char | Edit this page View Source SHOW_ANIMATION_PREFIX The prefix used for show animation tags. Declaration public const char SHOW_ANIMATION_PREFIX = '+' Field Value Type Description char Properties | Edit this page View Source AnimateOnStart Whether the TMPAnimator should automatically begin animating on TMPEffects.Components.TMPAnimator.Start(). Declaration public bool AnimateOnStart { get; set; } Property Value Type Description bool | Edit this page View Source AnimationsOverride Whether animations will override each other by default. Declaration public bool AnimationsOverride { get; set; } Property Value Type Description bool | Edit this page View Source BasicTags All basic animation tags parsed by the TMPAnimator. Declaration public ITagCollection BasicTags { get; } Property Value Type Description ITagCollection | Edit this page View Source Database The database used to parse animation tags. Declaration public TMPAnimationDatabase Database { get; } Property Value Type Description TMPAnimationDatabase | Edit this page View Source HideTags All hide animation tags parsed by the TMPAnimator. Declaration public ITagCollection HideTags { get; } Property Value Type Description ITagCollection | Edit this page View Source IsAnimating Whether the text is currently being animated. If UpdateFrom is set to Script, this will always evaluate to true. Declaration public bool IsAnimating { get; } Property Value Type Description bool | Edit this page View Source SceneAnimations Declaration public IDictionary<string, TMPSceneAnimation> SceneAnimations { get; } Property Value Type Description IDictionary<string, TMPSceneAnimation> | Edit this page View Source SceneHideAnimations Declaration public IDictionary<string, TMPSceneHideAnimation> SceneHideAnimations { get; } Property Value Type Description IDictionary<string, TMPSceneHideAnimation> | Edit this page View Source SceneShowAnimations Declaration public IDictionary<string, TMPSceneShowAnimation> SceneShowAnimations { get; } Property Value Type Description IDictionary<string, TMPSceneShowAnimation> | Edit this page View Source ShowTags All show animation tags parsed by the TMPAnimator. Declaration public ITagCollection ShowTags { get; } Property Value Type Description ITagCollection | Edit this page View Source Tags All tags parsed by the TMPAnimator. Declaration public ITagCollection Tags { get; } Property Value Type Description ITagCollection | Edit this page View Source UpdateFrom Where the animations are currently being updated from. Declaration public UpdateFrom UpdateFrom { get; } Property Value Type Description UpdateFrom Methods | Edit this page View Source IsExcluded(char, TMPAnimationType) Whether the character is excluded from animations of the given type. Declaration public bool IsExcluded(char c, TMPAnimationType type) Parameters Type Name Description char c The character to check. TMPAnimationType type The type of animation to check against. Returns Type Description bool Whether the character is excluded from animations of the given type. Exceptions Type Condition ArgumentException If an invalid TMPAnimationType is passed in. | Edit this page View Source IsExcludedBasic(char) Check whether the given character is excluded from basic animations. Declaration public bool IsExcludedBasic(char c) Parameters Type Name Description char c The character to check. Returns Type Description bool Whether the character is excluded from basic animations. | Edit this page View Source IsExcludedHide(char) Check whether the given character is excluded from hide animations. Declaration public bool IsExcludedHide(char c) Parameters Type Name Description char c The character to check. Returns Type Description bool Whether the character is excluded from hide animations. | Edit this page View Source IsExcludedShow(char) Check whether the given character is excluded from show animations. Declaration public bool IsExcludedShow(char c) Parameters Type Name Description char c The character to check. Returns Type Description bool Whether the character is excluded from show animations. | Edit this page View Source ResetAnimations() Reset all visible characters to their initial, unanimated state. Declaration public void ResetAnimations() | Edit this page View Source ResetTime() Reset the time of the animator. Declaration public void ResetTime() | Edit this page View Source SetDatabase(TMPAnimationDatabase) Set the database that will be used to parse animation tags. Declaration public void SetDatabase(TMPAnimationDatabase database) Parameters Type Name Description TMPAnimationDatabase database The database that will be used to parse animation tags. | Edit this page View Source SetExcludedBasicCharacters(string, bool?) Set the excluded character for basic animations, meaning characters that will not be animated by basic animations. Declaration public void SetExcludedBasicCharacters(string str, bool? excludePunctuation = null) Parameters Type Name Description string str The excluded characters, as string. The string will be evaluated character-wise. bool? excludePunctuation Whether punctuation is excluded. | Edit this page View Source SetExcludedCharacters(TMPAnimationType, string, bool?) Set the excluded character for animations of the given type, meaning characters that will not be animated by that type of animations. Declaration public void SetExcludedCharacters(TMPAnimationType type, string str, bool? excludePunctuation = null) Parameters Type Name Description TMPAnimationType type string str The excluded characters, as string. The string will be evaluated character-wise. bool? excludePunctuation Whether punctuation is excluded. Exceptions Type Condition ArgumentException If an invalid TMPAnimationType is passed in. | Edit this page View Source SetExcludedHideCharacters(string, bool?) Set the excluded character for hide animations, meaning characters that will not be animated by hide animations. Declaration public void SetExcludedHideCharacters(string str, bool? excludePunctuation = null) Parameters Type Name Description string str The excluded characters, as string. The string will be evaluated character-wise. bool? excludePunctuation Whether punctuation is excluded. | Edit this page View Source SetExcludedShowCharacters(string, bool?) Set the excluded character for show animations, meaning characters that will not be animated by show animations. Declaration public void SetExcludedShowCharacters(string str, bool? excludePunctuation = null) Parameters Type Name Description string str The excluded characters, as string. The string will be evaluated character-wise. bool? excludePunctuation Whether punctuation is excluded. | Edit this page View Source SetUpdateFrom(UpdateFrom) Set where the animations should be updated from. Declaration public void SetUpdateFrom(UpdateFrom updateFrom) Parameters Type Name Description UpdateFrom updateFrom Where the animations are updated from. | Edit this page View Source StartAnimating() Start animating. You should only call this if UpdateFrom is NOT set to Script, otherwise this will output a warning and return. Declaration public void StartAnimating() | Edit this page View Source StopAnimating() Stop animating. You should only call this if UpdateFrom is NOT set to Script, otherwise this will output a warning and return. Declaration public void StopAnimating() | Edit this page View Source UpdateAnimations(float) Update the current animations. You should only call this if UpdateFrom is set to Script, otherwise this will output a warning and return. Declaration public void UpdateAnimations(float deltaTime) Parameters Type Name Description float deltaTime"
  },
  "api/TMPEffects.Components.TMPEffectComponent.html": {
    "href": "api/TMPEffects.Components.TMPEffectComponent.html",
    "title": "Class TMPEffectComponent | TMPEffects documentation",
    "keywords": "Class TMPEffectComponent Base class for TMPAnimator and TMPWriter. Inheritance object TMPEffectComponent TMPAnimator TMPWriter Namespace: TMPEffects.Components Assembly: .dll Syntax public abstract class TMPEffectComponent : MonoBehaviour Properties | Edit this page View Source Mediator Declaration protected TMPMediator Mediator { get; } Property Value Type Description TMPMediator | Edit this page View Source TextComponent The associated TMP_Text component. Declaration public TMP_Text TextComponent { get; } Property Value Type Description TMP_Text Methods | Edit this page View Source FreeMediator() Declaration protected void FreeMediator() | Edit this page View Source Hide(int, int, bool) Hide a subset of the text's characters. Declaration public void Hide(int start, int length, bool skipHideProcess = false) Parameters Type Name Description int start First character index to hide. int length Amount of characters to hide. bool skipHideProcess Whether to skip the hide process. Exceptions Type Condition InvalidOperationException | Edit this page View Source HideAll(bool) Hide all of the text's character. Declaration public void HideAll(bool skipHideProcess = false) Parameters Type Name Description bool skipHideProcess Exceptions Type Condition InvalidOperationException | Edit this page View Source SetText(string) Set the text of the associated TMP_Text component. Declaration public void SetText(string text) Parameters Type Name Description string text The new text. | Edit this page View Source Show(int, int, bool) Show a subset of the text's characters. Declaration public void Show(int start, int length, bool skipShowProcess = false) Parameters Type Name Description int start First character index to show. int length Amount of characters to show. bool skipShowProcess Whether to skip the show process. Exceptions Type Condition InvalidOperationException | Edit this page View Source ShowAll(bool) Show all of the text's character. Declaration public void ShowAll(bool skipShowProcess = false) Parameters Type Name Description bool skipShowProcess Whether to skip the show process. Exceptions Type Condition InvalidOperationException | Edit this page View Source UpdateMediator() Declaration protected void UpdateMediator()"
  },
  "api/TMPEffects.Components.TMPWriter.DelayType.html": {
    "href": "api/TMPEffects.Components.TMPWriter.DelayType.html",
    "title": "Enum TMPWriter.DelayType | TMPEffects documentation",
    "keywords": "Enum TMPWriter.DelayType The type of delay. Either a percentage of the normal delay (delay) or a raw value in seconds. Namespace: TMPEffects.Components Assembly: .dll Syntax public enum TMPWriter.DelayType Fields Name Description Percentage Raw"
  },
  "api/TMPEffects.Components.TMPWriter.Delays.html": {
    "href": "api/TMPEffects.Components.TMPWriter.Delays.html",
    "title": "Class TMPWriter.Delays | TMPEffects documentation",
    "keywords": "Class TMPWriter.Delays Stores the various delays along with their TMPWriter.DelayType of a TMPWriter. Inheritance object TMPWriter.Delays Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.Components Assembly: .dll Syntax [Serializable] public class TMPWriter.Delays Fields | Edit this page View Source delay The delay after showing a character. Declaration public float delay Field Value Type Description float | Edit this page View Source linebreakDelay The delay after \"showing\" a linebreak character. Declaration public float linebreakDelay Field Value Type Description float | Edit this page View Source linebreakDelayType The TMPWriter.DelayType of linebreakDelay. Declaration public TMPWriter.DelayType linebreakDelayType Field Value Type Description TMPWriter.DelayType | Edit this page View Source punctuationDelay The delay after showing a punctuation character. Declaration public float punctuationDelay Field Value Type Description float | Edit this page View Source punctuationDelayType The TMPWriter.DelayType of punctuationDelay. Declaration public TMPWriter.DelayType punctuationDelayType Field Value Type Description TMPWriter.DelayType | Edit this page View Source visibleDelay The delay after \"showing\" an already visible character. Declaration public float visibleDelay Field Value Type Description float | Edit this page View Source visibleDelayType The TMPWriter.DelayType of visibleDelay. Declaration public TMPWriter.DelayType visibleDelayType Field Value Type Description TMPWriter.DelayType | Edit this page View Source whitespaceDelay The delay after \"showing\" a whitespace character. Declaration public float whitespaceDelay Field Value Type Description float | Edit this page View Source whitespaceDelayType The TMPWriter.DelayType of whitespaceDelay. Declaration public TMPWriter.DelayType whitespaceDelayType Field Value Type Description TMPWriter.DelayType Properties | Edit this page View Source CalculatedLinebreakDelay The calculated delay after \"showing\" a linebreak character, using linebreakDelay and linebreakDelayType. Declaration public float CalculatedLinebreakDelay { get; } Property Value Type Description float | Edit this page View Source CalculatedPunctuationDelay The calculated delay after showing a punctuation character, using punctuationDelay and punctuationDelayType. Declaration public float CalculatedPunctuationDelay { get; } Property Value Type Description float | Edit this page View Source CalculatedVisibleDelay The calculated delay after \"showing\" an already visible character, using visibleDelay and visibleDelayType. Declaration public float CalculatedVisibleDelay { get; } Property Value Type Description float | Edit this page View Source CalculatedWhiteSpaceDelay The calculated delay after \"showing\" a whitespace character, using whitespaceDelay and whitespaceDelayType. Declaration public float CalculatedWhiteSpaceDelay { get; } Property Value Type Description float Methods | Edit this page View Source SetDelay(float) Set the delay of the writer. Declaration public void SetDelay(float delay) Parameters Type Name Description float delay The delay after showing a character. | Edit this page View Source SetLinebreakDelay(float, DelayType?) Set the linebreak delay of the writer. Declaration public void SetLinebreakDelay(float delay, TMPWriter.DelayType? type = null) Parameters Type Name Description float delay The delay after \"showing\" a linebreak character. TMPWriter.DelayType? type | Edit this page View Source SetPunctuationDelay(float, DelayType?) Set the punctuation delay of the writer. Declaration public void SetPunctuationDelay(float delay, TMPWriter.DelayType? type = null) Parameters Type Name Description float delay The delay after \"showing\" a punctuation character. TMPWriter.DelayType? type | Edit this page View Source SetVisibleDelay(float, DelayType?) Set the visible delay of the writer. Declaration public void SetVisibleDelay(float delay, TMPWriter.DelayType? type = null) Parameters Type Name Description float delay The delay after \"showing\" an already visible character. TMPWriter.DelayType? type | Edit this page View Source SetWhitespaceDelay(float, DelayType?) Set the whitespace delay of the writer. Declaration public void SetWhitespaceDelay(float delay, TMPWriter.DelayType? type = null) Parameters Type Name Description float delay The delay after \"showing\" a whitespace character. TMPWriter.DelayType? type"
  },
  "api/TMPEffects.Components.TMPWriter.html": {
    "href": "api/TMPEffects.Components.TMPWriter.html",
    "title": "Class TMPWriter | TMPEffects documentation",
    "keywords": "Class TMPWriter Shows / hides the characters of a TMP_Text component over time, and allows you to raise events and commands at specific indices. Inheritance object TMPEffectComponent TMPWriter Inherited Members TMPEffectComponent.TextComponent TMPEffectComponent.SetText(string) TMPEffectComponent.Show(int, int, bool) TMPEffectComponent.Hide(int, int, bool) TMPEffectComponent.ShowAll(bool) TMPEffectComponent.HideAll(bool) TMPEffectComponent.Mediator TMPEffectComponent.FreeMediator() TMPEffectComponent.UpdateMediator() Namespace: TMPEffects.Components Assembly: .dll Syntax public class TMPWriter : TMPEffectComponent Remarks One of the two main components of TMPEffects, along with TMPAnimator. Using command tags, you can call specific methods. There are two types of Commands: In additon to command tags, TMPWriter also processes event tags: TMPEvent: Using event tags, you can raise events from text, i.e. when a specific character is shown. You can subscribe to these events with OnTextEvent. Fields | Edit this page View Source COMMAND_PREFIX The prefix used for command tags. Declaration public const char COMMAND_PREFIX = '!' Field Value Type Description char | Edit this page View Source EVENT_PREFIX The prefix used for event tags. Declaration public const char EVENT_PREFIX = '?' Field Value Type Description char | Edit this page View Source OnCharacterShown Raised when the TMPWriter shows a new character. Declaration public UnityEvent<TMPWriter, CharData> OnCharacterShown Field Value Type Description UnityEvent<TMPWriter, CharData> | Edit this page View Source OnFinishWriter Raised when the TMPWriter is done writing the current text. Declaration public UnityEvent<TMPWriter> OnFinishWriter Field Value Type Description UnityEvent<TMPWriter> | Edit this page View Source OnResetWriter Raised when the TMPWriter is reset. The integer parameter indicates the text index the TMPWriter was reset to. Declaration public UnityEvent<TMPWriter, int> OnResetWriter Field Value Type Description UnityEvent<TMPWriter, int> | Edit this page View Source OnSkipWriter Raised when the current (section of) text is skipped. Declaration public UnityEvent<TMPWriter, int> OnSkipWriter Field Value Type Description UnityEvent<TMPWriter, int> | Edit this page View Source OnStartWriter Raised when the TMPWriter starts / resumes writing. Declaration public UnityEvent<TMPWriter> OnStartWriter Field Value Type Description UnityEvent<TMPWriter> | Edit this page View Source OnStopWriter Raised when the TMPWriter stops writing. Declaration public UnityEvent<TMPWriter> OnStopWriter Field Value Type Description UnityEvent<TMPWriter> | Edit this page View Source OnTextEvent Raised when the TMPWriter reaches an event tag. Declaration public TMPEvent OnTextEvent Field Value Type Description TMPEvent | Edit this page View Source OnWaitEnded Raised when the TMPWriter ends waiting. Declaration public UnityEvent<TMPWriter> OnWaitEnded Field Value Type Description UnityEvent<TMPWriter> | Edit this page View Source OnWaitStarted Raised when the TMPWriter starts waiting. The float parameter indicates the amount of time the TMPWriter will wait, in seconds. Declaration public UnityEvent<TMPWriter, float> OnWaitStarted Field Value Type Description UnityEvent<TMPWriter, float> Properties | Edit this page View Source CommandTags All command tags parsed by the TMPWriter. Declaration public ITagCollection CommandTags { get; } Property Value Type Description ITagCollection | Edit this page View Source CurrentDelays Declaration public TMPWriter.Delays CurrentDelays { get; } Property Value Type Description TMPWriter.Delays | Edit this page View Source CurrentIndex The text index of the TMPWriter's current character. Declaration public int CurrentIndex { get; } Property Value Type Description int | Edit this page View Source Database The database used to parse command tags. Declaration public TMPCommandDatabase Database { get; } Property Value Type Description TMPCommandDatabase | Edit this page View Source DefaultDelays Declaration public TMPWriter.Delays DefaultDelays { get; } Property Value Type Description TMPWriter.Delays | Edit this page View Source EventTags All event tags parsed by the TMPWriter. Declaration public ITagCollection EventTags { get; } Property Value Type Description ITagCollection | Edit this page View Source IsWriting Whether the TMPWriter is currently writing text. Declaration public bool IsWriting { get; } Property Value Type Description bool | Edit this page View Source MaySkip Whether the TMPWriter may skip the current section of text. Declaration public bool MaySkip { get; } Property Value Type Description bool | Edit this page View Source Tags All tags parsed by the TMPWriter. Declaration public ITagCollection Tags { get; } Property Value Type Description ITagCollection | Edit this page View Source UseScaledTime Declaration public bool UseScaledTime { get; set; } Property Value Type Description bool | Edit this page View Source WriteOnNewText Declaration public bool WriteOnNewText { get; set; } Property Value Type Description bool | Edit this page View Source WriteOnStart Declaration public bool WriteOnStart { get; set; } Property Value Type Description bool Methods | Edit this page View Source ResetWaitConditions() Declaration public void ResetWaitConditions() | Edit this page View Source ResetWaitPeriod() Declaration public void ResetWaitPeriod() | Edit this page View Source ResetWriter() Reset the writer to the initial state for the current text. This also stops the writing process. Declaration public void ResetWriter() | Edit this page View Source ResetWriter(int) Reset the writer to the given index of the current text. Does not allow you to skip text; the passed index must be smaller than the current index. Declaration public void ResetWriter(int index) Parameters Type Name Description int index The index to reset the writer to. | Edit this page View Source RestartWriter() Restart the writer. This will reset the writer and start the writing process. Declaration public void RestartWriter() | Edit this page View Source SetDatabase(TMPCommandDatabase) Set the database that will be used to parse command tags. Declaration public void SetDatabase(TMPCommandDatabase database) Parameters Type Name Description TMPCommandDatabase database The database that will be used to parse command tags. | Edit this page View Source SetSkippable(bool) Set whether the current text may be skipped. Declaration public void SetSkippable(bool skippable) Parameters Type Name Description bool skippable Whether the current text may be skipped. | Edit this page View Source SkipWriter(bool) Skip the current section of the text. If the current section may not be skipped, this will do nothing. Otherwise, the writing process is skipped to either the end of the current text, or the next unskippable section of the current text. Declaration public void SkipWriter(bool skipShowAnimation = true) Parameters Type Name Description bool skipShowAnimation | Edit this page View Source StartWriter() Start (or resume) writing. Declaration public void StartWriter() | Edit this page View Source StopWriter() Stop writing. Note that this does not reset the shown text. Declaration public void StopWriter() | Edit this page View Source Wait(float) Pause the writer for the given amount of seconds. Declaration public void Wait(float seconds) Parameters Type Name Description float seconds The amount of time to wait. Exceptions Type Condition ArgumentOutOfRangeException Throws if seconds is less than zero. | Edit this page View Source WaitUntil(Func<bool>) Pause the writer until the given condition evaluates to true. Declaration public void WaitUntil(Func<bool> condition) Parameters Type Name Description Func<bool> condition The condition to wait for."
  },
  "api/TMPEffects.Components.html": {
    "href": "api/TMPEffects.Components.html",
    "title": "Namespace TMPEffects.Components | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.Components Classes TMPAnimator Animates the character of a TMP_Text component. TMPEffectComponent Base class for TMPAnimator and TMPWriter. TMPWriter Shows / hides the characters of a TMP_Text component over time, and allows you to raise events and commands at specific indices. TMPWriter.Delays Stores the various delays along with their TMPWriter.DelayType of a TMPWriter. Enums TMPWriter.DelayType The type of delay. Either a percentage of the normal delay (delay) or a raw value in seconds."
  },
  "api/TMPEffects.Databases.AnimationDatabase.TMPAnimationDatabase.html": {
    "href": "api/TMPEffects.Databases.AnimationDatabase.TMPAnimationDatabase.html",
    "title": "Class TMPAnimationDatabase | TMPEffects documentation",
    "keywords": "Class TMPAnimationDatabase Stores TMPAnimation, TMPShowAnimation and TMPHideAnimation animations. Inheritance object TMPEffectDatabase<ITMPAnimation> TMPAnimationDatabase Implements ITMPEffectDatabase<ITMPAnimation> ITMPEffectDatabase INotifyObjectChanged Inherited Members TMPEffectDatabase<ITMPAnimation>.ObjectChanged TMPEffectDatabase<ITMPAnimation>.OnDestroy() TMPEffectDatabase<ITMPAnimation>.RaiseDatabaseChanged() Namespace: TMPEffects.Databases.AnimationDatabase Assembly: .dll Syntax public class TMPAnimationDatabase : TMPEffectDatabase<ITMPAnimation>, ITMPEffectDatabase<ITMPAnimation>, ITMPEffectDatabase, INotifyObjectChanged Properties | Edit this page View Source BasicAnimationDatabase The backing TMPBasicAnimationDatabase used. Declaration public TMPBasicAnimationDatabase BasicAnimationDatabase { get; } Property Value Type Description TMPBasicAnimationDatabase | Edit this page View Source HideAnimationDatabase The backing TMPHideAnimationDatabase used. Declaration public TMPHideAnimationDatabase HideAnimationDatabase { get; } Property Value Type Description TMPHideAnimationDatabase | Edit this page View Source ShowAnimationDatabase The backing TMPShowAnimationDatabase used. Declaration public TMPShowAnimationDatabase ShowAnimationDatabase { get; } Property Value Type Description TMPShowAnimationDatabase Methods | Edit this page View Source ContainsEffect(string) Check whether this database contains an animation associated with the given name. Declaration public override bool ContainsEffect(string name) Parameters Type Name Description string name The identifier of the animation. Returns Type Description bool true if this database contains an animation associated with the given name; false otherwise. Overrides TMPEffectDatabase<ITMPAnimation>.ContainsEffect(string) | Edit this page View Source ContainsEffect(string, TMPAnimationType) Check whether this database contains an animation associated with the given name. Declaration public bool ContainsEffect(string name, TMPAnimationType type) Parameters Type Name Description string name The identifier of the animation. TMPAnimationType type The type of animation. Returns Type Description bool true if this database contains an animation associated with the given name; false otherwise. | Edit this page View Source GetEffect(string) Get the animation associated with the given name. Declaration public override ITMPAnimation GetEffect(string name) Parameters Type Name Description string name The identifier of the animation. Returns Type Description ITMPAnimation The animation associated with the given name. Overrides TMPEffectDatabase<ITMPAnimation>.GetEffect(string) Exceptions Type Condition KeyNotFoundException InvalidOperationException | Edit this page View Source GetEffect(string, TMPAnimationType) Get the animation associated with the given name. Declaration public ITMPAnimation GetEffect(string name, TMPAnimationType type) Parameters Type Name Description string name The identifier of the animation. TMPAnimationType type The type of animation. Returns Type Description ITMPAnimation The animation associated with the given name. Exceptions Type Condition KeyNotFoundException InvalidOperationException | Edit this page View Source OnValidate() Declaration protected override void OnValidate() Overrides TMPEffectDatabase<ITMPAnimation>.OnValidate() Implements ITMPEffectDatabase<T> ITMPEffectDatabase INotifyObjectChanged"
  },
  "api/TMPEffects.Databases.AnimationDatabase.TMPAnimationDatabaseBase-1.html": {
    "href": "api/TMPEffects.Databases.AnimationDatabase.TMPAnimationDatabaseBase-1.html",
    "title": "Class TMPAnimationDatabaseBase<T> | TMPEffects documentation",
    "keywords": "Class TMPAnimationDatabaseBase<T> Base class for databases storing ITMPAnimation. Inheritance object TMPEffectDatabase<T> TMPAnimationDatabaseBase<T> TMPBasicAnimationDatabase TMPHideAnimationDatabase TMPShowAnimationDatabase Implements ITMPEffectDatabase<T> ITMPEffectDatabase INotifyObjectChanged Inherited Members TMPEffectDatabase<T>.ObjectChanged TMPEffectDatabase<T>.ContainsEffect(string) TMPEffectDatabase<T>.GetEffect(string) TMPEffectDatabase<T>.OnValidate() TMPEffectDatabase<T>.OnDestroy() TMPEffectDatabase<T>.RaiseDatabaseChanged() Namespace: TMPEffects.Databases.AnimationDatabase Assembly: .dll Syntax public abstract class TMPAnimationDatabaseBase<T> : TMPEffectDatabase<T>, ITMPEffectDatabase<T>, ITMPEffectDatabase, INotifyObjectChanged where T : ITMPAnimation Type Parameters Name Description T Implements ITMPEffectDatabase<T> ITMPEffectDatabase INotifyObjectChanged"
  },
  "api/TMPEffects.Databases.AnimationDatabase.TMPBasicAnimationDatabase.html": {
    "href": "api/TMPEffects.Databases.AnimationDatabase.TMPBasicAnimationDatabase.html",
    "title": "Class TMPBasicAnimationDatabase | TMPEffects documentation",
    "keywords": "Class TMPBasicAnimationDatabase Stores TMPAnimation. Inheritance object TMPEffectDatabase<TMPAnimation> TMPAnimationDatabaseBase<TMPAnimation> TMPBasicAnimationDatabase Implements ITMPEffectDatabase<TMPAnimation> ITMPEffectDatabase INotifyObjectChanged Inherited Members TMPEffectDatabase<TMPAnimation>.ObjectChanged TMPEffectDatabase<TMPAnimation>.OnValidate() TMPEffectDatabase<TMPAnimation>.OnDestroy() TMPEffectDatabase<TMPAnimation>.RaiseDatabaseChanged() Namespace: TMPEffects.Databases.AnimationDatabase Assembly: .dll Syntax public class TMPBasicAnimationDatabase : TMPAnimationDatabaseBase<TMPAnimation>, ITMPEffectDatabase<TMPAnimation>, ITMPEffectDatabase, INotifyObjectChanged Methods | Edit this page View Source ContainsEffect(string) Check whether this database contains an animation associated with the given name. Declaration public override bool ContainsEffect(string name) Parameters Type Name Description string name The identifier of the animation. Returns Type Description bool true if this database contains an animation associated with the given name; false otherwise. Overrides TMPEffectDatabase<TMPAnimation>.ContainsEffect(string) | Edit this page View Source GetEffect(string) Get the animation associated with the given name. Declaration public override TMPAnimation GetEffect(string name) Parameters Type Name Description string name The identifier of the animation. Returns Type Description TMPAnimation The animation associated with the given name. Overrides TMPEffectDatabase<TMPAnimation>.GetEffect(string) Exceptions Type Condition KeyNotFoundException InvalidOperationException Implements ITMPEffectDatabase<T> ITMPEffectDatabase INotifyObjectChanged"
  },
  "api/TMPEffects.Databases.AnimationDatabase.TMPHideAnimationDatabase.html": {
    "href": "api/TMPEffects.Databases.AnimationDatabase.TMPHideAnimationDatabase.html",
    "title": "Class TMPHideAnimationDatabase | TMPEffects documentation",
    "keywords": "Class TMPHideAnimationDatabase Stores TMPHideAnimation. Inheritance object TMPEffectDatabase<TMPHideAnimation> TMPAnimationDatabaseBase<TMPHideAnimation> TMPHideAnimationDatabase Implements ITMPEffectDatabase<TMPHideAnimation> ITMPEffectDatabase INotifyObjectChanged Inherited Members TMPEffectDatabase<TMPHideAnimation>.ObjectChanged TMPEffectDatabase<TMPHideAnimation>.OnValidate() TMPEffectDatabase<TMPHideAnimation>.OnDestroy() TMPEffectDatabase<TMPHideAnimation>.RaiseDatabaseChanged() Namespace: TMPEffects.Databases.AnimationDatabase Assembly: .dll Syntax public class TMPHideAnimationDatabase : TMPAnimationDatabaseBase<TMPHideAnimation>, ITMPEffectDatabase<TMPHideAnimation>, ITMPEffectDatabase, INotifyObjectChanged Methods | Edit this page View Source ContainsEffect(string) Check whether this database contains an animation associated with the given name. Declaration public override bool ContainsEffect(string name) Parameters Type Name Description string name The identifier of the animation. Returns Type Description bool true if this database contains an animation associated with the given name; false otherwise. Overrides TMPEffectDatabase<TMPHideAnimation>.ContainsEffect(string) | Edit this page View Source GetEffect(string) Get the animation associated with the given name. Declaration public override TMPHideAnimation GetEffect(string name) Parameters Type Name Description string name The identifier of the animation. Returns Type Description TMPHideAnimation The animation associated with the given name. Overrides TMPEffectDatabase<TMPHideAnimation>.GetEffect(string) Exceptions Type Condition KeyNotFoundException InvalidOperationException Implements ITMPEffectDatabase<T> ITMPEffectDatabase INotifyObjectChanged"
  },
  "api/TMPEffects.Databases.AnimationDatabase.TMPShowAnimationDatabase.html": {
    "href": "api/TMPEffects.Databases.AnimationDatabase.TMPShowAnimationDatabase.html",
    "title": "Class TMPShowAnimationDatabase | TMPEffects documentation",
    "keywords": "Class TMPShowAnimationDatabase Stores TMPShowAnimation. Inheritance object TMPEffectDatabase<TMPShowAnimation> TMPAnimationDatabaseBase<TMPShowAnimation> TMPShowAnimationDatabase Implements ITMPEffectDatabase<TMPShowAnimation> ITMPEffectDatabase INotifyObjectChanged Inherited Members TMPEffectDatabase<TMPShowAnimation>.ObjectChanged TMPEffectDatabase<TMPShowAnimation>.OnValidate() TMPEffectDatabase<TMPShowAnimation>.OnDestroy() TMPEffectDatabase<TMPShowAnimation>.RaiseDatabaseChanged() Namespace: TMPEffects.Databases.AnimationDatabase Assembly: .dll Syntax public class TMPShowAnimationDatabase : TMPAnimationDatabaseBase<TMPShowAnimation>, ITMPEffectDatabase<TMPShowAnimation>, ITMPEffectDatabase, INotifyObjectChanged Methods | Edit this page View Source ContainsEffect(string) Check whether this database contains an animation associated with the given name. Declaration public override bool ContainsEffect(string name) Parameters Type Name Description string name The identifier of the animation. Returns Type Description bool true if this database contains an animation associated with the given name; false otherwise. Overrides TMPEffectDatabase<TMPShowAnimation>.ContainsEffect(string) | Edit this page View Source GetEffect(string) Get the animation associated with the given name. Declaration public override TMPShowAnimation GetEffect(string name) Parameters Type Name Description string name The identifier of the animation. Returns Type Description TMPShowAnimation The animation associated with the given name. Overrides TMPEffectDatabase<TMPShowAnimation>.GetEffect(string) Exceptions Type Condition KeyNotFoundException InvalidOperationException Implements ITMPEffectDatabase<T> ITMPEffectDatabase INotifyObjectChanged"
  },
  "api/TMPEffects.Databases.AnimationDatabase.html": {
    "href": "api/TMPEffects.Databases.AnimationDatabase.html",
    "title": "Namespace TMPEffects.Databases.AnimationDatabase | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.Databases.AnimationDatabase Classes TMPAnimationDatabase Stores TMPAnimation, TMPShowAnimation and TMPHideAnimation animations. TMPAnimationDatabaseBase<T> Base class for databases storing ITMPAnimation. TMPBasicAnimationDatabase Stores TMPAnimation. TMPHideAnimationDatabase Stores TMPHideAnimation. TMPShowAnimationDatabase Stores TMPShowAnimation."
  },
  "api/TMPEffects.Databases.CommandDatabase.TMPCommandDatabase.html": {
    "href": "api/TMPEffects.Databases.CommandDatabase.TMPCommandDatabase.html",
    "title": "Class TMPCommandDatabase | TMPEffects documentation",
    "keywords": "Class TMPCommandDatabase Stores TMPCommand. Inheritance object TMPEffectDatabase<TMPCommand> TMPCommandDatabase Implements ITMPEffectDatabase<TMPCommand> ITMPEffectDatabase INotifyObjectChanged Inherited Members TMPEffectDatabase<TMPCommand>.ObjectChanged TMPEffectDatabase<TMPCommand>.OnValidate() TMPEffectDatabase<TMPCommand>.OnDestroy() TMPEffectDatabase<TMPCommand>.RaiseDatabaseChanged() Namespace: TMPEffects.Databases.CommandDatabase Assembly: .dll Syntax public class TMPCommandDatabase : TMPEffectDatabase<TMPCommand>, ITMPEffectDatabase<TMPCommand>, ITMPEffectDatabase, INotifyObjectChanged Methods | Edit this page View Source ContainsEffect(string) Check whether this database contains a command associated with the given name. Declaration public override bool ContainsEffect(string name) Parameters Type Name Description string name The identifier of the command. Returns Type Description bool true if this database contains a command associated with the given name; false otherwise. Overrides TMPEffectDatabase<TMPCommand>.ContainsEffect(string) | Edit this page View Source GetEffect(string) Get the command associated with the given name. Declaration public override TMPCommand GetEffect(string name) Parameters Type Name Description string name The identifier of the command. Returns Type Description TMPCommand The command associated with the given name. Overrides TMPEffectDatabase<TMPCommand>.GetEffect(string) Exceptions Type Condition KeyNotFoundException InvalidOperationException Implements ITMPEffectDatabase<T> ITMPEffectDatabase INotifyObjectChanged"
  },
  "api/TMPEffects.Databases.CommandDatabase.html": {
    "href": "api/TMPEffects.Databases.CommandDatabase.html",
    "title": "Namespace TMPEffects.Databases.CommandDatabase | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.Databases.CommandDatabase Classes TMPCommandDatabase Stores TMPCommand."
  },
  "api/TMPEffects.Databases.ITMPEffectDatabase-1.html": {
    "href": "api/TMPEffects.Databases.ITMPEffectDatabase-1.html",
    "title": "Interface ITMPEffectDatabase<T> | TMPEffects documentation",
    "keywords": "Interface ITMPEffectDatabase<T> Base interface for effect databases. Inherited Members ITMPEffectDatabase.ContainsEffect(string) Namespace: TMPEffects.Databases Assembly: .dll Syntax public interface ITMPEffectDatabase<out T> : ITMPEffectDatabase Type Parameters Name Description T Type of effects contained in this database. Methods | Edit this page View Source GetEffect(string) Get the effect associated with the given name. Declaration T GetEffect(string name) Parameters Type Name Description string name The identifier of the effect. Returns Type Description T The effect associated with the given name. Exceptions Type Condition KeyNotFoundException"
  },
  "api/TMPEffects.Databases.ITMPEffectDatabase.html": {
    "href": "api/TMPEffects.Databases.ITMPEffectDatabase.html",
    "title": "Interface ITMPEffectDatabase | TMPEffects documentation",
    "keywords": "Interface ITMPEffectDatabase Base interface for effect databases. Namespace: TMPEffects.Databases Assembly: .dll Syntax public interface ITMPEffectDatabase Methods | Edit this page View Source ContainsEffect(string) Check whether this database contains an effect associated with the given name. Declaration bool ContainsEffect(string name) Parameters Type Name Description string name The identifier of the effect. Returns Type Description bool true if this database contains an effect associated with the given name; false otherwise."
  },
  "api/TMPEffects.Databases.TMPEffectDatabase-1.html": {
    "href": "api/TMPEffects.Databases.TMPEffectDatabase-1.html",
    "title": "Class TMPEffectDatabase<T> | TMPEffects documentation",
    "keywords": "Class TMPEffectDatabase<T> Base class for all databases. Inheritance object TMPEffectDatabase<T> TMPAnimationDatabase TMPAnimationDatabaseBase<T> TMPCommandDatabase Implements ITMPEffectDatabase<T> ITMPEffectDatabase INotifyObjectChanged Namespace: TMPEffects.Databases Assembly: .dll Syntax public abstract class TMPEffectDatabase<T> : ScriptableObject, ITMPEffectDatabase<T>, ITMPEffectDatabase, INotifyObjectChanged Type Parameters Name Description T The type of effect stored in this database. Methods | Edit this page View Source ContainsEffect(string) Check whether this database contains an effect associated with the given name. Declaration public abstract bool ContainsEffect(string name) Parameters Type Name Description string name The identifier of the effect. Returns Type Description bool true if this database contains an effect associated with the given name; false otherwise. | Edit this page View Source GetEffect(string) Get the effect associated with the given name. Declaration public abstract T GetEffect(string name) Parameters Type Name Description string name The identifier of the effect. Returns Type Description T The effect associated with the given name. Exceptions Type Condition KeyNotFoundException | Edit this page View Source OnDestroy() Declaration protected virtual void OnDestroy() | Edit this page View Source OnValidate() Declaration protected virtual void OnValidate() | Edit this page View Source RaiseDatabaseChanged() Declaration protected void RaiseDatabaseChanged() Events | Edit this page View Source ObjectChanged Declaration public event ObjectChangedEventHandler ObjectChanged Event Type Type Description ObjectChangedEventHandler Implements ITMPEffectDatabase<T> ITMPEffectDatabase INotifyObjectChanged"
  },
  "api/TMPEffects.Databases.html": {
    "href": "api/TMPEffects.Databases.html",
    "title": "Namespace TMPEffects.Databases | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.Databases Classes TMPEffectDatabase<T> Base class for all databases. Interfaces ITMPEffectDatabase Base interface for effect databases. ITMPEffectDatabase<T> Base interface for effect databases."
  },
  "api/TMPEffects.EffectCategories.TMPAnimationCategory.html": {
    "href": "api/TMPEffects.EffectCategories.TMPAnimationCategory.html",
    "title": "Class TMPAnimationCategory | TMPEffects documentation",
    "keywords": "Class TMPAnimationCategory Category for animations. Inheritance object TMPEffectCategory TMPEffectCategory<ITMPAnimation> TMPAnimationCategory Implements ITMPTagValidator ITMPPrefixSupplier ITMPEffectDatabase<ITMPAnimation> ITMPEffectDatabase Inherited Members TMPEffectCategory.Prefix TMPEffectCategory.prefix object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.EffectCategories Assembly: .dll Syntax public class TMPAnimationCategory : TMPEffectCategory<ITMPAnimation>, ITMPTagValidator, ITMPPrefixSupplier, ITMPEffectDatabase<ITMPAnimation>, ITMPEffectDatabase Constructors | Edit this page View Source TMPAnimationCategory(char, ITMPEffectDatabase<ITMPAnimation>) Declaration public TMPAnimationCategory(char prefix, ITMPEffectDatabase<ITMPAnimation> database) Parameters Type Name Description char prefix ITMPEffectDatabase<ITMPAnimation> database Methods | Edit this page View Source ContainsEffect(string) Check whether this database contains an effect associated with the given name. Declaration public override bool ContainsEffect(string name) Parameters Type Name Description string name The identifier of the effect. Returns Type Description bool true if this database contains an effect associated with the given name; false otherwise. Overrides TMPEffectCategory<ITMPAnimation>.ContainsEffect(string) | Edit this page View Source GetEffect(string) Get the effect associated with the given name. Declaration public override ITMPAnimation GetEffect(string name) Parameters Type Name Description string name The identifier of the effect. Returns Type Description ITMPAnimation The effect associated with the given name. Overrides TMPEffectCategory<ITMPAnimation>.GetEffect(string) Exceptions Type Condition KeyNotFoundException | Edit this page View Source ValidateOpenTag(TagInfo, out TMPEffectTag, out int) Validate a given ParsingUtility.TagInfo. MUST be of type Open. Declaration public override bool ValidateOpenTag(ParsingUtility.TagInfo tagInfo, out TMPEffectTag data, out int endIndex) Parameters Type Name Description ParsingUtility.TagInfo tagInfo Information about the tag. TMPEffectTag data Assuming the tag is validated, this will be set to the created TMPEffectTag; otherwise it will be null. int endIndex Assuming the tag is validated, this will be set to the endIndex of the tag. TODO this arguably exceeds ITMPTagValidators responsibilities Returns Type Description bool true if the tag is successfully validated; false otherwise. Overrides TMPEffectCategory.ValidateOpenTag(ParsingUtility.TagInfo, out TMPEffectTag, out int) Exceptions Type Condition ArgumentException | Edit this page View Source ValidateTag(TMPEffectTag) Validate a given TMPEffectTag. Declaration public override bool ValidateTag(TMPEffectTag tag) Parameters Type Name Description TMPEffectTag tag Information about the tag. Returns Type Description bool true if the tag is successfully validated; false otherwise. Overrides TMPEffectCategory.ValidateTag(TMPEffectTag) | Edit this page View Source ValidateTag(TagInfo) Validate a given ParsingUtility.TagInfo. Declaration public override bool ValidateTag(ParsingUtility.TagInfo tagInfo) Parameters Type Name Description ParsingUtility.TagInfo tagInfo Information about the tag. Returns Type Description bool true if the tag is successfully validated; false otherwise. Overrides TMPEffectCategory.ValidateTag(ParsingUtility.TagInfo) Implements ITMPTagValidator ITMPPrefixSupplier ITMPEffectDatabase<T> ITMPEffectDatabase"
  },
  "api/TMPEffects.EffectCategories.TMPCommandCategory.html": {
    "href": "api/TMPEffects.EffectCategories.TMPCommandCategory.html",
    "title": "Class TMPCommandCategory | TMPEffects documentation",
    "keywords": "Class TMPCommandCategory Category for commands. Inheritance object TMPEffectCategory TMPEffectCategory<ITMPCommand> TMPCommandCategory Implements ITMPTagValidator ITMPPrefixSupplier ITMPEffectDatabase<ITMPCommand> ITMPEffectDatabase Inherited Members TMPEffectCategory.Prefix TMPEffectCategory.prefix object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.EffectCategories Assembly: .dll Syntax public class TMPCommandCategory : TMPEffectCategory<ITMPCommand>, ITMPTagValidator, ITMPPrefixSupplier, ITMPEffectDatabase<ITMPCommand>, ITMPEffectDatabase Constructors | Edit this page View Source TMPCommandCategory(char, ITMPEffectDatabase<ITMPCommand>) Declaration public TMPCommandCategory(char prefix, ITMPEffectDatabase<ITMPCommand> database) Parameters Type Name Description char prefix ITMPEffectDatabase<ITMPCommand> database Methods | Edit this page View Source ContainsEffect(string) Check whether this database contains an effect associated with the given name. Declaration public override bool ContainsEffect(string name) Parameters Type Name Description string name The identifier of the effect. Returns Type Description bool true if this database contains an effect associated with the given name; false otherwise. Overrides TMPEffectCategory<ITMPCommand>.ContainsEffect(string) | Edit this page View Source GetEffect(string) Get the effect associated with the given name. Declaration public override ITMPCommand GetEffect(string name) Parameters Type Name Description string name The identifier of the effect. Returns Type Description ITMPCommand The effect associated with the given name. Overrides TMPEffectCategory<ITMPCommand>.GetEffect(string) Exceptions Type Condition KeyNotFoundException | Edit this page View Source ValidateOpenTag(TagInfo, out TMPEffectTag, out int) Validate a given ParsingUtility.TagInfo. MUST be of type Open. Declaration public override bool ValidateOpenTag(ParsingUtility.TagInfo tagInfo, out TMPEffectTag data, out int endIndex) Parameters Type Name Description ParsingUtility.TagInfo tagInfo Information about the tag. TMPEffectTag data Assuming the tag is validated, this will be set to the created TMPEffectTag; otherwise it will be null. int endIndex Assuming the tag is validated, this will be set to the endIndex of the tag. TODO this arguably exceeds ITMPTagValidators responsibilities Returns Type Description bool true if the tag is successfully validated; false otherwise. Overrides TMPEffectCategory.ValidateOpenTag(ParsingUtility.TagInfo, out TMPEffectTag, out int) Exceptions Type Condition ArgumentException | Edit this page View Source ValidateTag(TMPEffectTag) Validate a given TMPEffectTag. Declaration public override bool ValidateTag(TMPEffectTag tag) Parameters Type Name Description TMPEffectTag tag Information about the tag. Returns Type Description bool true if the tag is successfully validated; false otherwise. Overrides TMPEffectCategory.ValidateTag(TMPEffectTag) | Edit this page View Source ValidateTag(TagInfo) Validate a given ParsingUtility.TagInfo. Declaration public override bool ValidateTag(ParsingUtility.TagInfo tagInfo) Parameters Type Name Description ParsingUtility.TagInfo tagInfo Information about the tag. Returns Type Description bool true if the tag is successfully validated; false otherwise. Overrides TMPEffectCategory.ValidateTag(ParsingUtility.TagInfo) Implements ITMPTagValidator ITMPPrefixSupplier ITMPEffectDatabase<T> ITMPEffectDatabase"
  },
  "api/TMPEffects.EffectCategories.TMPEffectCategory-1.html": {
    "href": "api/TMPEffects.EffectCategories.TMPEffectCategory-1.html",
    "title": "Class TMPEffectCategory<TEffect> | TMPEffects documentation",
    "keywords": "Class TMPEffectCategory<TEffect> Base class for all effect categories. Inheritance object TMPEffectCategory TMPEffectCategory<TEffect> TMPAnimationCategory TMPCommandCategory Implements ITMPTagValidator ITMPPrefixSupplier ITMPEffectDatabase<TEffect> ITMPEffectDatabase Inherited Members TMPEffectCategory.Prefix TMPEffectCategory.prefix TMPEffectCategory.ValidateOpenTag(ParsingUtility.TagInfo, out TMPEffectTag, out int) TMPEffectCategory.ValidateTag(TMPEffectTag) TMPEffectCategory.ValidateTag(ParsingUtility.TagInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.EffectCategories Assembly: .dll Syntax public abstract class TMPEffectCategory<TEffect> : TMPEffectCategory, ITMPTagValidator, ITMPPrefixSupplier, ITMPEffectDatabase<TEffect>, ITMPEffectDatabase Type Parameters Name Description TEffect Constructors | Edit this page View Source TMPEffectCategory(char) Declaration public TMPEffectCategory(char prefix) Parameters Type Name Description char prefix Methods | Edit this page View Source ContainsEffect(string) Check whether this database contains an effect associated with the given name. Declaration public abstract bool ContainsEffect(string name) Parameters Type Name Description string name The identifier of the effect. Returns Type Description bool true if this database contains an effect associated with the given name; false otherwise. | Edit this page View Source GetEffect(string) Get the effect associated with the given name. Declaration public abstract TEffect GetEffect(string name) Parameters Type Name Description string name The identifier of the effect. Returns Type Description TEffect The effect associated with the given name. Exceptions Type Condition KeyNotFoundException Implements ITMPTagValidator ITMPPrefixSupplier ITMPEffectDatabase<T> ITMPEffectDatabase"
  },
  "api/TMPEffects.EffectCategories.TMPEffectCategory.html": {
    "href": "api/TMPEffects.EffectCategories.TMPEffectCategory.html",
    "title": "Class TMPEffectCategory | TMPEffects documentation",
    "keywords": "Class TMPEffectCategory Base class for all effect categories. Inheritance object TMPEffectCategory TMPEffectCategory<TEffect> TMPEventCategory Implements ITMPTagValidator ITMPPrefixSupplier Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.EffectCategories Assembly: .dll Syntax public abstract class TMPEffectCategory : ITMPTagValidator, ITMPPrefixSupplier Constructors | Edit this page View Source TMPEffectCategory(char) Declaration public TMPEffectCategory(char prefix) Parameters Type Name Description char prefix Fields | Edit this page View Source prefix Declaration protected readonly char prefix Field Value Type Description char Properties | Edit this page View Source Prefix The prefix associated with this category. Declaration public char Prefix { get; } Property Value Type Description char Methods | Edit this page View Source ValidateOpenTag(TagInfo, out TMPEffectTag, out int) Validate a given ParsingUtility.TagInfo. MUST be of type Open. Declaration public abstract bool ValidateOpenTag(ParsingUtility.TagInfo tagInfo, out TMPEffectTag data, out int endIndex) Parameters Type Name Description ParsingUtility.TagInfo tagInfo Information about the tag. TMPEffectTag data Assuming the tag is validated, this will be set to the created TMPEffectTag; otherwise it will be null. int endIndex Assuming the tag is validated, this will be set to the endIndex of the tag. TODO this arguably exceeds ITMPTagValidators responsibilities Returns Type Description bool true if the tag is successfully validated; false otherwise. Exceptions Type Condition ArgumentException | Edit this page View Source ValidateTag(TMPEffectTag) Validate a given TMPEffectTag. Declaration public abstract bool ValidateTag(TMPEffectTag tag) Parameters Type Name Description TMPEffectTag tag Information about the tag. Returns Type Description bool true if the tag is successfully validated; false otherwise. | Edit this page View Source ValidateTag(TagInfo) Validate a given ParsingUtility.TagInfo. Declaration public abstract bool ValidateTag(ParsingUtility.TagInfo tagInfo) Parameters Type Name Description ParsingUtility.TagInfo tagInfo Information about the tag. Returns Type Description bool true if the tag is successfully validated; false otherwise. Implements ITMPTagValidator ITMPPrefixSupplier"
  },
  "api/TMPEffects.EffectCategories.TMPEventCategory.html": {
    "href": "api/TMPEffects.EffectCategories.TMPEventCategory.html",
    "title": "Class TMPEventCategory | TMPEffects documentation",
    "keywords": "Class TMPEventCategory Category for events. Inheritance object TMPEffectCategory TMPEventCategory Implements ITMPTagValidator ITMPPrefixSupplier Inherited Members TMPEffectCategory.Prefix TMPEffectCategory.prefix object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.EffectCategories Assembly: .dll Syntax public class TMPEventCategory : TMPEffectCategory, ITMPTagValidator, ITMPPrefixSupplier Constructors | Edit this page View Source TMPEventCategory(char) Declaration public TMPEventCategory(char prefix) Parameters Type Name Description char prefix Methods | Edit this page View Source ValidateOpenTag(TagInfo, out TMPEffectTag, out int) Validate a given ParsingUtility.TagInfo. MUST be of type Open. Declaration public override bool ValidateOpenTag(ParsingUtility.TagInfo tagInfo, out TMPEffectTag data, out int endIndex) Parameters Type Name Description ParsingUtility.TagInfo tagInfo Information about the tag. TMPEffectTag data Assuming the tag is validated, this will be set to the created TMPEffectTag; otherwise it will be null. int endIndex Assuming the tag is validated, this will be set to the endIndex of the tag. TODO this arguably exceeds ITMPTagValidators responsibilities Returns Type Description bool true if the tag is successfully validated; false otherwise. Overrides TMPEffectCategory.ValidateOpenTag(ParsingUtility.TagInfo, out TMPEffectTag, out int) Exceptions Type Condition ArgumentException | Edit this page View Source ValidateTag(TMPEffectTag) Validate a given TMPEffectTag. Declaration public override bool ValidateTag(TMPEffectTag tag) Parameters Type Name Description TMPEffectTag tag Information about the tag. Returns Type Description bool true if the tag is successfully validated; false otherwise. Overrides TMPEffectCategory.ValidateTag(TMPEffectTag) | Edit this page View Source ValidateTag(TagInfo) Validate a given ParsingUtility.TagInfo. Declaration public override bool ValidateTag(ParsingUtility.TagInfo tagInfo) Parameters Type Name Description ParsingUtility.TagInfo tagInfo Information about the tag. Returns Type Description bool true if the tag is successfully validated; false otherwise. Overrides TMPEffectCategory.ValidateTag(ParsingUtility.TagInfo) Implements ITMPTagValidator ITMPPrefixSupplier"
  },
  "api/TMPEffects.EffectCategories.html": {
    "href": "api/TMPEffects.EffectCategories.html",
    "title": "Namespace TMPEffects.EffectCategories | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.EffectCategories Classes TMPAnimationCategory Category for animations. TMPCommandCategory Category for commands. TMPEffectCategory Base class for all effect categories. TMPEffectCategory<TEffect> Base class for all effect categories. TMPEventCategory Category for events."
  },
  "api/TMPEffects.Extensions.AnimationCurveUtility.html": {
    "href": "api/TMPEffects.Extensions.AnimationCurveUtility.html",
    "title": "Class AnimationCurveUtility | TMPEffects documentation",
    "keywords": "Class AnimationCurveUtility Inheritance object AnimationCurveUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.Extensions Assembly: .dll Syntax public static class AnimationCurveUtility Fields | Edit this page View Source EaseInBackPoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseInBackPoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source EaseInBouncePoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseInBouncePoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source EaseInCircPoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseInCircPoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source EaseInCubicPoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseInCubicPoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source EaseInElasticPoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseInElasticPoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source EaseInExpoPoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseInExpoPoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source EaseInOutBackPoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseInOutBackPoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source EaseInOutBouncePoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseInOutBouncePoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source EaseInOutCircPoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseInOutCircPoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source EaseInOutCubicPoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseInOutCubicPoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source EaseInOutElasticPoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseInOutElasticPoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source EaseInOutExpoPoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseInOutExpoPoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source EaseInOutQuadPoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseInOutQuadPoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source EaseInOutQuartPoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseInOutQuartPoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source EaseInOutQuintPoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseInOutQuintPoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source EaseInOutSinePoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseInOutSinePoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source EaseInQuadPoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseInQuadPoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source EaseInQuartPoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseInQuartPoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source EaseInQuintPoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseInQuintPoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source EaseInSinePoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseInSinePoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source EaseOutBackPoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseOutBackPoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source EaseOutBouncePoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseOutBouncePoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source EaseOutCircPoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseOutCircPoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source EaseOutCubicPoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseOutCubicPoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source EaseOutElasticPoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseOutElasticPoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source EaseOutExpoPoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseOutExpoPoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source EaseOutQuadPoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseOutQuadPoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source EaseOutQuartPoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseOutQuartPoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source EaseOutQuintPoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseOutQuintPoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source EaseOutSinePoints Declaration public static readonly ReadOnlyCollection<Vector2> EaseOutSinePoints Field Value Type Description ReadOnlyCollection<Vector2> | Edit this page View Source NameBezierConstructorMapping Declaration public static readonly ReadOnlyDictionary<string, Func<IEnumerable<Vector2>, AnimationCurve>> NameBezierConstructorMapping Field Value Type Description ReadOnlyDictionary<string, Func<IEnumerable<Vector2>, AnimationCurve>> | Edit this page View Source NameConstructorMapping Declaration public static readonly ReadOnlyDictionary<string, Func<AnimationCurve>> NameConstructorMapping Field Value Type Description ReadOnlyDictionary<string, Func<AnimationCurve>> | Edit this page View Source NamePointsMapping Declaration public static readonly ReadOnlyDictionary<string, ReadOnlyCollection<Vector2>> NamePointsMapping Field Value Type Description ReadOnlyDictionary<string, ReadOnlyCollection<Vector2>> Methods | Edit this page View Source Bezier(IEnumerable<Vector2>) Declaration public static AnimationCurve Bezier(IEnumerable<Vector2> points) Parameters Type Name Description IEnumerable<Vector2> points Returns Type Description AnimationCurve | Edit this page View Source Bezier(params Vector2[]) Declaration public static AnimationCurve Bezier(params Vector2[] points) Parameters Type Name Description Vector2[] points Returns Type Description AnimationCurve | Edit this page View Source CubicBezier(IEnumerable<Vector2>) Declaration public static AnimationCurve CubicBezier(IEnumerable<Vector2> points) Parameters Type Name Description IEnumerable<Vector2> points Returns Type Description AnimationCurve | Edit this page View Source CubicBezier(Vector2, Vector2, Vector2, Vector2) Declaration public static AnimationCurve CubicBezier(Vector2 startPoint, Vector2 controlPoint0, Vector2 controlPoint1, Vector2 endPoint) Parameters Type Name Description Vector2 startPoint Vector2 controlPoint0 Vector2 controlPoint1 Vector2 endPoint Returns Type Description AnimationCurve | Edit this page View Source CubicBezier(params Vector2[]) Declaration public static AnimationCurve CubicBezier(params Vector2[] points) Parameters Type Name Description Vector2[] points Returns Type Description AnimationCurve | Edit this page View Source EaseInBack() Declaration public static AnimationCurve EaseInBack() Returns Type Description AnimationCurve | Edit this page View Source EaseInBounce() Declaration public static AnimationCurve EaseInBounce() Returns Type Description AnimationCurve | Edit this page View Source EaseInCirc() Declaration public static AnimationCurve EaseInCirc() Returns Type Description AnimationCurve | Edit this page View Source EaseInCubic() Declaration public static AnimationCurve EaseInCubic() Returns Type Description AnimationCurve | Edit this page View Source EaseInElastic() Declaration public static AnimationCurve EaseInElastic() Returns Type Description AnimationCurve | Edit this page View Source EaseInExpo() Declaration public static AnimationCurve EaseInExpo() Returns Type Description AnimationCurve | Edit this page View Source EaseInOutBack() Declaration public static AnimationCurve EaseInOutBack() Returns Type Description AnimationCurve | Edit this page View Source EaseInOutBounce() Declaration public static AnimationCurve EaseInOutBounce() Returns Type Description AnimationCurve | Edit this page View Source EaseInOutCirc() Declaration public static AnimationCurve EaseInOutCirc() Returns Type Description AnimationCurve | Edit this page View Source EaseInOutCubic() Declaration public static AnimationCurve EaseInOutCubic() Returns Type Description AnimationCurve | Edit this page View Source EaseInOutElastic() Declaration public static AnimationCurve EaseInOutElastic() Returns Type Description AnimationCurve | Edit this page View Source EaseInOutExpo() Declaration public static AnimationCurve EaseInOutExpo() Returns Type Description AnimationCurve | Edit this page View Source EaseInOutQuad() Declaration public static AnimationCurve EaseInOutQuad() Returns Type Description AnimationCurve | Edit this page View Source EaseInOutQuart() Declaration public static AnimationCurve EaseInOutQuart() Returns Type Description AnimationCurve | Edit this page View Source EaseInOutQuint() Declaration public static AnimationCurve EaseInOutQuint() Returns Type Description AnimationCurve | Edit this page View Source EaseInOutSine() Declaration public static AnimationCurve EaseInOutSine() Returns Type Description AnimationCurve | Edit this page View Source EaseInQuad() Declaration public static AnimationCurve EaseInQuad() Returns Type Description AnimationCurve | Edit this page View Source EaseInQuart() Declaration public static AnimationCurve EaseInQuart() Returns Type Description AnimationCurve | Edit this page View Source EaseInQuint() Declaration public static AnimationCurve EaseInQuint() Returns Type Description AnimationCurve | Edit this page View Source EaseInSine() Declaration public static AnimationCurve EaseInSine() Returns Type Description AnimationCurve | Edit this page View Source EaseOutBack() Declaration public static AnimationCurve EaseOutBack() Returns Type Description AnimationCurve | Edit this page View Source EaseOutBounce() Declaration public static AnimationCurve EaseOutBounce() Returns Type Description AnimationCurve | Edit this page View Source EaseOutCirc() Declaration public static AnimationCurve EaseOutCirc() Returns Type Description AnimationCurve | Edit this page View Source EaseOutCubic() Declaration public static AnimationCurve EaseOutCubic() Returns Type Description AnimationCurve | Edit this page View Source EaseOutElastic() Declaration public static AnimationCurve EaseOutElastic() Returns Type Description AnimationCurve | Edit this page View Source EaseOutExpo() Declaration public static AnimationCurve EaseOutExpo() Returns Type Description AnimationCurve | Edit this page View Source EaseOutQuad() Declaration public static AnimationCurve EaseOutQuad() Returns Type Description AnimationCurve | Edit this page View Source EaseOutQuart() Declaration public static AnimationCurve EaseOutQuart() Returns Type Description AnimationCurve | Edit this page View Source EaseOutQuint() Declaration public static AnimationCurve EaseOutQuint() Returns Type Description AnimationCurve | Edit this page View Source EaseOutSine() Declaration public static AnimationCurve EaseOutSine() Returns Type Description AnimationCurve | Edit this page View Source GetInverse(AnimationCurve) Declaration public static AnimationCurve GetInverse(AnimationCurve originalCurve) Parameters Type Name Description AnimationCurve originalCurve Returns Type Description AnimationCurve | Edit this page View Source Invert(AnimationCurve) Declaration public static AnimationCurve Invert(AnimationCurve curve) Parameters Type Name Description AnimationCurve curve Returns Type Description AnimationCurve | Edit this page View Source Linear() Declaration public static AnimationCurve Linear() Returns Type Description AnimationCurve | Edit this page View Source LinearBezier(IEnumerable<Vector2>) Declaration public static AnimationCurve LinearBezier(IEnumerable<Vector2> points) Parameters Type Name Description IEnumerable<Vector2> points Returns Type Description AnimationCurve | Edit this page View Source LinearBezier(Vector2, Vector2) Declaration public static AnimationCurve LinearBezier(Vector2 start, Vector2 end) Parameters Type Name Description Vector2 start Vector2 end Returns Type Description AnimationCurve | Edit this page View Source LinearBezier(params Vector2[]) Declaration public static AnimationCurve LinearBezier(params Vector2[] points) Parameters Type Name Description Vector2[] points Returns Type Description AnimationCurve | Edit this page View Source QuadraticBezier(IEnumerable<Vector2>) Declaration public static AnimationCurve QuadraticBezier(IEnumerable<Vector2> points) Parameters Type Name Description IEnumerable<Vector2> points Returns Type Description AnimationCurve | Edit this page View Source QuadraticBezier(Vector2, Vector2, Vector2) Declaration public static AnimationCurve QuadraticBezier(Vector2 startPoint, Vector2 controlPoint, Vector2 endPoint) Parameters Type Name Description Vector2 startPoint Vector2 controlPoint Vector2 endPoint Returns Type Description AnimationCurve | Edit this page View Source QuadraticBezier(params Vector2[]) Declaration public static AnimationCurve QuadraticBezier(params Vector2[] points) Parameters Type Name Description Vector2[] points Returns Type Description AnimationCurve"
  },
  "api/TMPEffects.Extensions.Extensions.html": {
    "href": "api/TMPEffects.Extensions.Extensions.html",
    "title": "Class Extensions | TMPEffects documentation",
    "keywords": "Class Extensions Inheritance object Extensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.Extensions Assembly: .dll Syntax public static class Extensions Methods | Edit this page View Source GetOrAddComponent<T>(GameObject) Gets a reference to a component of type T on the specified GameObject. Will first add the component if not already present. Declaration public static T GetOrAddComponent<T>(this GameObject gameObject) where T : Component Parameters Type Name Description GameObject gameObject Returns Type Description T A reference to a component of the type T. Type Parameters Name Description T The type of Component to search for."
  },
  "api/TMPEffects.Extensions.html": {
    "href": "api/TMPEffects.Extensions.html",
    "title": "Namespace TMPEffects.Extensions | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.Extensions Classes AnimationCurveUtility Extensions"
  },
  "api/TMPEffects.ObjectChanged.INotifyObjectChanged.html": {
    "href": "api/TMPEffects.ObjectChanged.INotifyObjectChanged.html",
    "title": "Interface INotifyObjectChanged | TMPEffects documentation",
    "keywords": "Interface INotifyObjectChanged Notigy clients when the object changed. Namespace: TMPEffects.ObjectChanged Assembly: .dll Syntax public interface INotifyObjectChanged Events | Edit this page View Source ObjectChanged Declaration event ObjectChangedEventHandler ObjectChanged Event Type Type Description ObjectChangedEventHandler"
  },
  "api/TMPEffects.ObjectChanged.ObjectChangedEventHandler.html": {
    "href": "api/TMPEffects.ObjectChanged.ObjectChangedEventHandler.html",
    "title": "Delegate ObjectChangedEventHandler | TMPEffects documentation",
    "keywords": "Delegate ObjectChangedEventHandler Namespace: TMPEffects.ObjectChanged Assembly: .dll Syntax public delegate void ObjectChangedEventHandler(object sender) Parameters Type Name Description object sender"
  },
  "api/TMPEffects.ObjectChanged.html": {
    "href": "api/TMPEffects.ObjectChanged.html",
    "title": "Namespace TMPEffects.ObjectChanged | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.ObjectChanged Interfaces INotifyObjectChanged Notigy clients when the object changed. Delegates ObjectChangedEventHandler"
  },
  "api/TMPEffects.Parameters.GenerateParameterUtilityAttribute.html": {
    "href": "api/TMPEffects.Parameters.GenerateParameterUtilityAttribute.html",
    "title": "Class GenerateParameterUtilityAttribute | TMPEffects documentation",
    "keywords": "Class GenerateParameterUtilityAttribute Inheritance object Attribute GenerateParameterUtilityAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.Parameters Assembly: .dll Syntax public class GenerateParameterUtilityAttribute : Attribute"
  },
  "api/TMPEffects.Parameters.ParameterParsing.html": {
    "href": "api/TMPEffects.Parameters.ParameterParsing.html",
    "title": "Class ParameterParsing | TMPEffects documentation",
    "keywords": "Class ParameterParsing Inheritance object ParameterParsing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.Parameters Assembly: .dll Syntax public static class ParameterParsing Fields | Edit this page View Source ColorKeyWords Declaration public static readonly ReadOnlyDictionary<string, Color> ColorKeyWords Field Value Type Description ReadOnlyDictionary<string, Color> Methods | Edit this page View Source StringToAnchor(string, out Vector2, IDictionary<string, Vector2>, IDictionary<string, Vector2>) Declaration public static bool StringToAnchor(string str, out Vector2 result, IDictionary<string, Vector2> anchorKeywords = null, IDictionary<string, Vector2> vectorKeywords = null) Parameters Type Name Description string str Vector2 result IDictionary<string, Vector2> anchorKeywords IDictionary<string, Vector2> vectorKeywords Returns Type Description bool | Edit this page View Source StringToAnimCurve(string, out AnimationCurve, IDictionary<string, AnimationCurve>) Declaration public static bool StringToAnimCurve(string str, out AnimationCurve result, IDictionary<string, AnimationCurve> keywords = null) Parameters Type Name Description string str AnimationCurve result IDictionary<string, AnimationCurve> keywords Returns Type Description bool | Edit this page View Source StringToBool(string, out bool, IDictionary<string, bool>) Declaration public static bool StringToBool(string str, out bool result, IDictionary<string, bool> keywords = null) Parameters Type Name Description string str bool result IDictionary<string, bool> keywords Returns Type Description bool | Edit this page View Source StringToColor(string, out Color, IDictionary<string, Color>) Declaration public static bool StringToColor(string str, out Color result, IDictionary<string, Color> keywords = null) Parameters Type Name Description string str Color result IDictionary<string, Color> keywords Returns Type Description bool | Edit this page View Source StringToFloat(string, out float, IDictionary<string, float>) Declaration public static bool StringToFloat(string str, out float result, IDictionary<string, float> keywords = null) Parameters Type Name Description string str float result IDictionary<string, float> keywords Returns Type Description bool | Edit this page View Source StringToInt(string, out int, IDictionary<string, int>) Declaration public static bool StringToInt(string str, out int result, IDictionary<string, int> keywords = null) Parameters Type Name Description string str int result IDictionary<string, int> keywords Returns Type Description bool | Edit this page View Source StringToTypedVector2(string, out TypedVector2, IDictionary<string, string>) Declaration public static bool StringToTypedVector2(string str, out ParameterTypes.TypedVector2 result, IDictionary<string, string> keywords = null) Parameters Type Name Description string str ParameterTypes.TypedVector2 result IDictionary<string, string> keywords Returns Type Description bool | Edit this page View Source StringToTypedVector3(string, out TypedVector3, IDictionary<string, string>) Declaration public static bool StringToTypedVector3(string str, out ParameterTypes.TypedVector3 result, IDictionary<string, string> keywords = null) Parameters Type Name Description string str ParameterTypes.TypedVector3 result IDictionary<string, string> keywords Returns Type Description bool | Edit this page View Source StringToVector2(string, out Vector2, IDictionary<string, Vector2>) Declaration public static bool StringToVector2(string str, out Vector2 result, IDictionary<string, Vector2> keywords = null) Parameters Type Name Description string str Vector2 result IDictionary<string, Vector2> keywords Returns Type Description bool | Edit this page View Source StringToVector2Offset(string, out Vector2, IDictionary<string, Vector2>) Declaration public static bool StringToVector2Offset(string str, out Vector2 result, IDictionary<string, Vector2> keywords = null) Parameters Type Name Description string str Vector2 result IDictionary<string, Vector2> keywords Returns Type Description bool | Edit this page View Source StringToVector3(string, out Vector3, IDictionary<string, Vector3>) Declaration public static bool StringToVector3(string str, out Vector3 result, IDictionary<string, Vector3> keywords = null) Parameters Type Name Description string str Vector3 result IDictionary<string, Vector3> keywords Returns Type Description bool | Edit this page View Source StringToVector3Offset(string, out Vector3, IDictionary<string, Vector3>) Declaration public static bool StringToVector3Offset(string str, out Vector3 result, IDictionary<string, Vector3> keywords = null) Parameters Type Name Description string str Vector3 result IDictionary<string, Vector3> keywords Returns Type Description bool | Edit this page View Source StringToWaveOffset(string, out WaveOffsetType, IDictionary<string, WaveOffsetType>) Declaration public static bool StringToWaveOffset(string str, out ParameterTypes.WaveOffsetType result, IDictionary<string, ParameterTypes.WaveOffsetType> keywords = null) Parameters Type Name Description string str ParameterTypes.WaveOffsetType result IDictionary<string, ParameterTypes.WaveOffsetType> keywords Returns Type Description bool"
  },
  "api/TMPEffects.Parameters.ParameterTypes.TypedVector2.html": {
    "href": "api/TMPEffects.Parameters.ParameterTypes.TypedVector2.html",
    "title": "Struct ParameterTypes.TypedVector2 | TMPEffects documentation",
    "keywords": "Struct ParameterTypes.TypedVector2 A Vector2 with a ParameterTypes.VectorType. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: TMPEffects.Parameters Assembly: .dll Syntax [Serializable] public struct ParameterTypes.TypedVector2 Constructors | Edit this page View Source TypedVector2(VectorType, Vector2) Declaration public TypedVector2(ParameterTypes.VectorType type, Vector2 vector) Parameters Type Name Description ParameterTypes.VectorType type Vector2 vector Fields | Edit this page View Source type Declaration public ParameterTypes.VectorType type Field Value Type Description ParameterTypes.VectorType | Edit this page View Source vector Declaration public Vector2 vector Field Value Type Description Vector2"
  },
  "api/TMPEffects.Parameters.ParameterTypes.TypedVector3.html": {
    "href": "api/TMPEffects.Parameters.ParameterTypes.TypedVector3.html",
    "title": "Struct ParameterTypes.TypedVector3 | TMPEffects documentation",
    "keywords": "Struct ParameterTypes.TypedVector3 A Vector3 with a ParameterTypes.VectorType. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: TMPEffects.Parameters Assembly: .dll Syntax [Serializable] public struct ParameterTypes.TypedVector3 Constructors | Edit this page View Source TypedVector3(VectorType, Vector3) Declaration public TypedVector3(ParameterTypes.VectorType type, Vector3 vector) Parameters Type Name Description ParameterTypes.VectorType type Vector3 vector Fields | Edit this page View Source type Declaration public ParameterTypes.VectorType type Field Value Type Description ParameterTypes.VectorType | Edit this page View Source vector Declaration public Vector3 vector Field Value Type Description Vector3"
  },
  "api/TMPEffects.Parameters.ParameterTypes.VectorType.html": {
    "href": "api/TMPEffects.Parameters.ParameterTypes.VectorType.html",
    "title": "Enum ParameterTypes.VectorType | TMPEffects documentation",
    "keywords": "Enum ParameterTypes.VectorType The different types of vectors. Namespace: TMPEffects.Parameters Assembly: .dll Syntax public enum ParameterTypes.VectorType Fields Name Description Anchor Anchor vector, in \"character space\"; (0,0) is the center, (1,1) top-right, (-1,0) center-left etc. Offset Offset vector from the original position Position Pure position (normal vector)."
  },
  "api/TMPEffects.Parameters.ParameterTypes.WaveOffsetType.html": {
    "href": "api/TMPEffects.Parameters.ParameterTypes.WaveOffsetType.html",
    "title": "Enum ParameterTypes.WaveOffsetType | TMPEffects documentation",
    "keywords": "Enum ParameterTypes.WaveOffsetType Different built-in offset types, to be used with GetWaveOffset(CharData, IAnimationContext, WaveOffsetType). Namespace: TMPEffects.Parameters Assembly: .dll Syntax public enum ParameterTypes.WaveOffsetType Fields Name Description Baseline Index Line SegmentIndex Word WorldXPos WorldYPos WorldZPos XPos YPos"
  },
  "api/TMPEffects.Parameters.ParameterTypes.html": {
    "href": "api/TMPEffects.Parameters.ParameterTypes.html",
    "title": "Class ParameterTypes | TMPEffects documentation",
    "keywords": "Class ParameterTypes Inheritance object ParameterTypes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.Parameters Assembly: .dll Syntax public static class ParameterTypes"
  },
  "api/TMPEffects.Parameters.ParameterUtility.ParseDelegate-4.html": {
    "href": "api/TMPEffects.Parameters.ParameterUtility.ParseDelegate-4.html",
    "title": "Delegate ParameterUtility.ParseDelegate<T, U, V, W> | TMPEffects documentation",
    "keywords": "Delegate ParameterUtility.ParseDelegate<T, U, V, W> Namespace: TMPEffects.Parameters Assembly: .dll Syntax public delegate W ParameterUtility.ParseDelegate<T, U, V, W>(T input, out U output, V keywords) Parameters Type Name Description T input U output V keywords Returns Type Description W Type Parameters Name Description T U V W"
  },
  "api/TMPEffects.Parameters.ParameterUtility.WaveParameters.html": {
    "href": "api/TMPEffects.Parameters.ParameterUtility.WaveParameters.html",
    "title": "Struct ParameterUtility.WaveParameters | TMPEffects documentation",
    "keywords": "Struct ParameterUtility.WaveParameters A parameter bundle that defines a AnimationUtility.Wave. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: TMPEffects.Parameters Assembly: .dll Syntax public struct ParameterUtility.WaveParameters Fields | Edit this page View Source amplitude Declaration public float? amplitude Field Value Type Description float? | Edit this page View Source crestWait Declaration public float? crestWait Field Value Type Description float? | Edit this page View Source downPeriod Declaration public float? downPeriod Field Value Type Description float? | Edit this page View Source downwardCurve Declaration public AnimationCurve downwardCurve Field Value Type Description AnimationCurve | Edit this page View Source troughWait Declaration public float? troughWait Field Value Type Description float? | Edit this page View Source upPeriod Declaration public float? upPeriod Field Value Type Description float? | Edit this page View Source upwardCurve Declaration public AnimationCurve upwardCurve Field Value Type Description AnimationCurve | Edit this page View Source wavelength Declaration public float? wavelength Field Value Type Description float? | Edit this page View Source waveuniformity Declaration public float? waveuniformity Field Value Type Description float? | Edit this page View Source wavevelocity Declaration public float? wavevelocity Field Value Type Description float?"
  },
  "api/TMPEffects.Parameters.ParameterUtility.html": {
    "href": "api/TMPEffects.Parameters.ParameterUtility.html",
    "title": "Class ParameterUtility | TMPEffects documentation",
    "keywords": "Class ParameterUtility Utility class for easy parameter handling. Inheritance object ParameterUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.Parameters Assembly: .dll Syntax public static class ParameterUtility Fields | Edit this page View Source AmplitudeAliases Declaration public static readonly string[] AmplitudeAliases Field Value Type Description string[] | Edit this page View Source AnchorKeywords Declaration public static readonly ReadOnlyDictionary<string, Vector2> AnchorKeywords Field Value Type Description ReadOnlyDictionary<string, Vector2> | Edit this page View Source BuiltInFloatKeywords A variety of built-in keywords for float parameters. Declaration public static readonly ReadOnlyDictionary<string, float> BuiltInFloatKeywords Field Value Type Description ReadOnlyDictionary<string, float> | Edit this page View Source BuiltInVector2Keywords A variety of built-in keywords for Vector2 parameters. Declaration public static readonly ReadOnlyDictionary<string, Vector2> BuiltInVector2Keywords Field Value Type Description ReadOnlyDictionary<string, Vector2> | Edit this page View Source BuiltInVector3Keywords A variety of built-in keywords for Vector3 parameters. Declaration public static readonly ReadOnlyDictionary<string, Vector3> BuiltInVector3Keywords Field Value Type Description ReadOnlyDictionary<string, Vector3> | Edit this page View Source CurveAliases Declaration public static readonly string[] CurveAliases Field Value Type Description string[] | Edit this page View Source FrequencyAliases Declaration public static readonly string[] FrequencyAliases Field Value Type Description string[] | Edit this page View Source PivotAliases Declaration public static readonly string[] PivotAliases Field Value Type Description string[] | Edit this page View Source RadiusAliases Declaration public static readonly string[] RadiusAliases Field Value Type Description string[] | Edit this page View Source SpeedAliases Declaration public static readonly string[] SpeedAliases Field Value Type Description string[] | Edit this page View Source WaveOffsetAliases Declaration public static readonly string[] WaveOffsetAliases Field Value Type Description string[] Methods | Edit this page View Source CreateWave(Wave, WaveParameters) Declaration public static AnimationUtility.Wave CreateWave(AnimationUtility.Wave wave, ParameterUtility.WaveParameters wp) Parameters Type Name Description AnimationUtility.Wave wave ParameterUtility.WaveParameters wp Returns Type Description AnimationUtility.Wave | Edit this page View Source GetWaveParameters(IDictionary<string, string>, string, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool) Declaration public static ParameterUtility.WaveParameters GetWaveParameters(IDictionary<string, string> parameters, string prefix = \"\", bool upwardCurve = true, bool downwardCurve = true, bool upPeriod = true, bool downPeriod = true, bool crestWait = true, bool troughWait = true, bool waveVelocity = true, bool waveLength = true, bool waveUniformity = true, bool amplitude = true) Parameters Type Name Description IDictionary<string, string> parameters string prefix bool upwardCurve bool downwardCurve bool upPeriod bool downPeriod bool crestWait bool troughWait bool waveVelocity bool waveLength bool waveUniformity bool amplitude Returns Type Description ParameterUtility.WaveParameters | Edit this page View Source HasArrayParameter<T>(IDictionary<string, string>, ParseDelegate<string, T, IDictionary<string, T>, bool>, string, params string[]) Declaration public static bool HasArrayParameter<T>(IDictionary<string, string> parameters, ParameterUtility.ParseDelegate<string, T, IDictionary<string, T>, bool> func, string name, params string[] aliases) Parameters Type Name Description IDictionary<string, string> parameters ParameterUtility.ParseDelegate<string, T, IDictionary<string, T>, bool> func string name string[] aliases Returns Type Description bool Type Parameters Name Description T | Edit this page View Source HasNonArrayParameter<T>(IDictionary<string, string>, ParseDelegate<string, T, IDictionary<string, T>, bool>, string, params string[]) Declaration public static bool HasNonArrayParameter<T>(IDictionary<string, string> parameters, ParameterUtility.ParseDelegate<string, T, IDictionary<string, T>, bool> func, string name, params string[] aliases) Parameters Type Name Description IDictionary<string, string> parameters ParameterUtility.ParseDelegate<string, T, IDictionary<string, T>, bool> func string name string[] aliases Returns Type Description bool Type Parameters Name Description T | Edit this page View Source ParameterDefined(IDictionary<string, string>, string, params string[]) Check if there is a well-defined parameter of the given name or aliases. A parameter is well-defined if there is exactly one of the given aliases (including the name) present in the parameters. Declaration public static bool ParameterDefined(IDictionary<string, string> parameters, string name, params string[] aliases) Parameters Type Name Description IDictionary<string, string> parameters The parameters to check. string name The name to check. string[] aliases The aliases (alternative names) to check. Returns Type Description bool true if the parameter is well-defined, false otherwise. | Edit this page View Source TryGetArrayParameter<T>(out T[], IDictionary<string, string>, ParseDelegate<string, T, IDictionary<string, T>, bool>, string, params string[]) Declaration public static bool TryGetArrayParameter<T>(out T[] value, IDictionary<string, string> parameters, ParameterUtility.ParseDelegate<string, T, IDictionary<string, T>, bool> func, string name, params string[] aliases) Parameters Type Name Description T[] value IDictionary<string, string> parameters ParameterUtility.ParseDelegate<string, T, IDictionary<string, T>, bool> func string name string[] aliases Returns Type Description bool Type Parameters Name Description T | Edit this page View Source TryGetDefinedParameter(out string, IDictionary<string, string>, string, params string[]) Check if there is a well-defined parameter of the given name or aliases. A parameter is well-defined if there is exactly one of the given aliases (including the name) present in the parameters. Declaration public static bool TryGetDefinedParameter(out string value, IDictionary<string, string> parameters, string name, params string[] aliases) Parameters Type Name Description string value Set to the name of the defined parameter if successful. IDictionary<string, string> parameters The parameters to check. string name The name to check. string[] aliases The aliases (alternative names) to check. Returns Type Description bool true if the parameter is well-defined, false otherwise. | Edit this page View Source ValidateWaveParameters(IDictionary<string, string>, string, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool) Declaration public static bool ValidateWaveParameters(IDictionary<string, string> parameters, string prefix = \"\", bool upwardCurve = true, bool downwardCurve = true, bool upPeriod = true, bool downPeriod = true, bool crestWait = true, bool troughWait = true, bool waveVelocity = true, bool waveLength = true, bool waveUniformity = true, bool amplitude = true) Parameters Type Name Description IDictionary<string, string> parameters string prefix bool upwardCurve bool downwardCurve bool upPeriod bool downPeriod bool crestWait bool troughWait bool waveVelocity bool waveLength bool waveUniformity bool amplitude Returns Type Description bool"
  },
  "api/TMPEffects.Parameters.html": {
    "href": "api/TMPEffects.Parameters.html",
    "title": "Namespace TMPEffects.Parameters | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.Parameters Classes GenerateParameterUtilityAttribute ParameterParsing ParameterTypes ParameterUtility Utility class for easy parameter handling. Structs ParameterTypes.TypedVector2 A Vector2 with a ParameterTypes.VectorType. ParameterTypes.TypedVector3 A Vector3 with a ParameterTypes.VectorType. ParameterUtility.WaveParameters A parameter bundle that defines a AnimationUtility.Wave. Enums ParameterTypes.VectorType The different types of vectors. ParameterTypes.WaveOffsetType Different built-in offset types, to be used with GetWaveOffset(CharData, IAnimationContext, WaveOffsetType). Delegates ParameterUtility.ParseDelegate<T, U, V, W>"
  },
  "api/TMPEffects.SerializedCollections.ObservableDictionary-2.html": {
    "href": "api/TMPEffects.SerializedCollections.ObservableDictionary-2.html",
    "title": "Class ObservableDictionary<TKey, TValue> | TMPEffects documentation",
    "keywords": "Class ObservableDictionary<TKey, TValue> Inheritance object ObservableDictionary<TKey, TValue> SerializedObservableDictionary<TKey, TValue> Implements IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IEnumerable INotifyObjectChanged IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.SerializedCollections Assembly: .dll Syntax [Serializable] public class ObservableDictionary<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, INotifyObjectChanged, IDisposable where TValue : INotifyObjectChanged Type Parameters Name Description TKey TValue Fields | Edit this page View Source mayRaise Declaration protected bool mayRaise Field Value Type Description bool Properties | Edit this page View Source Count Gets the number of elements contained in the ICollection<T>. Declaration public int Count { get; } Property Value Type Description int The number of elements contained in the ICollection<T>. | Edit this page View Source IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description bool true if the ICollection<T> is read-only; otherwise, false. | Edit this page View Source this[TKey] Gets or sets the element with the specified key. Declaration public TValue this[TKey key] { get; set; } Parameters Type Name Description TKey key The key of the element to get or set. Property Value Type Description TValue The element with the specified key. Exceptions Type Condition ArgumentNullException key is null. KeyNotFoundException The property is retrieved and key is not found. NotSupportedException The property is set and the IDictionary<TKey, TValue> is read-only. | Edit this page View Source Keys Gets an ICollection<T> containing the keys of the IDictionary<TKey, TValue>. Declaration public ICollection<TKey> Keys { get; } Property Value Type Description ICollection<TKey> An ICollection<T> containing the keys of the object that implements IDictionary<TKey, TValue>. | Edit this page View Source Values Gets an ICollection<T> containing the values in the IDictionary<TKey, TValue>. Declaration public ICollection<TValue> Values { get; } Property Value Type Description ICollection<TValue> An ICollection<T> containing the values in the object that implements IDictionary<TKey, TValue>. Methods | Edit this page View Source Add(KeyValuePair<TKey, TValue>) Adds an item to the ICollection<T>. Declaration public void Add(KeyValuePair<TKey, TValue> item) Parameters Type Name Description KeyValuePair<TKey, TValue> item The object to add to the ICollection<T>. Exceptions Type Condition NotSupportedException The ICollection<T> is read-only. | Edit this page View Source Add(TKey, TValue) Adds an element with the provided key and value to the IDictionary<TKey, TValue>. Declaration public void Add(TKey key, TValue value) Parameters Type Name Description TKey key The object to use as the key of the element to add. TValue value The object to use as the value of the element to add. Exceptions Type Condition ArgumentNullException key is null. ArgumentException An element with the same key already exists in the IDictionary<TKey, TValue>. NotSupportedException The IDictionary<TKey, TValue> is read-only. | Edit this page View Source Clear() Removes all items from the ICollection<T>. Declaration public void Clear() Exceptions Type Condition NotSupportedException The ICollection<T> is read-only. | Edit this page View Source Contains(KeyValuePair<TKey, TValue>) Determines whether the ICollection<T> contains a specific value. Declaration public bool Contains(KeyValuePair<TKey, TValue> item) Parameters Type Name Description KeyValuePair<TKey, TValue> item The object to locate in the ICollection<T>. Returns Type Description bool true if item is found in the ICollection<T>; otherwise, false. | Edit this page View Source ContainsKey(TKey) Determines whether the IDictionary<TKey, TValue> contains an element with the specified key. Declaration public bool ContainsKey(TKey key) Parameters Type Name Description TKey key The key to locate in the IDictionary<TKey, TValue>. Returns Type Description bool true if the IDictionary<TKey, TValue> contains an element with the key; otherwise, false. Exceptions Type Condition ArgumentNullException key is null. | Edit this page View Source CopyTo(KeyValuePair<TKey, TValue>[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. Declaration public void CopyTo(KeyValuePair<TKey, TValue>[] array, int arrayIndex) Parameters Type Name Description KeyValuePair<TKey, TValue>[] array The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. int arrayIndex The zero-based index in array at which copying begins. Exceptions Type Condition ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator() Returns Type Description IEnumerator<KeyValuePair<TKey, TValue>> An enumerator that can be used to iterate through the collection. | Edit this page View Source RaisePropertyChanged() Declaration protected void RaisePropertyChanged() | Edit this page View Source RaisePropertyChanged(object) Declaration protected void RaisePropertyChanged(object sender) Parameters Type Name Description object sender | Edit this page View Source Remove(KeyValuePair<TKey, TValue>) Removes the first occurrence of a specific object from the ICollection<T>. Declaration public bool Remove(KeyValuePair<TKey, TValue> item) Parameters Type Name Description KeyValuePair<TKey, TValue> item The object to remove from the ICollection<T>. Returns Type Description bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions Type Condition NotSupportedException The ICollection<T> is read-only. | Edit this page View Source Remove(TKey) Removes the element with the specified key from the IDictionary<TKey, TValue>. Declaration public bool Remove(TKey key) Parameters Type Name Description TKey key The key of the element to remove. Returns Type Description bool true if the element is successfully removed; otherwise, false. This method also returns false if key was not found in the original IDictionary<TKey, TValue>. Exceptions Type Condition ArgumentNullException key is null. NotSupportedException The IDictionary<TKey, TValue> is read-only. | Edit this page View Source TryGetValue(TKey, out TValue) Gets the value associated with the specified key. Declaration public bool TryGetValue(TKey key, out TValue value) Parameters Type Name Description TKey key The key whose value to get. TValue value When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description bool true if the object that implements IDictionary<TKey, TValue> contains an element with the specified key; otherwise, false. Exceptions Type Condition ArgumentNullException key is null. Events | Edit this page View Source ObjectChanged Declaration public event ObjectChangedEventHandler ObjectChanged Event Type Type Description ObjectChangedEventHandler Implements IDictionary<TKey, TValue> ICollection<T> IEnumerable<T> IEnumerable INotifyObjectChanged IDisposable"
  },
  "api/TMPEffects.SerializedCollections.SerializedDictionary-2.html": {
    "href": "api/TMPEffects.SerializedCollections.SerializedDictionary-2.html",
    "title": "Class SerializedDictionary<TKey, TValue> | TMPEffects documentation",
    "keywords": "Class SerializedDictionary<TKey, TValue> Inheritance object Dictionary<TKey, TValue> SerializedDictionary<TKey, TValue> Implements IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IDictionary ICollection IDeserializationCallback ISerializable IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IEnumerable ISerializationCallbackReceiver Inherited Members Dictionary<TKey, TValue>.Add(TKey, TValue) Dictionary<TKey, TValue>.Clear() Dictionary<TKey, TValue>.ContainsKey(TKey) Dictionary<TKey, TValue>.ContainsValue(TValue) Dictionary<TKey, TValue>.EnsureCapacity(int) Dictionary<TKey, TValue>.GetAlternateLookup<TAlternateKey>() Dictionary<TKey, TValue>.GetEnumerator() Dictionary<TKey, TValue>.OnDeserialization(object) Dictionary<TKey, TValue>.Remove(TKey) Dictionary<TKey, TValue>.Remove(TKey, out TValue) Dictionary<TKey, TValue>.TrimExcess() Dictionary<TKey, TValue>.TrimExcess(int) Dictionary<TKey, TValue>.TryAdd(TKey, TValue) Dictionary<TKey, TValue>.TryGetAlternateLookup<TAlternateKey>(out Dictionary<TKey, TValue>.AlternateLookup<TAlternateKey>) Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue) Dictionary<TKey, TValue>.Comparer Dictionary<TKey, TValue>.Count Dictionary<TKey, TValue>.Capacity Dictionary<TKey, TValue>.this[TKey] Dictionary<TKey, TValue>.Keys Dictionary<TKey, TValue>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.SerializedCollections Assembly: .dll Syntax [Serializable] public class SerializedDictionary<TKey, TValue> : Dictionary<TKey, TValue>, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IDeserializationCallback, ISerializable, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, ISerializationCallbackReceiver Type Parameters Name Description TKey TValue Properties | Edit this page View Source SerializedList Declaration public List<SerializedKeyValuePair<TKey, TValue>> SerializedList { get; set; } Property Value Type Description List<SerializedKeyValuePair<TKey, TValue>> Methods | Edit this page View Source OnAfterDeserialize() Declaration public void OnAfterDeserialize() | Edit this page View Source OnBeforeSerialize() Declaration public void OnBeforeSerialize() Implements IDictionary<TKey, TValue> ICollection<T> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IDictionary ICollection IDeserializationCallback ISerializable IDictionary<TKey, TValue> ICollection<T> IEnumerable<T> IEnumerable ISerializationCallbackReceiver"
  },
  "api/TMPEffects.SerializedCollections.SerializedDictionaryAttribute.html": {
    "href": "api/TMPEffects.SerializedCollections.SerializedDictionaryAttribute.html",
    "title": "Class SerializedDictionaryAttribute | TMPEffects documentation",
    "keywords": "Class SerializedDictionaryAttribute Inheritance object Attribute SerializedDictionaryAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.SerializedCollections Assembly: .dll Syntax [Conditional(\"UNITY_EDITOR\")] public class SerializedDictionaryAttribute : Attribute Constructors | Edit this page View Source SerializedDictionaryAttribute(string, string) Declaration public SerializedDictionaryAttribute(string keyName = null, string valueName = null) Parameters Type Name Description string keyName string valueName Fields | Edit this page View Source KeyName Declaration public readonly string KeyName Field Value Type Description string | Edit this page View Source ValueName Declaration public readonly string ValueName Field Value Type Description string"
  },
  "api/TMPEffects.SerializedCollections.SerializedKeyValuePair-2.html": {
    "href": "api/TMPEffects.SerializedCollections.SerializedKeyValuePair-2.html",
    "title": "Struct SerializedKeyValuePair<TKey, TValue> | TMPEffects documentation",
    "keywords": "Struct SerializedKeyValuePair<TKey, TValue> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: TMPEffects.SerializedCollections Assembly: .dll Syntax [Serializable] public struct SerializedKeyValuePair<TKey, TValue> Type Parameters Name Description TKey TValue Constructors | Edit this page View Source SerializedKeyValuePair(TKey, TValue) Declaration public SerializedKeyValuePair(TKey key, TValue value) Parameters Type Name Description TKey key TValue value Fields | Edit this page View Source Key Declaration public TKey Key Field Value Type Description TKey | Edit this page View Source Value Declaration public TValue Value Field Value Type Description TValue"
  },
  "api/TMPEffects.SerializedCollections.SerializedObservableDictionary-2.html": {
    "href": "api/TMPEffects.SerializedCollections.SerializedObservableDictionary-2.html",
    "title": "Class SerializedObservableDictionary<TKey, TValue> | TMPEffects documentation",
    "keywords": "Class SerializedObservableDictionary<TKey, TValue> Inheritance object ObservableDictionary<TKey, TValue> SerializedObservableDictionary<TKey, TValue> Implements INotifyObjectChanged IDisposable IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IEnumerable ISerializationCallbackReceiver Inherited Members ObservableDictionary<TKey, TValue>.mayRaise ObservableDictionary<TKey, TValue>.this[TKey] ObservableDictionary<TKey, TValue>.Keys ObservableDictionary<TKey, TValue>.Values ObservableDictionary<TKey, TValue>.Count ObservableDictionary<TKey, TValue>.IsReadOnly ObservableDictionary<TKey, TValue>.ObjectChanged ObservableDictionary<TKey, TValue>.Add(TKey, TValue) ObservableDictionary<TKey, TValue>.Add(KeyValuePair<TKey, TValue>) ObservableDictionary<TKey, TValue>.Clear() ObservableDictionary<TKey, TValue>.Contains(KeyValuePair<TKey, TValue>) ObservableDictionary<TKey, TValue>.ContainsKey(TKey) ObservableDictionary<TKey, TValue>.CopyTo(KeyValuePair<TKey, TValue>[], int) ObservableDictionary<TKey, TValue>.GetEnumerator() ObservableDictionary<TKey, TValue>.Remove(TKey) ObservableDictionary<TKey, TValue>.Remove(KeyValuePair<TKey, TValue>) ObservableDictionary<TKey, TValue>.TryGetValue(TKey, out TValue) ObservableDictionary<TKey, TValue>.Dispose() ObservableDictionary<TKey, TValue>.RaisePropertyChanged() ObservableDictionary<TKey, TValue>.RaisePropertyChanged(object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.SerializedCollections Assembly: .dll Syntax [Serializable] public class SerializedObservableDictionary<TKey, TValue> : ObservableDictionary<TKey, TValue>, INotifyObjectChanged, IDisposable, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, ISerializationCallbackReceiver where TValue : INotifyObjectChanged Type Parameters Name Description TKey TValue Properties | Edit this page View Source SerializedList Declaration public List<SerializedKeyValuePair<TKey, TValue>> SerializedList { get; set; } Property Value Type Description List<SerializedKeyValuePair<TKey, TValue>> Methods | Edit this page View Source OnAfterDeserialize() Declaration public void OnAfterDeserialize() | Edit this page View Source OnBeforeSerialize() Declaration public void OnBeforeSerialize() Implements INotifyObjectChanged IDisposable IDictionary<TKey, TValue> ICollection<T> IEnumerable<T> IEnumerable ISerializationCallbackReceiver"
  },
  "api/TMPEffects.SerializedCollections.html": {
    "href": "api/TMPEffects.SerializedCollections.html",
    "title": "Namespace TMPEffects.SerializedCollections | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.SerializedCollections Classes ObservableDictionary<TKey, TValue> SerializedDictionaryAttribute SerializedDictionary<TKey, TValue> SerializedObservableDictionary<TKey, TValue> Structs SerializedKeyValuePair<TKey, TValue>"
  },
  "api/TMPEffects.TMPAnimations.AnimationContext.html": {
    "href": "api/TMPEffects.TMPAnimations.AnimationContext.html",
    "title": "Class AnimationContext | TMPEffects documentation",
    "keywords": "Class AnimationContext Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. Inheritance object AnimationContext Implements IAnimationContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.TMPAnimations Assembly: .dll Syntax public class AnimationContext : IAnimationContext Constructors | Edit this page View Source AnimationContext(IAnimatorContext, ICharDataState, SegmentData, object) Declaration public AnimationContext(IAnimatorContext animatorContext, ICharDataState state, SegmentData segmentData, object customData) Parameters Type Name Description IAnimatorContext animatorContext ICharDataState state SegmentData segmentData object customData Fields | Edit this page View Source finishedDict Declaration public Dictionary<int, bool> finishedDict Field Value Type Description Dictionary<int, bool> Properties | Edit this page View Source AnimatorContext The context of the animating TMPAnimator. Declaration public IAnimatorContext AnimatorContext { get; set; } Property Value Type Description IAnimatorContext | Edit this page View Source CustomData The custom data object. Declaration public object CustomData { get; } Property Value Type Description object | Edit this page View Source SegmentData Data about the animation segment. Declaration public SegmentData SegmentData { get; set; } Property Value Type Description SegmentData | Edit this page View Source State The current state of the CharData, with the previous animations applied. Declaration public ICharDataState State { get; } Property Value Type Description ICharDataState Methods | Edit this page View Source FinishAnimation(CharData) Set the animation to be considered finished for the given character. Declaration public void FinishAnimation(CharData cData) Parameters Type Name Description CharData cData | Edit this page View Source Finished(int) Check if the animation is considered finished for the character at the given index. Declaration public bool Finished(int index) Parameters Type Name Description int index Returns Type Description bool | Edit this page View Source Finished(CharData) Check if the animation is considered finished for the given character. Declaration public bool Finished(CharData cData) Parameters Type Name Description CharData cData Returns Type Description bool | Edit this page View Source ResetFinishAnimation() Declaration public void ResetFinishAnimation() | Edit this page View Source ResetFinishAnimation(int) Declaration public void ResetFinishAnimation(int index) Parameters Type Name Description int index | Edit this page View Source ResetFinishAnimation(CharData) Declaration public void ResetFinishAnimation(CharData cData) Parameters Type Name Description CharData cData Implements IAnimationContext"
  },
  "api/TMPEffects.TMPAnimations.AnimationUtility.Wave.PulseExtrema.html": {
    "href": "api/TMPEffects.TMPAnimations.AnimationUtility.Wave.PulseExtrema.html",
    "title": "Enum AnimationUtility.Wave.PulseExtrema | TMPEffects documentation",
    "keywords": "Enum AnimationUtility.Wave.PulseExtrema If the wave has a CrestWait or TroughWait, PulseExtrema defines whether an extremum is passed once the wait time begins, or once it ends. Namespace: TMPEffects.TMPAnimations Assembly: .dll Syntax [Flags] public enum AnimationUtility.Wave.PulseExtrema Fields Name Description Both Early Late"
  },
  "api/TMPEffects.TMPAnimations.AnimationUtility.Wave.html": {
    "href": "api/TMPEffects.TMPAnimations.AnimationUtility.Wave.html",
    "title": "Class AnimationUtility.Wave | TMPEffects documentation",
    "keywords": "Class AnimationUtility.Wave A wave. Allows you to easily create periodic animations. You should take a look at the online documentation for this one: https://tmpeffects.luca3317.dev/docs/tmpanimator_animationutility_wave.html Inheritance object AnimationUtility.WaveBase AnimationUtility.Wave Implements ISerializationCallbackReceiver Inherited Members AnimationUtility.WaveBase.UpPeriod AnimationUtility.WaveBase.DownPeriod AnimationUtility.WaveBase.Amplitude AnimationUtility.WaveBase.Velocity AnimationUtility.WaveBase.Period AnimationUtility.WaveBase.WaveLength AnimationUtility.WaveBase.EffectiveUpPeriod AnimationUtility.WaveBase.EffectiveDownPeriod AnimationUtility.WaveBase.EffectivePeriod AnimationUtility.WaveBase.Frequency AnimationUtility.WaveBase.wavelength Namespace: TMPEffects.TMPAnimations Assembly: .dll Syntax [Serializable] public class AnimationUtility.Wave : AnimationUtility.WaveBase, ISerializationCallbackReceiver Constructors | Edit this page View Source Wave() Declaration public Wave() | Edit this page View Source Wave(AnimationCurve, AnimationCurve, float, float, float, float) Declaration public Wave(AnimationCurve upwardCurve, AnimationCurve downwardCurve, float upPeriod, float downPeriod, float amplitude, float uniformity = 1) Parameters Type Name Description AnimationCurve upwardCurve AnimationCurve downwardCurve float upPeriod float downPeriod float amplitude float uniformity | Edit this page View Source Wave(AnimationCurve, AnimationCurve, float, float, float, float, float, float) Declaration public Wave(AnimationCurve upwardCurve, AnimationCurve downwardCurve, float upPeriod, float downPeriod, float amplitude, float crestWait, float troughWait, float uniformity = 1) Parameters Type Name Description AnimationCurve upwardCurve AnimationCurve downwardCurve float upPeriod float downPeriod float amplitude float crestWait float troughWait float uniformity Properties | Edit this page View Source CrestWait How long to stay at the crest of the wave. Declaration public float CrestWait { get; set; } Property Value Type Description float | Edit this page View Source DownwardCurve The downward curve of the wave. Declaration public AnimationCurve DownwardCurve { get; set; } Property Value Type Description AnimationCurve | Edit this page View Source TroughWait How long to stay at the trough of the wave. Declaration public float TroughWait { get; set; } Property Value Type Description float | Edit this page View Source Uniformity The uniformity of the wave. Defines how much the offset passed in when evaluating the wave is considered. A visual representation of this can be found in the online documentation: https://tmpeffects.luca3317.dev/docs/tmpanimator_animationutility_wave.html Declaration public float Uniformity { get; set; } Property Value Type Description float | Edit this page View Source UpwardCurve The upward curve of the wave. Declaration public AnimationCurve UpwardCurve { get; set; } Property Value Type Description AnimationCurve Methods | Edit this page View Source Evaluate(float, float, bool) Evaluate the wave. This will automatically choose the correct way to interpret the wave. Declaration public (float Value, int Direction) Evaluate(float time, float offset, bool realtimeWait = true) Parameters Type Name Description float time The time value. float offset The offset. Affected by Uniformity. bool realtimeWait Whether to use real time (i.e. whether to use Period or EffectivePeriod). Returns Type Description (float Value, int Direction) Value: The value of the wave at the given time and offset. Direction: Whether youre currently travelling up the wave (=1) or down the wave (=-1). | Edit this page View Source EvaluateAsInvertedPulse(float, float, bool) Evaluate the wave as an inverted pulse explicitly, ignoring the TroughWait. Declaration public (float, int) EvaluateAsInvertedPulse(float time, float offset, bool realTimeWait = true) Parameters Type Name Description float time The time value. float offset The offset. Affected by Uniformity. bool realTimeWait Whether to use real time (i.e. whether to use Period or EffectivePeriod). Returns Type Description (float Value, int Direction) Item1: The value of the wave at the given time and offset. Item2: Whether youre currently travelling up the wave (=1) or down the wave (=-1). Exceptions Type Condition Exception | Edit this page View Source EvaluateAsOneDirectionalPulse(float, float, bool) Evaluate the wave as a one-directional pulse explicitly. Declaration public (float, int) EvaluateAsOneDirectionalPulse(float time, float offset, bool realTimeWait = true) Parameters Type Name Description float time The time value. float offset The offset. Affected by Uniformity. bool realTimeWait Whether to use real time (i.e. whether to use Period or EffectivePeriod). Returns Type Description (float Value, int Direction) Item1: The value of the wave at the given time and offset. Item2: Whether youre currently travelling up the wave (=1) or down the wave (=-1). Exceptions Type Condition Exception | Edit this page View Source EvaluateAsPulse(float, float, bool) Evaluate the wave as a pulse explicitly, ignoring the CrestWait. Declaration public (float, int) EvaluateAsPulse(float time, float offset, bool realTimeWait = true) Parameters Type Name Description float time The time value. float offset The offset. Affected by Uniformity. bool realTimeWait Whether to use real time (i.e. whether to use Period or EffectivePeriod). Returns Type Description (float Value, int Direction) Item1: The value of the wave at the given time and offset. Item2: Whether youre currently travelling up the wave (=1) or down the wave (=-1). Exceptions Type Condition Exception | Edit this page View Source EvaluateAsWave(float, float) Evaluate the wave as a normal wave explicitly, ignoring both TroughWait and CrestWait. Declaration public (float, int) EvaluateAsWave(float time, float offset) Parameters Type Name Description float time The time value. float offset The offset. Affected by Uniformity. Returns Type Description (float Value, int Direction) Item1: The value of the wave at the given time and offset. Item2: Whether youre currently travelling up the wave (=1) or down the wave (=-1). Exceptions Type Condition Exception | Edit this page View Source OnAfterDeserialize() Declaration public override void OnAfterDeserialize() Overrides AnimationUtility.WaveBase.OnAfterDeserialize() | Edit this page View Source OnBeforeSerialize() Declaration public override void OnBeforeSerialize() Overrides AnimationUtility.WaveBase.OnBeforeSerialize() | Edit this page View Source PassedExtrema(float, float, float, bool, PulseExtrema) Check whether an extrema was passed between (time - deltaTime) and time. This will automatically choose the correct way to interpret the wave. Declaration public int PassedExtrema(float time, float deltaTime, float offset, bool realtimeWait = true, AnimationUtility.Wave.PulseExtrema extrema = PulseExtrema.Early) Parameters Type Name Description float time The time value. float deltaTime The delta time value. float offset The offset. Affected by Uniformity. bool realtimeWait Whether to use real time (i.e. whether to use Period or EffectivePeriod). AnimationUtility.Wave.PulseExtrema extrema If the wave has a CrestWait or TroughWait, this parameter defines whether an extremum is passed once the wait time begins, or once it ends. Returns Type Description int 1 if a maximum was passed, -1 if a minimum was passed, 0 if no extremum was passed. Exceptions Type Condition Exception | Edit this page View Source PassedInvertedPulseExtrema(float, float, float, bool, PulseExtrema) Check whether an extrema was passed between (time - deltaTime) and time. Explicitly interpret the wave as an inverted pulse, ignoring the TroughWait. Declaration public int PassedInvertedPulseExtrema(float time, float deltaTime, float offset, bool realtimeWait = true, AnimationUtility.Wave.PulseExtrema extrema = PulseExtrema.Early) Parameters Type Name Description float time The time value. float deltaTime The delta time value. float offset The offset. Affected by Uniformity. bool realtimeWait Whether to use real time (i.e. whether to use Period or EffectivePeriod). AnimationUtility.Wave.PulseExtrema extrema If the wave has a CrestWait or TroughWait, this parameter defines whether an extremum is passed once the wait time begins, or once it ends. Returns Type Description int 1 if a maximum was passed, -1 if a minimum was passed, 0 if no extremum was passed. Exceptions Type Condition Exception | Edit this page View Source PassedOneDirectionalPulseExtrema(float, float, float, bool, PulseExtrema) Check whether an extrema was passed between (time - deltaTime) and time. Explicitly interpret the wave as a one-directional pulse. Declaration public int PassedOneDirectionalPulseExtrema(float time, float deltaTime, float offset, bool realtimeWait = true, AnimationUtility.Wave.PulseExtrema extrema = PulseExtrema.Early) Parameters Type Name Description float time The time value. float deltaTime The delta time value. float offset The offset. Affected by Uniformity. bool realtimeWait Whether to use real time (i.e. whether to use Period or EffectivePeriod). AnimationUtility.Wave.PulseExtrema extrema If the wave has a CrestWait or TroughWait, this parameter defines whether an extremum is passed once the wait time begins, or once it ends. Returns Type Description int 1 if a maximum was passed, -1 if a minimum was passed, 0 if no extremum was passed. Exceptions Type Condition Exception | Edit this page View Source PassedPulseExtrema(float, float, float, bool, PulseExtrema) Check whether an extrema was passed between (time - deltaTime) and time. Explicitly interpret the wave as a pulse, ignoring the CrestWait. Declaration public int PassedPulseExtrema(float time, float deltaTime, float offset, bool realtimeWait = true, AnimationUtility.Wave.PulseExtrema extrema = PulseExtrema.Early) Parameters Type Name Description float time The time value. float deltaTime The delta time value. float offset The offset. Affected by Uniformity. bool realtimeWait Whether to use real time (i.e. whether to use Period or EffectivePeriod). AnimationUtility.Wave.PulseExtrema extrema If the wave has a CrestWait or TroughWait, this parameter defines whether an extremum is passed once the wait time begins, or once it ends. Returns Type Description int 1 if a maximum was passed, -1 if a minimum was passed, 0 if no extremum was passed. Exceptions Type Condition Exception | Edit this page View Source PassedWaveExtrema(float, float, float) Check whether an extrema was passed between (time - deltaTime) and time. Explicitly interpret the wave as a normal wave, ignoring both CrestWait and TroughWait. Declaration public int PassedWaveExtrema(float time, float deltaTime, float offset) Parameters Type Name Description float time The time value. float deltaTime The delta time value. float offset The offset. Affected by Uniformity. Returns Type Description int 1 if a maximum was passed, -1 if a minimum was passed, 0 if no extremum was passed. Exceptions Type Condition Exception Implements ISerializationCallbackReceiver"
  },
  "api/TMPEffects.TMPAnimations.AnimationUtility.WaveBase.html": {
    "href": "api/TMPEffects.TMPAnimations.AnimationUtility.WaveBase.html",
    "title": "Class AnimationUtility.WaveBase | TMPEffects documentation",
    "keywords": "Class AnimationUtility.WaveBase Base class for AnimationUtility.Wave. Allows you to easily create periodic animations. You should take a look at the online documentation for this one: https://tmpeffects.luca3317.dev/docs/tmpanimator_animationutility_wave.html Inheritance object AnimationUtility.WaveBase AnimationUtility.Wave Namespace: TMPEffects.TMPAnimations Assembly: .dll Syntax [Serializable] public abstract class AnimationUtility.WaveBase : ISerializationCallbackReceiver Constructors | Edit this page View Source WaveBase() Declaration public WaveBase() | Edit this page View Source WaveBase(float, float, float, float) Declaration public WaveBase(float upPeriod, float downPeriod, float velocity, float amplitude) Parameters Type Name Description float upPeriod float downPeriod float velocity float amplitude Fields | Edit this page View Source wavelength Declaration [NonSerialized] public float wavelength Field Value Type Description float Properties | Edit this page View Source Amplitude The amplitude of the wave. Declaration public float Amplitude { get; set; } Property Value Type Description float | Edit this page View Source DownPeriod The down period of the wave; how long it takes to travel down the wave. Ignores the Velocity of the wave, if you want to know it'll actually take to travel down the wave, use EffectiveDownPeriod. Declaration public float DownPeriod { get; set; } Property Value Type Description float | Edit this page View Source EffectiveDownPeriod The amount of time it takes to travel down the wave. Declaration public float EffectiveDownPeriod { get; } Property Value Type Description float | Edit this page View Source EffectivePeriod The amount of time it takes to travel the wave. Sum of EffectiveUpPeriod and EffectiveDownPeriod. Declaration public float EffectivePeriod { get; } Property Value Type Description float | Edit this page View Source EffectiveUpPeriod The amount of time it takes to travel up the wave. Declaration public float EffectiveUpPeriod { get; } Property Value Type Description float | Edit this page View Source Frequency The frequency of the wave. Declaration public float Frequency { get; } Property Value Type Description float | Edit this page View Source Period The period of the wave; how long it takes to travel up and down the wave. Sum of UpPeriod and DownPeriod. Ignores the Velocity of the wave, if you want to know it'll actually take to travel the wave, use EffectivePeriod. Declaration public float Period { get; } Property Value Type Description float | Edit this page View Source UpPeriod The up period of the wave; how long it takes to travel up the wave. Ignores the Velocity of the wave, if you want to know it'll actually take to travel up the wave, use EffectiveUpPeriod. Declaration public float UpPeriod { get; set; } Property Value Type Description float | Edit this page View Source Velocity The velocity at which the wave travels. Declaration public float Velocity { get; set; } Property Value Type Description float | Edit this page View Source WaveLength The wavelength of the wave. Declaration public float WaveLength { get; } Property Value Type Description float Methods | Edit this page View Source OnAfterDeserialize() Declaration public virtual void OnAfterDeserialize() | Edit this page View Source OnBeforeSerialize() Declaration public virtual void OnBeforeSerialize()"
  },
  "api/TMPEffects.TMPAnimations.AnimationUtility.html": {
    "href": "api/TMPEffects.TMPAnimations.AnimationUtility.html",
    "title": "Class AnimationUtility | TMPEffects documentation",
    "keywords": "Class AnimationUtility Utility methods for animations. Inheritance object AnimationUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.TMPAnimations Assembly: .dll Syntax public static class AnimationUtility Methods | Edit this page View Source AddPivotDeltaRaw(Vector3, CharData, IAnimatorContext) Add a raw delta to the pivot of the character. This delta will ignore the animator's scaling. Declaration public static void AddPivotDeltaRaw(Vector3 delta, CharData cData, IAnimatorContext ctx) Parameters Type Name Description Vector3 delta The delta to add to the pivot. CharData cData The CharData to act on. IAnimatorContext ctx The IAnimatorContext of the animation. | Edit this page View Source AddPivotDeltaRaw(Vector3, CharData, IAnimationContext) Add a raw delta to the pivot of the character. This delta will ignore the animator's scaling. Declaration public static void AddPivotDeltaRaw(Vector3 delta, CharData cData, IAnimationContext ctx) Parameters Type Name Description Vector3 delta The delta to add to the pivot. CharData cData The CharData to act on. IAnimationContext ctx The IAnimationContext of the animation. | Edit this page View Source AddPositionDeltaRaw(Vector3, CharData, IAnimatorContext) Add a raw delta to the position of the character. This delta will ignore the animator's scaling. Declaration public static void AddPositionDeltaRaw(Vector3 delta, CharData cData, IAnimatorContext ctx) Parameters Type Name Description Vector3 delta The delta to add to the position of the character. CharData cData The CharData to act on. IAnimatorContext ctx The IAnimationContext of the animation. | Edit this page View Source AddPositionDeltaRaw(Vector3, CharData, IAnimationContext) Add a raw delta to the position of the character. This delta will ignore the animator's scaling. Declaration public static void AddPositionDeltaRaw(Vector3 delta, CharData cData, IAnimationContext ctx) Parameters Type Name Description Vector3 delta The delta to add to the position of the character. CharData cData The CharData to act on. IAnimationContext ctx The IAnimationContext of the animation. | Edit this page View Source AddVertexDeltaRaw(int, Vector3, CharData, IAnimatorContext) Add a raw delta to the vertex at the given index. This delta will ignore the animator's scaling. Declaration public static void AddVertexDeltaRaw(int index, Vector3 delta, CharData cData, IAnimatorContext ctx) Parameters Type Name Description int index Index of the vertex. Vector3 delta The delta to add to the vertex. CharData cData The CharData to act on. IAnimatorContext ctx The IAnimatorContext of the animation. | Edit this page View Source AddVertexDeltaRaw(int, Vector3, CharData, IAnimationContext) Add a raw delta to the vertex at the given index. This delta will ignore the animator's scaling. Declaration public static void AddVertexDeltaRaw(int index, Vector3 delta, CharData cData, IAnimationContext ctx) Parameters Type Name Description int index Index of the vertex. Vector3 delta The delta to add to the vertex. CharData cData The CharData to act on. IAnimationContext ctx The IAnimationContext of the animation. | Edit this page View Source AnchorToPosition(Vector2, CharData) Convert an anchor vector to its actual position vector. Declaration public static Vector2 AnchorToPosition(Vector2 anchor, CharData cData) Parameters Type Name Description Vector2 anchor The anchor to convert. CharData cData The CharData the anchor applies to. Returns Type Description Vector2 The position vector. | Edit this page View Source ClosestPointOnLine(Vector3, Vector3, Vector3) Get the point on a line closest to the given point. Declaration public static Vector3 ClosestPointOnLine(Vector3 lineStart, Vector3 lineEnd, Vector3 point) Parameters Type Name Description Vector3 lineStart Vector3 lineEnd Vector3 point Returns Type Description Vector3 | Edit this page View Source GetRawDelta(Vector3, CharData, IAnimatorContext) Calculate the raw version of the passed in delta, i.e. the one that will ignore the animator's scaling. Declaration public static Vector3 GetRawDelta(Vector3 delta, CharData cData, IAnimatorContext ctx) Parameters Type Name Description Vector3 delta The delta. CharData cData The CharData to act on. IAnimatorContext ctx The IAnimatorContext of the animation. Returns Type Description Vector3 The raw version of the passed in delta, i.e. the one that will ignore the TMPAnimator's scaling. | Edit this page View Source GetRawDelta(Vector3, CharData, IAnimationContext) Calculate the raw version of the passed in delta, i.e. the one that will ignore the animator's scaling. Declaration public static Vector3 GetRawDelta(Vector3 delta, CharData cData, IAnimationContext ctx) Parameters Type Name Description Vector3 delta The delta. CharData cData The CharData to act on. IAnimationContext ctx The IAnimationContext of the animation. Returns Type Description Vector3 The raw version of the passed in delta, i.e. the one that will ignore the TMPAnimator's scaling. | Edit this page View Source GetRawPivot(Vector3, CharData, IAnimatorContext) Calculate the raw version of the passed in pivot position, i.e. the one that will ignore the animator's scaling. Declaration public static Vector3 GetRawPivot(Vector3 position, CharData cData, IAnimatorContext ctx) Parameters Type Name Description Vector3 position The position to set the pivot to. CharData cData The CharData to act on. IAnimatorContext ctx The IAnimatorContext of the animation. Returns Type Description Vector3 The raw version of the passed in pivot position, i.e. the one that will ignore the TMPAnimator's scaling. | Edit this page View Source GetRawPivot(Vector3, CharData, IAnimationContext) Calculate the raw version of the passed in pivot position, i.e. the one that will ignore the animator's scaling. Declaration public static Vector3 GetRawPivot(Vector3 position, CharData cData, IAnimationContext ctx) Parameters Type Name Description Vector3 position The position to set the pivot to. CharData cData The CharData to act on. IAnimationContext ctx The IAnimationContext of the animation. Returns Type Description Vector3 The raw version of the passed in pivot position, i.e. the one that will ignore the TMPAnimator's scaling. | Edit this page View Source GetRawPosition(Vector3, CharData, IAnimatorContext) Calculate the raw version of the passed in character position, i.e. the one that will ignore the animator's scaling. Declaration public static Vector3 GetRawPosition(Vector3 position, CharData cData, IAnimatorContext ctx) Parameters Type Name Description Vector3 position The position to set the character to. CharData cData The CharData to act on. IAnimatorContext ctx The IAnimatorContext of the animation. Returns Type Description Vector3 The raw version of the passed in character position, i.e. the one that will ignore the TMPAnimator's scaling. | Edit this page View Source GetRawPosition(Vector3, CharData, IAnimationContext) Calculate the raw version of the passed in character position, i.e. the one that will ignore the animator's scaling. Declaration public static Vector3 GetRawPosition(Vector3 position, CharData cData, IAnimationContext ctx) Parameters Type Name Description Vector3 position The position to set the character to. CharData cData The CharData to act on. IAnimationContext ctx The IAnimationContext of the animation. Returns Type Description Vector3 The raw version of the passed in character position, i.e. the one that will ignore the TMPAnimator's scaling. | Edit this page View Source GetRawVertex(int, Vector3, CharData, IAnimatorContext) Calculate the raw version of the passed in vertex position, i.e. the one that will ignore the animator's scaling. Declaration public static Vector3 GetRawVertex(int index, Vector3 position, CharData cData, IAnimatorContext ctx) Parameters Type Name Description int index Index of the vertex. Vector3 position The position to set the vertex to. CharData cData The CharData to act on. IAnimatorContext ctx The IAnimatorContext of the animation. Returns Type Description Vector3 The raw version of the passed in vertex position, i.e. the one that will ignore the TMPAnimator's scaling. | Edit this page View Source GetRawVertex(int, Vector3, CharData, IAnimationContext) Calculate the raw version of the passed in vertex position, i.e. the one that will ignore the animator's scaling. Declaration public static Vector3 GetRawVertex(int index, Vector3 position, CharData cData, IAnimationContext ctx) Parameters Type Name Description int index Index of the vertex. Vector3 position The position to set the vertex to. CharData cData The CharData to act on. IAnimationContext ctx The IAnimationContext of the animation. Returns Type Description Vector3 The raw version of the passed in vertex position, i.e. the one that will ignore the TMPAnimator's scaling. | Edit this page View Source GetValue(AnimationCurve, WrapMode, float) Evaluate an AnimationCurve with different WrapModes. Declaration public static float GetValue(AnimationCurve curve, WrapMode wrapMode, float time) Parameters Type Name Description AnimationCurve curve The curve to evaluate. WrapMode wrapMode The WrapMode to use. float time The time value. Returns Type Description float The value of the curve at the given time value. Exceptions Type Condition ArgumentException | Edit this page View Source GetWaveOffset(CharData, IAnimationContext, WaveOffsetType) Get the wave offset to use based on the type. To be used with Evaluate(float, float, bool) (and related methods). Declaration public static float GetWaveOffset(CharData cData, IAnimationContext context, ParameterTypes.WaveOffsetType type) Parameters Type Name Description CharData cData The character to get the offset for. IAnimationContext context The context of the animation. ParameterTypes.WaveOffsetType type The type of the offset. Returns Type Description float The offset for a wave. Exceptions Type Condition ArgumentException | Edit this page View Source InverseScaleVector(Vector3, CharData, IAnimatorContext) Scale a vector for an animation inversely. TMPAnimator automatically scales animations; using this method scales the vector in a way that makes it effectively ignore the TMPAnimator's scaling. Declaration public static Vector3 InverseScaleVector(Vector3 vector, CharData cData, IAnimatorContext context) Parameters Type Name Description Vector3 vector The vector to scale inversely. CharData cData The CharData the vector will be applied to. IAnimatorContext context The IAnimatorContext of the animation. Returns Type Description Vector3 The inversely scaled vector. | Edit this page View Source InverseScaleVector(Vector3, CharData, IAnimationContext) Scale a vector for an animation inversely. TMPAnimator automatically scales animations; using this method scales the vector in a way that makes it effectively ignore the TMPAnimator's scaling. Declaration public static Vector3 InverseScaleVector(Vector3 vector, CharData cData, IAnimationContext context) Parameters Type Name Description Vector3 vector The vector to scale inversely. CharData cData The CharData the vector will be applied to. IAnimationContext context The IAnimationContext of the animation. Returns Type Description Vector3 The inversely scaled vector. | Edit this page View Source ScaleTextMesh(TMP_Text, float) Scale a given value to make it uniform between TextMeshPro and TextMeshProUGUI components. Declaration public static float ScaleTextMesh(TMP_Text text, float value) Parameters Type Name Description TMP_Text text float value The value to scale. Returns Type Description float The scaled value. | Edit this page View Source ScaleVector(Vector3, CharData, IAnimatorContext) Scale a vector for an animation. Used by TMPAnimator to automatically scale animations. Declaration public static Vector3 ScaleVector(Vector3 vector, CharData cData, IAnimatorContext context) Parameters Type Name Description Vector3 vector The vector to scale. CharData cData The CharData the vector will applied to. IAnimatorContext context The IAnimatorContext of the animation. Returns Type Description Vector3 The scaled vector. | Edit this page View Source ScaleVector(Vector3, CharData, IAnimationContext) Scale a vector for an animation. Makes vectors uniform relative to the size of the text. Used by TMPAnimator to automatically scale animations. Declaration public static Vector3 ScaleVector(Vector3 vector, CharData cData, IAnimationContext context) Parameters Type Name Description Vector3 vector The vector to scale. CharData cData The CharData the vector will applied to. IAnimationContext context The IAnimatorContext of the animation. Returns Type Description Vector3 The scaled vector. | Edit this page View Source SetPivotRaw(Vector3, CharData, IAnimatorContext) Set the raw pivot of the character. This position will ignore the animator's scaling. Declaration public static void SetPivotRaw(Vector3 pivot, CharData cData, IAnimatorContext ctx) Parameters Type Name Description Vector3 pivot CharData cData The CharData to act on. IAnimatorContext ctx The IAnimatorContext of the animation. | Edit this page View Source SetPivotRaw(Vector3, CharData, IAnimationContext) Set the raw pivot of the character. This position will ignore the animator's scaling. Declaration public static void SetPivotRaw(Vector3 pivot, CharData cData, IAnimationContext ctx) Parameters Type Name Description Vector3 pivot CharData cData The CharData to act on. IAnimationContext ctx The IAnimationContext of the animation. | Edit this page View Source SetPositionRaw(Vector3, CharData, IAnimatorContext) Set the raw position of the character. This position will ignore the animator's scaling. Declaration public static void SetPositionRaw(Vector3 position, CharData cData, IAnimatorContext ctx) Parameters Type Name Description Vector3 position The position to set the character to. CharData cData The CharData to act on. IAnimatorContext ctx The IAnimatorContext of the animation. | Edit this page View Source SetPositionRaw(Vector3, CharData, IAnimationContext) Set the raw position of the character. This position will ignore the animator's scaling. Declaration public static void SetPositionRaw(Vector3 position, CharData cData, IAnimationContext ctx) Parameters Type Name Description Vector3 position The position to set the character to. CharData cData The CharData to act on. IAnimationContext ctx The IAnimationContext of the animation. | Edit this page View Source SetToCharacter(TMP_Character, TMP_Character, CharData, IAnimationContext) Set a character's UVs so it will look like another character. Declaration public static void SetToCharacter(TMP_Character newCharacter, TMP_Character originalCharacter, CharData cData, IAnimationContext context) Parameters Type Name Description TMP_Character newCharacter The character to change to. TMP_Character originalCharacter The original character of the cData. CharData cData The CharData of the character. IAnimationContext context The context of the animation. | Edit this page View Source SetVertexRaw(int, Vector3, CharData, IAnimatorContext) Set the raw position of the vertex at the given index. This position will ignore the animator's scaling. Declaration public static void SetVertexRaw(int index, Vector3 position, CharData cData, IAnimatorContext ctx) Parameters Type Name Description int index Index of the vertex. Vector3 position The position to set the vertex to. CharData cData The CharData to act on. IAnimatorContext ctx The IAnimatorContext of the animation. | Edit this page View Source SetVertexRaw(int, Vector3, CharData, IAnimationContext) Set the raw position of the vertex at the given index. This position will ignore the animator's scaling. Declaration public static void SetVertexRaw(int index, Vector3 position, CharData cData, IAnimationContext ctx) Parameters Type Name Description int index Index of the vertex. Vector3 position The position to set the vertex to. CharData cData The CharData to act on. IAnimationContext ctx The IAnimationContext of the animation."
  },
  "api/TMPEffects.TMPAnimations.Animations.AnimationStack-1.AnimContext.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.AnimationStack-1.AnimContext.html",
    "title": "Class AnimationStack<T>.AnimContext | TMPEffects documentation",
    "keywords": "Class AnimationStack<T>.AnimContext Inheritance object AnimationStack<T>.AnimContext Implements IAnimationContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.TMPAnimations.Animations Assembly: .dll Syntax public class AnimationStack<T>.AnimContext : IAnimationContext Constructors | Edit this page View Source AnimContext(IAnimationContext, object) Declaration public AnimContext(IAnimationContext context, object customData) Parameters Type Name Description IAnimationContext context object customData Properties | Edit this page View Source AnimatorContext The context of the animating TMPAnimator. Declaration public IAnimatorContext AnimatorContext { get; } Property Value Type Description IAnimatorContext | Edit this page View Source CustomData The custom data object. Declaration public object CustomData { get; } Property Value Type Description object | Edit this page View Source SegmentData Data about the animation segment. Declaration public SegmentData SegmentData { get; } Property Value Type Description SegmentData | Edit this page View Source State The current state of the CharData, with the previous animations applied. Declaration public ICharDataState State { get; } Property Value Type Description ICharDataState Methods | Edit this page View Source FinishAnimation(CharData) Set the animation to be considered finished for the given character. Declaration public void FinishAnimation(CharData cData) Parameters Type Name Description CharData cData | Edit this page View Source Finished(int) Check if the animation is considered finished for the character at the given index. Declaration public bool Finished(int index) Parameters Type Name Description int index Returns Type Description bool | Edit this page View Source Finished(CharData) Check if the animation is considered finished for the given character. Declaration public bool Finished(CharData cData) Parameters Type Name Description CharData cData Returns Type Description bool | Edit this page View Source ResetFinished(CharData) Declaration public void ResetFinished(CharData cData) Parameters Type Name Description CharData cData Implements IAnimationContext"
  },
  "api/TMPEffects.TMPAnimations.Animations.AnimationStack-1.AnimPrefixTuple.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.AnimationStack-1.AnimPrefixTuple.html",
    "title": "Struct AnimationStack<T>.AnimPrefixTuple | TMPEffects documentation",
    "keywords": "Struct AnimationStack<T>.AnimPrefixTuple Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: TMPEffects.TMPAnimations.Animations Assembly: .dll Syntax [Serializable] public struct AnimationStack<T>.AnimPrefixTuple Constructors | Edit this page View Source AnimPrefixTuple(T, string) Declaration public AnimPrefixTuple(T animation, string prefix) Parameters Type Name Description T animation string prefix Fields | Edit this page View Source animation Declaration public T animation Field Value Type Description T | Edit this page View Source prefix Declaration public string prefix Field Value Type Description string"
  },
  "api/TMPEffects.TMPAnimations.Animations.AnimationStack-1.Data.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.AnimationStack-1.Data.html",
    "title": "Class AnimationStack<T>.Data | TMPEffects documentation",
    "keywords": "Class AnimationStack<T>.Data Inheritance object AnimationStack<T>.Data Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.TMPAnimations.Animations Assembly: .dll Syntax public class AnimationStack<T>.Data Fields | Edit this page View Source ContextCache Declaration public Dictionary<ITMPAnimation, IAnimationContext> ContextCache Field Value Type Description Dictionary<ITMPAnimation, IAnimationContext> | Edit this page View Source ObjectCache Declaration public Dictionary<ITMPAnimation, object> ObjectCache Field Value Type Description Dictionary<ITMPAnimation, object>"
  },
  "api/TMPEffects.TMPAnimations.Animations.AnimationStack-1.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.AnimationStack-1.html",
    "title": "Class AnimationStack<T> | TMPEffects documentation",
    "keywords": "Class AnimationStack<T> Inheritance object AnimationStack<T> BasicAnimationStack HideAnimationStack ShowAnimationStack Implements ITMPAnimation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.TMPAnimations.Animations Assembly: .dll Syntax [Serializable] public class AnimationStack<T> : ITMPAnimation where T : ITMPAnimation Type Parameters Name Description T Fields | Edit this page View Source animations Declaration protected List<AnimationStack<T>.AnimPrefixTuple> animations Field Value Type Description List<AnimationStack<T>.AnimPrefixTuple> Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public virtual void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public object GetNewCustomData() Returns Type Description object The custom data object for this animation. | Edit this page View Source PopulateContextCache(Data, IAnimationContext) Declaration protected void PopulateContextCache(AnimationStack<T>.Data data, IAnimationContext context) Parameters Type Name Description AnimationStack<T>.Data data IAnimationContext context | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Implements ITMPAnimation"
  },
  "api/TMPEffects.TMPAnimations.Animations.AnimationStackObject.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.AnimationStackObject.html",
    "title": "Class AnimationStackObject | TMPEffects documentation",
    "keywords": "Class AnimationStackObject Inheritance object TMPAnimation AnimationStackObject Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPAnimation.ObjectChanged TMPAnimation.OnValidate() TMPAnimation.OnDestroy() TMPAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations.Animations Assembly: .dll Syntax public class AnimationStackObject : TMPAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides TMPAnimation.Animate(CharData, IAnimationContext) | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public override object GetNewCustomData() Returns Type Description object The custom data object for this animation. Overrides TMPAnimation.GetNewCustomData() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.Animations.BasicAnimationStack.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.BasicAnimationStack.html",
    "title": "Class BasicAnimationStack | TMPEffects documentation",
    "keywords": "Class BasicAnimationStack Inheritance object AnimationStack<TMPAnimation> BasicAnimationStack Implements ITMPAnimation Inherited Members AnimationStack<TMPAnimation>.animations AnimationStack<TMPAnimation>.Animate(CharData, IAnimationContext) AnimationStack<TMPAnimation>.PopulateContextCache(AnimationStack<TMPAnimation>.Data, IAnimationContext) AnimationStack<TMPAnimation>.GetNewCustomData() AnimationStack<TMPAnimation>.SetParameters(object, IDictionary<string, string>) AnimationStack<TMPAnimation>.ValidateParameters(IDictionary<string, string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.TMPAnimations.Animations Assembly: .dll Syntax [Serializable] public class BasicAnimationStack : AnimationStack<TMPAnimation>, ITMPAnimation Implements ITMPAnimation"
  },
  "api/TMPEffects.TMPAnimations.Animations.CharAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.CharAnimation.html",
    "title": "Class CharAnimation | TMPEffects documentation",
    "keywords": "Class CharAnimation Inheritance object TMPAnimation CharAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPAnimation.ObjectChanged TMPAnimation.OnValidate() TMPAnimation.OnDestroy() TMPAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations.Animations Assembly: .dll Syntax public class CharAnimation : TMPAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides TMPAnimation.Animate(CharData, IAnimationContext) | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public override object GetNewCustomData() Returns Type Description object The custom data object for this animation. Overrides TMPAnimation.GetNewCustomData() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.Animations.ContPivotAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.ContPivotAnimation.html",
    "title": "Class ContPivotAnimation | TMPEffects documentation",
    "keywords": "Class ContPivotAnimation Inheritance object TMPAnimation ContPivotAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPAnimation.ObjectChanged TMPAnimation.OnValidate() TMPAnimation.OnDestroy() TMPAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations.Animations Assembly: .dll Syntax public class ContPivotAnimation : TMPAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides TMPAnimation.Animate(CharData, IAnimationContext) | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public override object GetNewCustomData() Returns Type Description object The custom data object for this animation. Overrides TMPAnimation.GetNewCustomData() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.Animations.FadeAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.FadeAnimation.html",
    "title": "Class FadeAnimation | TMPEffects documentation",
    "keywords": "Class FadeAnimation Inheritance object TMPAnimation FadeAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPAnimation.ObjectChanged TMPAnimation.OnValidate() TMPAnimation.OnDestroy() TMPAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations.Animations Assembly: .dll Syntax public class FadeAnimation : TMPAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides TMPAnimation.Animate(CharData, IAnimationContext) | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public override object GetNewCustomData() Returns Type Description object The custom data object for this animation. Overrides TMPAnimation.GetNewCustomData() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.Animations.FunkyAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.FunkyAnimation.html",
    "title": "Class FunkyAnimation | TMPEffects documentation",
    "keywords": "Class FunkyAnimation Inheritance object TMPAnimation FunkyAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPAnimation.ObjectChanged TMPAnimation.OnValidate() TMPAnimation.OnDestroy() TMPAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations.Animations Assembly: .dll Syntax public class FunkyAnimation : TMPAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides TMPAnimation.Animate(CharData, IAnimationContext) | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public override object GetNewCustomData() Returns Type Description object The custom data object for this animation. Overrides TMPAnimation.GetNewCustomData() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.Animations.GrowAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.GrowAnimation.html",
    "title": "Class GrowAnimation | TMPEffects documentation",
    "keywords": "Class GrowAnimation Inheritance object TMPAnimation GrowAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPAnimation.ObjectChanged TMPAnimation.OnValidate() TMPAnimation.OnDestroy() TMPAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations.Animations Assembly: .dll Syntax public class GrowAnimation : TMPAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides TMPAnimation.Animate(CharData, IAnimationContext) | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public override object GetNewCustomData() Returns Type Description object The custom data object for this animation. Overrides TMPAnimation.GetNewCustomData() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.Animations.HideAnimationStack.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.HideAnimationStack.html",
    "title": "Class HideAnimationStack | TMPEffects documentation",
    "keywords": "Class HideAnimationStack Inheritance object AnimationStack<TMPHideAnimation> HideAnimationStack Implements ITMPAnimation Inherited Members AnimationStack<TMPHideAnimation>.animations AnimationStack<TMPHideAnimation>.PopulateContextCache(AnimationStack<TMPHideAnimation>.Data, IAnimationContext) AnimationStack<TMPHideAnimation>.GetNewCustomData() AnimationStack<TMPHideAnimation>.SetParameters(object, IDictionary<string, string>) AnimationStack<TMPHideAnimation>.ValidateParameters(IDictionary<string, string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.TMPAnimations.Animations Assembly: .dll Syntax [Serializable] public class HideAnimationStack : AnimationStack<TMPHideAnimation>, ITMPAnimation Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides AnimationStack<TMPHideAnimation>.Animate(CharData, IAnimationContext) Implements ITMPAnimation"
  },
  "api/TMPEffects.TMPAnimations.Animations.HideAnimationStackObject.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.HideAnimationStackObject.html",
    "title": "Class HideAnimationStackObject | TMPEffects documentation",
    "keywords": "Class HideAnimationStackObject Inheritance object TMPHideAnimation HideAnimationStackObject Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPHideAnimation.ObjectChanged TMPHideAnimation.OnValidate() TMPHideAnimation.OnDestroy() TMPHideAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations.Animations Assembly: .dll Syntax public class HideAnimationStackObject : TMPHideAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides TMPHideAnimation.Animate(CharData, IAnimationContext) | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public override object GetNewCustomData() Returns Type Description object The custom data object for this animation. Overrides TMPHideAnimation.GetNewCustomData() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPHideAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPHideAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.Animations.PaletteAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.PaletteAnimation.html",
    "title": "Class PaletteAnimation | TMPEffects documentation",
    "keywords": "Class PaletteAnimation Inheritance object TMPAnimation PaletteAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPAnimation.ObjectChanged TMPAnimation.OnValidate() TMPAnimation.OnDestroy() TMPAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations.Animations Assembly: .dll Syntax public class PaletteAnimation : TMPAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides TMPAnimation.Animate(CharData, IAnimationContext) | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public override object GetNewCustomData() Returns Type Description object The custom data object for this animation. Overrides TMPAnimation.GetNewCustomData() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.Animations.PivotAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.PivotAnimation.html",
    "title": "Class PivotAnimation | TMPEffects documentation",
    "keywords": "Class PivotAnimation Inheritance object TMPAnimation PivotAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPAnimation.ObjectChanged TMPAnimation.OnValidate() TMPAnimation.OnDestroy() TMPAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations.Animations Assembly: .dll Syntax public class PivotAnimation : TMPAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides TMPAnimation.Animate(CharData, IAnimationContext) | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public override object GetNewCustomData() Returns Type Description object The custom data object for this animation. Overrides TMPAnimation.GetNewCustomData() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.Animations.ShakeAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.ShakeAnimation.html",
    "title": "Class ShakeAnimation | TMPEffects documentation",
    "keywords": "Class ShakeAnimation Inheritance object TMPAnimation ShakeAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPAnimation.ObjectChanged TMPAnimation.OnValidate() TMPAnimation.OnDestroy() TMPAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations.Animations Assembly: .dll Syntax public class ShakeAnimation : TMPAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides TMPAnimation.Animate(CharData, IAnimationContext) | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public override object GetNewCustomData() Returns Type Description object The custom data object for this animation. Overrides TMPAnimation.GetNewCustomData() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.Animations.ShowAnimationStack.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.ShowAnimationStack.html",
    "title": "Class ShowAnimationStack | TMPEffects documentation",
    "keywords": "Class ShowAnimationStack Inheritance object AnimationStack<TMPShowAnimation> ShowAnimationStack Implements ITMPAnimation Inherited Members AnimationStack<TMPShowAnimation>.animations AnimationStack<TMPShowAnimation>.PopulateContextCache(AnimationStack<TMPShowAnimation>.Data, IAnimationContext) AnimationStack<TMPShowAnimation>.GetNewCustomData() AnimationStack<TMPShowAnimation>.SetParameters(object, IDictionary<string, string>) AnimationStack<TMPShowAnimation>.ValidateParameters(IDictionary<string, string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.TMPAnimations.Animations Assembly: .dll Syntax [Serializable] public class ShowAnimationStack : AnimationStack<TMPShowAnimation>, ITMPAnimation Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides AnimationStack<TMPShowAnimation>.Animate(CharData, IAnimationContext) Implements ITMPAnimation"
  },
  "api/TMPEffects.TMPAnimations.Animations.ShowAnimationStackObject.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.ShowAnimationStackObject.html",
    "title": "Class ShowAnimationStackObject | TMPEffects documentation",
    "keywords": "Class ShowAnimationStackObject Inheritance object TMPShowAnimation ShowAnimationStackObject Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPShowAnimation.ObjectChanged TMPShowAnimation.OnValidate() TMPShowAnimation.OnDestroy() TMPShowAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations.Animations Assembly: .dll Syntax public class ShowAnimationStackObject : TMPShowAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides TMPShowAnimation.Animate(CharData, IAnimationContext) | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public override object GetNewCustomData() Returns Type Description object The custom data object for this animation. Overrides TMPShowAnimation.GetNewCustomData() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPShowAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPShowAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.Animations.WaveAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.WaveAnimation.html",
    "title": "Class WaveAnimation | TMPEffects documentation",
    "keywords": "Class WaveAnimation Inheritance object TMPAnimation WaveAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPAnimation.ObjectChanged TMPAnimation.OnValidate() TMPAnimation.OnDestroy() TMPAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations.Animations Assembly: .dll Syntax public class WaveAnimation : TMPAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides TMPAnimation.Animate(CharData, IAnimationContext) | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public override object GetNewCustomData() Returns Type Description object The custom data object for this animation. Overrides TMPAnimation.GetNewCustomData() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.Animations.html": {
    "href": "api/TMPEffects.TMPAnimations.Animations.html",
    "title": "Namespace TMPEffects.TMPAnimations.Animations | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.TMPAnimations.Animations Classes AnimationStackObject AnimationStack<T> AnimationStack<T>.AnimContext AnimationStack<T>.Data BasicAnimationStack CharAnimation ContPivotAnimation FadeAnimation FunkyAnimation GrowAnimation HideAnimationStack HideAnimationStackObject PaletteAnimation PivotAnimation ShakeAnimation ShowAnimationStack ShowAnimationStackObject WaveAnimation Structs AnimationStack<T>.AnimPrefixTuple"
  },
  "api/TMPEffects.TMPAnimations.HideAnimations.CharHideAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.HideAnimations.CharHideAnimation.html",
    "title": "Class CharHideAnimation | TMPEffects documentation",
    "keywords": "Class CharHideAnimation Inheritance object TMPHideAnimation CharHideAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPHideAnimation.ObjectChanged TMPHideAnimation.OnValidate() TMPHideAnimation.OnDestroy() TMPHideAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations.HideAnimations Assembly: .dll Syntax public class CharHideAnimation : TMPHideAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides TMPHideAnimation.Animate(CharData, IAnimationContext) | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public override object GetNewCustomData() Returns Type Description object The custom data object for this animation. Overrides TMPHideAnimation.GetNewCustomData() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPHideAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPHideAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.HideAnimations.DummyHideAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.HideAnimations.DummyHideAnimation.html",
    "title": "Class DummyHideAnimation | TMPEffects documentation",
    "keywords": "Class DummyHideAnimation Inheritance object TMPHideAnimation DummyHideAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPHideAnimation.ObjectChanged TMPHideAnimation.OnValidate() TMPHideAnimation.OnDestroy() TMPHideAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations.HideAnimations Assembly: .dll Syntax public class DummyHideAnimation : TMPHideAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides TMPHideAnimation.Animate(CharData, IAnimationContext) | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public override object GetNewCustomData() Returns Type Description object The custom data object for this animation. Overrides TMPHideAnimation.GetNewCustomData() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPHideAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPHideAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.HideAnimations.FadeHideAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.HideAnimations.FadeHideAnimation.html",
    "title": "Class FadeHideAnimation | TMPEffects documentation",
    "keywords": "Class FadeHideAnimation Inheritance object TMPHideAnimation FadeHideAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPHideAnimation.ObjectChanged TMPHideAnimation.OnValidate() TMPHideAnimation.OnDestroy() TMPHideAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations.HideAnimations Assembly: .dll Syntax public class FadeHideAnimation : TMPHideAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides TMPHideAnimation.Animate(CharData, IAnimationContext) | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public override object GetNewCustomData() Returns Type Description object The custom data object for this animation. Overrides TMPHideAnimation.GetNewCustomData() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPHideAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPHideAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.HideAnimations.GrowHideAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.HideAnimations.GrowHideAnimation.html",
    "title": "Class GrowHideAnimation | TMPEffects documentation",
    "keywords": "Class GrowHideAnimation Inheritance object TMPHideAnimation GrowHideAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPHideAnimation.ObjectChanged TMPHideAnimation.OnValidate() TMPHideAnimation.OnDestroy() TMPHideAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations.HideAnimations Assembly: .dll Syntax public class GrowHideAnimation : TMPHideAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides TMPHideAnimation.Animate(CharData, IAnimationContext) | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public override object GetNewCustomData() Returns Type Description object The custom data object for this animation. Overrides TMPHideAnimation.GetNewCustomData() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPHideAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPHideAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.HideAnimations.MoveInHideAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.HideAnimations.MoveInHideAnimation.html",
    "title": "Class MoveInHideAnimation | TMPEffects documentation",
    "keywords": "Class MoveInHideAnimation Inheritance object TMPHideAnimation MoveInHideAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPHideAnimation.ObjectChanged TMPHideAnimation.OnValidate() TMPHideAnimation.OnDestroy() TMPHideAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations.HideAnimations Assembly: .dll Syntax public class MoveInHideAnimation : TMPHideAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides TMPHideAnimation.Animate(CharData, IAnimationContext) | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public override object GetNewCustomData() Returns Type Description object The custom data object for this animation. Overrides TMPHideAnimation.GetNewCustomData() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPHideAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPHideAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.HideAnimations.PivotHideAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.HideAnimations.PivotHideAnimation.html",
    "title": "Class PivotHideAnimation | TMPEffects documentation",
    "keywords": "Class PivotHideAnimation Inheritance object TMPHideAnimation PivotHideAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPHideAnimation.ObjectChanged TMPHideAnimation.OnValidate() TMPHideAnimation.OnDestroy() TMPHideAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations.HideAnimations Assembly: .dll Syntax public class PivotHideAnimation : TMPHideAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides TMPHideAnimation.Animate(CharData, IAnimationContext) | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public override object GetNewCustomData() Returns Type Description object The custom data object for this animation. Overrides TMPHideAnimation.GetNewCustomData() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPHideAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPHideAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.HideAnimations.ShakeHideAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.HideAnimations.ShakeHideAnimation.html",
    "title": "Class ShakeHideAnimation | TMPEffects documentation",
    "keywords": "Class ShakeHideAnimation Inheritance object TMPHideAnimation ShakeHideAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPHideAnimation.ObjectChanged TMPHideAnimation.OnValidate() TMPHideAnimation.OnDestroy() TMPHideAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations.HideAnimations Assembly: .dll Syntax public class ShakeHideAnimation : TMPHideAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides TMPHideAnimation.Animate(CharData, IAnimationContext) | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public override object GetNewCustomData() Returns Type Description object The custom data object for this animation. Overrides TMPHideAnimation.GetNewCustomData() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPHideAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPHideAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.HideAnimations.SpreadHideAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.HideAnimations.SpreadHideAnimation.html",
    "title": "Class SpreadHideAnimation | TMPEffects documentation",
    "keywords": "Class SpreadHideAnimation Inheritance object TMPHideAnimation SpreadHideAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPHideAnimation.ObjectChanged TMPHideAnimation.OnValidate() TMPHideAnimation.OnDestroy() TMPHideAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations.HideAnimations Assembly: .dll Syntax public class SpreadHideAnimation : TMPHideAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides TMPHideAnimation.Animate(CharData, IAnimationContext) | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public override object GetNewCustomData() Returns Type Description object The custom data object for this animation. Overrides TMPHideAnimation.GetNewCustomData() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPHideAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPHideAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.HideAnimations.html": {
    "href": "api/TMPEffects.TMPAnimations.HideAnimations.html",
    "title": "Namespace TMPEffects.TMPAnimations.HideAnimations | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.TMPAnimations.HideAnimations Classes CharHideAnimation DummyHideAnimation FadeHideAnimation GrowHideAnimation MoveInHideAnimation PivotHideAnimation ShakeHideAnimation SpreadHideAnimation"
  },
  "api/TMPEffects.TMPAnimations.IAnimationContext.html": {
    "href": "api/TMPEffects.TMPAnimations.IAnimationContext.html",
    "title": "Interface IAnimationContext | TMPEffects documentation",
    "keywords": "Interface IAnimationContext Basic interface for animation contexts. Namespace: TMPEffects.TMPAnimations Assembly: .dll Syntax public interface IAnimationContext Properties | Edit this page View Source AnimatorContext The context of the animating TMPAnimator. Declaration IAnimatorContext AnimatorContext { get; } Property Value Type Description IAnimatorContext | Edit this page View Source CustomData The custom data object. Declaration object CustomData { get; } Property Value Type Description object | Edit this page View Source SegmentData Data about the animation segment. Declaration SegmentData SegmentData { get; } Property Value Type Description SegmentData | Edit this page View Source State The current state of the CharData, with the previous animations applied. Declaration ICharDataState State { get; } Property Value Type Description ICharDataState Methods | Edit this page View Source FinishAnimation(CharData) Set the animation to be considered finished for the given character. Declaration void FinishAnimation(CharData cData) Parameters Type Name Description CharData cData | Edit this page View Source Finished(int) Check if the animation is considered finished for the character at the given index. Declaration bool Finished(int index) Parameters Type Name Description int index Returns Type Description bool | Edit this page View Source Finished(CharData) Check if the animation is considered finished for the given character. Declaration bool Finished(CharData cData) Parameters Type Name Description CharData cData Returns Type Description bool"
  },
  "api/TMPEffects.TMPAnimations.ITMPAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.ITMPAnimation.html",
    "title": "Interface ITMPAnimation | TMPEffects documentation",
    "keywords": "Interface ITMPAnimation Base interface for all TMPEffects animations. Namespace: TMPEffects.TMPAnimations Assembly: .dll Syntax public interface ITMPAnimation Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration object GetNewCustomData() Returns Type Description object The custom data object for this animation. | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPAnimations.ReadOnlyAnimationContext.html": {
    "href": "api/TMPEffects.TMPAnimations.ReadOnlyAnimationContext.html",
    "title": "Class ReadOnlyAnimationContext | TMPEffects documentation",
    "keywords": "Class ReadOnlyAnimationContext Inheritance object ReadOnlyAnimationContext Implements IAnimationContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.TMPAnimations Assembly: .dll Syntax public class ReadOnlyAnimationContext : IAnimationContext Constructors | Edit this page View Source ReadOnlyAnimationContext(IAnimatorContext, ICharDataState, SegmentData, object) Declaration public ReadOnlyAnimationContext(IAnimatorContext animatorContext, ICharDataState state, SegmentData segmentData, object customData) Parameters Type Name Description IAnimatorContext animatorContext ICharDataState state SegmentData segmentData object customData | Edit this page View Source ReadOnlyAnimationContext(IAnimationContext) Declaration public ReadOnlyAnimationContext(IAnimationContext context) Parameters Type Name Description IAnimationContext context Properties | Edit this page View Source AnimatorContext The context of the animating TMPAnimator. Declaration public IAnimatorContext AnimatorContext { get; } Property Value Type Description IAnimatorContext | Edit this page View Source CustomData The custom data object. Declaration public object CustomData { get; } Property Value Type Description object | Edit this page View Source SegmentData Data about the animation segment. Declaration public SegmentData SegmentData { get; } Property Value Type Description SegmentData | Edit this page View Source State The current state of the CharData, with the previous animations applied. Declaration public ICharDataState State { get; } Property Value Type Description ICharDataState Methods | Edit this page View Source FinishAnimation(CharData) Set the animation to be considered finished for the given character. Declaration public void FinishAnimation(CharData cData) Parameters Type Name Description CharData cData | Edit this page View Source Finished(int) Check if the animation is considered finished for the character at the given index. Declaration public bool Finished(int index) Parameters Type Name Description int index Returns Type Description bool | Edit this page View Source Finished(CharData) Check if the animation is considered finished for the given character. Declaration public bool Finished(CharData cData) Parameters Type Name Description CharData cData Returns Type Description bool Implements IAnimationContext"
  },
  "api/TMPEffects.TMPAnimations.ShowAnimations.CharShowAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.ShowAnimations.CharShowAnimation.html",
    "title": "Class CharShowAnimation | TMPEffects documentation",
    "keywords": "Class CharShowAnimation Inheritance object TMPShowAnimation CharShowAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPShowAnimation.ObjectChanged TMPShowAnimation.OnValidate() TMPShowAnimation.OnDestroy() TMPShowAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations.ShowAnimations Assembly: .dll Syntax public class CharShowAnimation : TMPShowAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides TMPShowAnimation.Animate(CharData, IAnimationContext) | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public override object GetNewCustomData() Returns Type Description object The custom data object for this animation. Overrides TMPShowAnimation.GetNewCustomData() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPShowAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPShowAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.ShowAnimations.DummyShowAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.ShowAnimations.DummyShowAnimation.html",
    "title": "Class DummyShowAnimation | TMPEffects documentation",
    "keywords": "Class DummyShowAnimation Inheritance object TMPShowAnimation DummyShowAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPShowAnimation.ObjectChanged TMPShowAnimation.OnValidate() TMPShowAnimation.OnDestroy() TMPShowAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations.ShowAnimations Assembly: .dll Syntax public class DummyShowAnimation : TMPShowAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides TMPShowAnimation.Animate(CharData, IAnimationContext) | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public override object GetNewCustomData() Returns Type Description object The custom data object for this animation. Overrides TMPShowAnimation.GetNewCustomData() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPShowAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPShowAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.ShowAnimations.FadeShowAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.ShowAnimations.FadeShowAnimation.html",
    "title": "Class FadeShowAnimation | TMPEffects documentation",
    "keywords": "Class FadeShowAnimation Inheritance object TMPShowAnimation FadeShowAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPShowAnimation.ObjectChanged TMPShowAnimation.OnValidate() TMPShowAnimation.OnDestroy() TMPShowAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations.ShowAnimations Assembly: .dll Syntax public class FadeShowAnimation : TMPShowAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides TMPShowAnimation.Animate(CharData, IAnimationContext) | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public override object GetNewCustomData() Returns Type Description object The custom data object for this animation. Overrides TMPShowAnimation.GetNewCustomData() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPShowAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPShowAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.ShowAnimations.GrowShowAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.ShowAnimations.GrowShowAnimation.html",
    "title": "Class GrowShowAnimation | TMPEffects documentation",
    "keywords": "Class GrowShowAnimation Inheritance object TMPShowAnimation GrowShowAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPShowAnimation.ObjectChanged TMPShowAnimation.OnValidate() TMPShowAnimation.OnDestroy() TMPShowAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations.ShowAnimations Assembly: .dll Syntax public class GrowShowAnimation : TMPShowAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides TMPShowAnimation.Animate(CharData, IAnimationContext) | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public override object GetNewCustomData() Returns Type Description object The custom data object for this animation. Overrides TMPShowAnimation.GetNewCustomData() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPShowAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPShowAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.ShowAnimations.MoveInShowAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.ShowAnimations.MoveInShowAnimation.html",
    "title": "Class MoveInShowAnimation | TMPEffects documentation",
    "keywords": "Class MoveInShowAnimation Inheritance object TMPShowAnimation MoveInShowAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPShowAnimation.ObjectChanged TMPShowAnimation.OnValidate() TMPShowAnimation.OnDestroy() TMPShowAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations.ShowAnimations Assembly: .dll Syntax public class MoveInShowAnimation : TMPShowAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides TMPShowAnimation.Animate(CharData, IAnimationContext) | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public override object GetNewCustomData() Returns Type Description object The custom data object for this animation. Overrides TMPShowAnimation.GetNewCustomData() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPShowAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPShowAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.ShowAnimations.PivotShowAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.ShowAnimations.PivotShowAnimation.html",
    "title": "Class PivotShowAnimation | TMPEffects documentation",
    "keywords": "Class PivotShowAnimation Inheritance object TMPShowAnimation PivotShowAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPShowAnimation.ObjectChanged TMPShowAnimation.OnValidate() TMPShowAnimation.OnDestroy() TMPShowAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations.ShowAnimations Assembly: .dll Syntax public class PivotShowAnimation : TMPShowAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides TMPShowAnimation.Animate(CharData, IAnimationContext) | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public override object GetNewCustomData() Returns Type Description object The custom data object for this animation. Overrides TMPShowAnimation.GetNewCustomData() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPShowAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPShowAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.ShowAnimations.ShakeShowAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.ShowAnimations.ShakeShowAnimation.html",
    "title": "Class ShakeShowAnimation | TMPEffects documentation",
    "keywords": "Class ShakeShowAnimation Inheritance object TMPShowAnimation ShakeShowAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPShowAnimation.ObjectChanged TMPShowAnimation.OnValidate() TMPShowAnimation.OnDestroy() TMPShowAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations.ShowAnimations Assembly: .dll Syntax public class ShakeShowAnimation : TMPShowAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides TMPShowAnimation.Animate(CharData, IAnimationContext) | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public override object GetNewCustomData() Returns Type Description object The custom data object for this animation. Overrides TMPShowAnimation.GetNewCustomData() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPShowAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPShowAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.ShowAnimations.SpreadAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.ShowAnimations.SpreadAnimation.html",
    "title": "Class SpreadAnimation | TMPEffects documentation",
    "keywords": "Class SpreadAnimation Inheritance object TMPAnimation SpreadAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPAnimation.ObjectChanged TMPAnimation.OnValidate() TMPAnimation.OnDestroy() TMPAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations.ShowAnimations Assembly: .dll Syntax public class SpreadAnimation : TMPAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides TMPAnimation.Animate(CharData, IAnimationContext) | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public override object GetNewCustomData() Returns Type Description object The custom data object for this animation. Overrides TMPAnimation.GetNewCustomData() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.ShowAnimations.SpreadShowAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.ShowAnimations.SpreadShowAnimation.html",
    "title": "Class SpreadShowAnimation | TMPEffects documentation",
    "keywords": "Class SpreadShowAnimation Inheritance object TMPShowAnimation SpreadShowAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPShowAnimation.ObjectChanged TMPShowAnimation.OnValidate() TMPShowAnimation.OnDestroy() TMPShowAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations.ShowAnimations Assembly: .dll Syntax public class SpreadShowAnimation : TMPShowAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public override void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. Overrides TMPShowAnimation.Animate(CharData, IAnimationContext) | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public override object GetNewCustomData() Returns Type Description object The custom data object for this animation. Overrides TMPShowAnimation.GetNewCustomData() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPShowAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPShowAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.ShowAnimations.html": {
    "href": "api/TMPEffects.TMPAnimations.ShowAnimations.html",
    "title": "Namespace TMPEffects.TMPAnimations.ShowAnimations | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.TMPAnimations.ShowAnimations Classes CharShowAnimation DummyShowAnimation FadeShowAnimation GrowShowAnimation MoveInShowAnimation PivotShowAnimation ShakeShowAnimation SpreadAnimation SpreadShowAnimation"
  },
  "api/TMPEffects.TMPAnimations.TMPAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.TMPAnimation.html",
    "title": "Class TMPAnimation | TMPEffects documentation",
    "keywords": "Class TMPAnimation Base class for animations. Inheritance object TMPAnimation AnimationStackObject CharAnimation ContPivotAnimation FadeAnimation FunkyAnimation GrowAnimation PaletteAnimation PivotAnimation ShakeAnimation WaveAnimation SpreadAnimation TMPAnimationParameterless Implements ITMPAnimation INotifyObjectChanged Namespace: TMPEffects.TMPAnimations Assembly: .dll Syntax public abstract class TMPAnimation : ScriptableObject, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public abstract void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public abstract object GetNewCustomData() Returns Type Description object The custom data object for this animation. | Edit this page View Source OnDestroy() Declaration protected virtual void OnDestroy() | Edit this page View Source OnValidate() Declaration protected virtual void OnValidate() | Edit this page View Source RaiseObjectChanged() Declaration protected void RaiseObjectChanged() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public abstract void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public abstract bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Events | Edit this page View Source ObjectChanged Declaration public event ObjectChangedEventHandler ObjectChanged Event Type Type Description ObjectChangedEventHandler Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.TMPAnimationParameterless.html": {
    "href": "api/TMPEffects.TMPAnimations.TMPAnimationParameterless.html",
    "title": "Class TMPAnimationParameterless | TMPEffects documentation",
    "keywords": "Class TMPAnimationParameterless Base class for animations that dont take parameters. Inheritance object TMPAnimation TMPAnimationParameterless Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPAnimation.Animate(CharData, IAnimationContext) TMPAnimation.GetNewCustomData() TMPAnimation.ObjectChanged TMPAnimation.OnValidate() TMPAnimation.OnDestroy() TMPAnimation.RaiseObjectChanged() Namespace: TMPEffects.TMPAnimations Assembly: .dll Syntax public abstract class TMPAnimationParameterless : TMPAnimation, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public override void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. Overrides TMPAnimation.SetParameters(object, IDictionary<string, string>) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPAnimation.ValidateParameters(IDictionary<string, string>) Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.TMPHideAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.TMPHideAnimation.html",
    "title": "Class TMPHideAnimation | TMPEffects documentation",
    "keywords": "Class TMPHideAnimation Base class for all hide animations. Inheritance object TMPHideAnimation HideAnimationStackObject CharHideAnimation DummyHideAnimation FadeHideAnimation GrowHideAnimation MoveInHideAnimation PivotHideAnimation ShakeHideAnimation SpreadHideAnimation Implements ITMPAnimation INotifyObjectChanged Namespace: TMPEffects.TMPAnimations Assembly: .dll Syntax public abstract class TMPHideAnimation : ScriptableObject, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public abstract void Animate(CharData charData, IAnimationContext context) Parameters Type Name Description CharData charData IAnimationContext context Data about the animator. | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public abstract object GetNewCustomData() Returns Type Description object The custom data object for this animation. | Edit this page View Source OnDestroy() Declaration protected virtual void OnDestroy() | Edit this page View Source OnValidate() Declaration protected virtual void OnValidate() | Edit this page View Source RaiseObjectChanged() Declaration protected void RaiseObjectChanged() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public abstract void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public abstract bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Events | Edit this page View Source ObjectChanged Declaration public event ObjectChangedEventHandler ObjectChanged Event Type Type Description ObjectChangedEventHandler Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.TMPShowAnimation.html": {
    "href": "api/TMPEffects.TMPAnimations.TMPShowAnimation.html",
    "title": "Class TMPShowAnimation | TMPEffects documentation",
    "keywords": "Class TMPShowAnimation Base class for all show animations. Inheritance object TMPShowAnimation ShowAnimationStackObject CharShowAnimation DummyShowAnimation FadeShowAnimation GrowShowAnimation MoveInShowAnimation PivotShowAnimation ShakeShowAnimation SpreadShowAnimation Implements ITMPAnimation INotifyObjectChanged Namespace: TMPEffects.TMPAnimations Assembly: .dll Syntax public abstract class TMPShowAnimation : ScriptableObject, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public abstract void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public abstract object GetNewCustomData() Returns Type Description object The custom data object for this animation. | Edit this page View Source OnDestroy() Declaration protected virtual void OnDestroy() | Edit this page View Source OnValidate() Declaration protected virtual void OnValidate() | Edit this page View Source RaiseObjectChanged() Declaration protected void RaiseObjectChanged() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public abstract void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public abstract bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Events | Edit this page View Source ObjectChanged Declaration public event ObjectChangedEventHandler ObjectChanged Event Type Type Description ObjectChangedEventHandler Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPAnimations.html": {
    "href": "api/TMPEffects.TMPAnimations.html",
    "title": "Namespace TMPEffects.TMPAnimations | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.TMPAnimations Classes AnimationContext Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. AnimationUtility Utility methods for animations. AnimationUtility.Wave A wave. Allows you to easily create periodic animations. You should take a look at the online documentation for this one: https://tmpeffects.luca3317.dev/docs/tmpanimator_animationutility_wave.html AnimationUtility.WaveBase Base class for AnimationUtility.Wave. Allows you to easily create periodic animations. You should take a look at the online documentation for this one: https://tmpeffects.luca3317.dev/docs/tmpanimator_animationutility_wave.html ReadOnlyAnimationContext TMPAnimation Base class for animations. TMPAnimationParameterless Base class for animations that dont take parameters. TMPHideAnimation Base class for all hide animations. TMPShowAnimation Base class for all show animations. Interfaces IAnimationContext Basic interface for animation contexts. ITMPAnimation Base interface for all TMPEffects animations. Enums AnimationUtility.Wave.PulseExtrema If the wave has a CrestWait or TroughWait, PulseExtrema defines whether an extremum is passed once the wait time begins, or once it ends."
  },
  "api/TMPEffects.TMPCommands.Commands.DebugCommand.html": {
    "href": "api/TMPEffects.TMPCommands.Commands.DebugCommand.html",
    "title": "Class DebugCommand | TMPEffects documentation",
    "keywords": "Class DebugCommand Inheritance object TMPCommand DebugCommand Implements ITMPCommand INotifyObjectChanged Inherited Members TMPCommand.ObjectChanged TMPCommand.OnValidate() TMPCommand.OnDestroy() TMPCommand.RaiseObjectChanged() Namespace: TMPEffects.TMPCommands.Commands Assembly: .dll Syntax public class DebugCommand : TMPCommand, ITMPCommand, INotifyObjectChanged Properties | Edit this page View Source ExecuteInstantly Whether the command is executed the moment the TMPWriter begin writing. Otherwise, it is executed when the TMPWriter shows the character at the corresponding index. Declaration public override bool ExecuteInstantly { get; } Property Value Type Description bool Overrides TMPCommand.ExecuteInstantly | Edit this page View Source ExecuteOnSkip Whether the command should be executed by the TMPWriter if its text position is skipped over. Declaration public override bool ExecuteOnSkip { get; } Property Value Type Description bool Overrides TMPCommand.ExecuteOnSkip | Edit this page View Source ExecuteRepeatable Whether the command may be executed multiple times if, for example, the TMPWriter is reset to an earlier text position after the command has been executed. An example for a command that should not be repeatable is one that triggers a quest, or adds an item to the player's inventory. Declaration public override bool ExecuteRepeatable { get; } Property Value Type Description bool Overrides TMPCommand.ExecuteRepeatable | Edit this page View Source TagType Declaration public override TagType TagType { get; } Property Value Type Description TagType Overrides TMPCommand.TagType Methods | Edit this page View Source ExecuteCommand(TMPCommandArgs) Execute the command. Declaration public override void ExecuteCommand(TMPCommandArgs args) Parameters Type Name Description TMPCommandArgs args The arguments for the command. Overrides TMPCommand.ExecuteCommand(TMPCommandArgs) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters The parameters to validate. Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPCommand.ValidateParameters(IDictionary<string, string>) Implements ITMPCommand INotifyObjectChanged"
  },
  "api/TMPEffects.TMPCommands.Commands.DelayCommand.html": {
    "href": "api/TMPEffects.TMPCommands.Commands.DelayCommand.html",
    "title": "Class DelayCommand | TMPEffects documentation",
    "keywords": "Class DelayCommand Inheritance object TMPCommand DelayCommand Implements ITMPCommand INotifyObjectChanged Inherited Members TMPCommand.ObjectChanged TMPCommand.OnValidate() TMPCommand.OnDestroy() TMPCommand.RaiseObjectChanged() Namespace: TMPEffects.TMPCommands.Commands Assembly: .dll Syntax public class DelayCommand : TMPCommand, ITMPCommand, INotifyObjectChanged Properties | Edit this page View Source ExecuteInstantly Whether the command is executed the moment the TMPWriter begin writing. Otherwise, it is executed when the TMPWriter shows the character at the corresponding index. Declaration public override bool ExecuteInstantly { get; } Property Value Type Description bool Overrides TMPCommand.ExecuteInstantly | Edit this page View Source ExecuteOnSkip Whether the command should be executed by the TMPWriter if its text position is skipped over. Declaration public override bool ExecuteOnSkip { get; } Property Value Type Description bool Overrides TMPCommand.ExecuteOnSkip | Edit this page View Source ExecuteRepeatable Whether the command may be executed multiple times if, for example, the TMPWriter is reset to an earlier text position after the command has been executed. An example for a command that should not be repeatable is one that triggers a quest, or adds an item to the player's inventory. Declaration public override bool ExecuteRepeatable { get; } Property Value Type Description bool Overrides TMPCommand.ExecuteRepeatable | Edit this page View Source TagType Declaration public override TagType TagType { get; } Property Value Type Description TagType Overrides TMPCommand.TagType Methods | Edit this page View Source ExecuteCommand(TMPCommandArgs) Execute the command. Declaration public override void ExecuteCommand(TMPCommandArgs args) Parameters Type Name Description TMPCommandArgs args The arguments for the command. Overrides TMPCommand.ExecuteCommand(TMPCommandArgs) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters The parameters to validate. Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPCommand.ValidateParameters(IDictionary<string, string>) Implements ITMPCommand INotifyObjectChanged"
  },
  "api/TMPEffects.TMPCommands.Commands.ShowCommand.html": {
    "href": "api/TMPEffects.TMPCommands.Commands.ShowCommand.html",
    "title": "Class ShowCommand | TMPEffects documentation",
    "keywords": "Class ShowCommand Inheritance object TMPCommand ShowCommand Implements ITMPCommand INotifyObjectChanged Inherited Members TMPCommand.ObjectChanged TMPCommand.OnValidate() TMPCommand.OnDestroy() TMPCommand.RaiseObjectChanged() Namespace: TMPEffects.TMPCommands.Commands Assembly: .dll Syntax public class ShowCommand : TMPCommand, ITMPCommand, INotifyObjectChanged Properties | Edit this page View Source ExecuteInstantly Whether the command is executed the moment the TMPWriter begin writing. Otherwise, it is executed when the TMPWriter shows the character at the corresponding index. Declaration public override bool ExecuteInstantly { get; } Property Value Type Description bool Overrides TMPCommand.ExecuteInstantly | Edit this page View Source ExecuteOnSkip Whether the command should be executed by the TMPWriter if its text position is skipped over. Declaration public override bool ExecuteOnSkip { get; } Property Value Type Description bool Overrides TMPCommand.ExecuteOnSkip | Edit this page View Source ExecuteRepeatable Whether the command may be executed multiple times if, for example, the TMPWriter is reset to an earlier text position after the command has been executed. An example for a command that should not be repeatable is one that triggers a quest, or adds an item to the player's inventory. Declaration public override bool ExecuteRepeatable { get; } Property Value Type Description bool Overrides TMPCommand.ExecuteRepeatable | Edit this page View Source TagType Declaration public override TagType TagType { get; } Property Value Type Description TagType Overrides TMPCommand.TagType Methods | Edit this page View Source ExecuteCommand(TMPCommandArgs) Execute the command. Declaration public override void ExecuteCommand(TMPCommandArgs args) Parameters Type Name Description TMPCommandArgs args The arguments for the command. Overrides TMPCommand.ExecuteCommand(TMPCommandArgs) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters The parameters to validate. Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPCommand.ValidateParameters(IDictionary<string, string>) Implements ITMPCommand INotifyObjectChanged"
  },
  "api/TMPEffects.TMPCommands.Commands.SkippableCommand.html": {
    "href": "api/TMPEffects.TMPCommands.Commands.SkippableCommand.html",
    "title": "Class SkippableCommand | TMPEffects documentation",
    "keywords": "Class SkippableCommand Inheritance object TMPCommand SkippableCommand Implements ITMPCommand INotifyObjectChanged Inherited Members TMPCommand.ObjectChanged TMPCommand.OnValidate() TMPCommand.OnDestroy() TMPCommand.RaiseObjectChanged() Namespace: TMPEffects.TMPCommands.Commands Assembly: .dll Syntax public class SkippableCommand : TMPCommand, ITMPCommand, INotifyObjectChanged Properties | Edit this page View Source ExecuteInstantly Whether the command is executed the moment the TMPWriter begin writing. Otherwise, it is executed when the TMPWriter shows the character at the corresponding index. Declaration public override bool ExecuteInstantly { get; } Property Value Type Description bool Overrides TMPCommand.ExecuteInstantly | Edit this page View Source ExecuteOnSkip Whether the command should be executed by the TMPWriter if its text position is skipped over. Declaration public override bool ExecuteOnSkip { get; } Property Value Type Description bool Overrides TMPCommand.ExecuteOnSkip | Edit this page View Source ExecuteRepeatable Whether the command may be executed multiple times if, for example, the TMPWriter is reset to an earlier text position after the command has been executed. An example for a command that should not be repeatable is one that triggers a quest, or adds an item to the player's inventory. Declaration public override bool ExecuteRepeatable { get; } Property Value Type Description bool Overrides TMPCommand.ExecuteRepeatable | Edit this page View Source TagType Declaration public override TagType TagType { get; } Property Value Type Description TagType Overrides TMPCommand.TagType Methods | Edit this page View Source ExecuteCommand(TMPCommandArgs) Execute the command. Declaration public override void ExecuteCommand(TMPCommandArgs args) Parameters Type Name Description TMPCommandArgs args The arguments for the command. Overrides TMPCommand.ExecuteCommand(TMPCommandArgs) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters The parameters to validate. Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPCommand.ValidateParameters(IDictionary<string, string>) Implements ITMPCommand INotifyObjectChanged"
  },
  "api/TMPEffects.TMPCommands.Commands.WaitCommand.html": {
    "href": "api/TMPEffects.TMPCommands.Commands.WaitCommand.html",
    "title": "Class WaitCommand | TMPEffects documentation",
    "keywords": "Class WaitCommand Inheritance object TMPCommand WaitCommand Implements ITMPCommand INotifyObjectChanged Inherited Members TMPCommand.ObjectChanged TMPCommand.OnValidate() TMPCommand.OnDestroy() TMPCommand.RaiseObjectChanged() Namespace: TMPEffects.TMPCommands.Commands Assembly: .dll Syntax public class WaitCommand : TMPCommand, ITMPCommand, INotifyObjectChanged Properties | Edit this page View Source ExecuteInstantly Whether the command is executed the moment the TMPWriter begin writing. Otherwise, it is executed when the TMPWriter shows the character at the corresponding index. Declaration public override bool ExecuteInstantly { get; } Property Value Type Description bool Overrides TMPCommand.ExecuteInstantly | Edit this page View Source ExecuteOnSkip Whether the command should be executed by the TMPWriter if its text position is skipped over. Declaration public override bool ExecuteOnSkip { get; } Property Value Type Description bool Overrides TMPCommand.ExecuteOnSkip | Edit this page View Source ExecuteRepeatable Whether the command may be executed multiple times if, for example, the TMPWriter is reset to an earlier text position after the command has been executed. An example for a command that should not be repeatable is one that triggers a quest, or adds an item to the player's inventory. Declaration public override bool ExecuteRepeatable { get; } Property Value Type Description bool Overrides TMPCommand.ExecuteRepeatable | Edit this page View Source TagType Declaration public override TagType TagType { get; } Property Value Type Description TagType Overrides TMPCommand.TagType Methods | Edit this page View Source ExecuteCommand(TMPCommandArgs) Execute the command. Declaration public override void ExecuteCommand(TMPCommandArgs args) Parameters Type Name Description TMPCommandArgs args The arguments for the command. Overrides TMPCommand.ExecuteCommand(TMPCommandArgs) | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public override bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters The parameters to validate. Returns Type Description bool true if the parameters were successfully validated; false otherwise. Overrides TMPCommand.ValidateParameters(IDictionary<string, string>) Implements ITMPCommand INotifyObjectChanged"
  },
  "api/TMPEffects.TMPCommands.Commands.html": {
    "href": "api/TMPEffects.TMPCommands.Commands.html",
    "title": "Namespace TMPEffects.TMPCommands.Commands | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.TMPCommands.Commands Classes DebugCommand DelayCommand ShowCommand SkippableCommand WaitCommand"
  },
  "api/TMPEffects.TMPCommands.ITMPCommand.html": {
    "href": "api/TMPEffects.TMPCommands.ITMPCommand.html",
    "title": "Interface ITMPCommand | TMPEffects documentation",
    "keywords": "Interface ITMPCommand Base interface for all TMPEffects commands. Namespace: TMPEffects.TMPCommands Assembly: .dll Syntax public interface ITMPCommand Properties | Edit this page View Source ExecuteInstantly Whether the command is executed the moment the TMPWriter begin writing. Otherwise, it is executed when the TMPWriter shows the character at the corresponding index. Declaration bool ExecuteInstantly { get; } Property Value Type Description bool | Edit this page View Source ExecuteOnSkip Whether the command should be executed by the TMPWriter if its text position is skipped over. Declaration bool ExecuteOnSkip { get; } Property Value Type Description bool | Edit this page View Source ExecuteRepeatable Whether the command may be executed multiple times if, for example, the TMPWriter is reset to an earlier text position after the command has been executed. An example for a command that should not be repeatable is one that triggers a quest, or adds an item to the player's inventory. Declaration bool ExecuteRepeatable { get; } Property Value Type Description bool | Edit this page View Source TagType Declaration TagType TagType { get; } Property Value Type Description TagType Methods | Edit this page View Source ExecuteCommand(TMPCommandArgs) Execute the command. Declaration void ExecuteCommand(TMPCommandArgs args) Parameters Type Name Description TMPCommandArgs args The arguments for the command. | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters The parameters to validate. Returns Type Description bool true if the parameters were successfully validated; false otherwise."
  },
  "api/TMPEffects.TMPCommands.TMPCommand.html": {
    "href": "api/TMPEffects.TMPCommands.TMPCommand.html",
    "title": "Class TMPCommand | TMPEffects documentation",
    "keywords": "Class TMPCommand Base class for commands. Inheritance object TMPCommand DebugCommand DelayCommand ShowCommand SkippableCommand WaitCommand Implements ITMPCommand INotifyObjectChanged Namespace: TMPEffects.TMPCommands Assembly: .dll Syntax public abstract class TMPCommand : ScriptableObject, ITMPCommand, INotifyObjectChanged Properties | Edit this page View Source ExecuteInstantly Whether the command is executed the moment the TMPWriter begin writing. Otherwise, it is executed when the TMPWriter shows the character at the corresponding index. Declaration public abstract bool ExecuteInstantly { get; } Property Value Type Description bool | Edit this page View Source ExecuteOnSkip Whether the command should be executed by the TMPWriter if its text position is skipped over. Declaration public abstract bool ExecuteOnSkip { get; } Property Value Type Description bool | Edit this page View Source ExecuteRepeatable Whether the command may be executed multiple times if, for example, the TMPWriter is reset to an earlier text position after the command has been executed. An example for a command that should not be repeatable is one that triggers a quest, or adds an item to the player's inventory. Declaration public virtual bool ExecuteRepeatable { get; } Property Value Type Description bool | Edit this page View Source TagType Declaration public abstract TagType TagType { get; } Property Value Type Description TagType Methods | Edit this page View Source ExecuteCommand(TMPCommandArgs) Execute the command. Declaration public abstract void ExecuteCommand(TMPCommandArgs args) Parameters Type Name Description TMPCommandArgs args The arguments for the command. | Edit this page View Source OnDestroy() Declaration protected virtual void OnDestroy() | Edit this page View Source OnValidate() Declaration protected virtual void OnValidate() | Edit this page View Source RaiseObjectChanged() Declaration protected void RaiseObjectChanged() | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public abstract bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters The parameters to validate. Returns Type Description bool true if the parameters were successfully validated; false otherwise. Events | Edit this page View Source ObjectChanged Declaration public event ObjectChangedEventHandler ObjectChanged Event Type Type Description ObjectChangedEventHandler Implements ITMPCommand INotifyObjectChanged"
  },
  "api/TMPEffects.TMPCommands.TMPCommandArgs.html": {
    "href": "api/TMPEffects.TMPCommands.TMPCommandArgs.html",
    "title": "Class TMPCommandArgs | TMPEffects documentation",
    "keywords": "Class TMPCommandArgs The argument object for ITMPCommand. Inheritance object TMPCommandArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.TMPCommands Assembly: .dll Syntax public class TMPCommandArgs Constructors | Edit this page View Source TMPCommandArgs(TMPEffectTag, TMPEffectTagIndices, TMPWriter) Declaration public TMPCommandArgs(TMPEffectTag tag, TMPEffectTagIndices indices, TMPWriter writer) Parameters Type Name Description TMPEffectTag tag TMPEffectTagIndices indices TMPWriter writer Fields | Edit this page View Source indices The indices of the tag. Declaration public readonly TMPEffectTagIndices indices Field Value Type Description TMPEffectTagIndices | Edit this page View Source tag The tag of the command. Declaration public readonly TMPEffectTag tag Field Value Type Description TMPEffectTag | Edit this page View Source writer The TMPWriter that executed this command. Declaration public readonly TMPWriter writer Field Value Type Description TMPWriter"
  },
  "api/TMPEffects.TMPCommands.TMPSceneCommand.html": {
    "href": "api/TMPEffects.TMPCommands.TMPSceneCommand.html",
    "title": "Struct TMPSceneCommand | TMPEffects documentation",
    "keywords": "Struct TMPSceneCommand Struct defining scene commands. Implements ITMPCommand Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: TMPEffects.TMPCommands Assembly: .dll Syntax [Serializable] public struct TMPSceneCommand : ITMPCommand Properties | Edit this page View Source ExecuteInstantly Whether the command is executed the moment the TMPWriter begin writing. Otherwise, it is executed when the TMPWriter shows the character at the corresponding index. Declaration public bool ExecuteInstantly { get; } Property Value Type Description bool | Edit this page View Source ExecuteOnSkip Whether the command should be executed by the TMPWriter if its text position is skipped over. Declaration public bool ExecuteOnSkip { get; } Property Value Type Description bool | Edit this page View Source ExecuteRepeatable Whether the command may be executed multiple times if, for example, the TMPWriter is reset to an earlier text position after the command has been executed. An example for a command that should not be repeatable is one that triggers a quest, or adds an item to the player's inventory. Declaration public bool ExecuteRepeatable { get; } Property Value Type Description bool | Edit this page View Source TagType Declaration public TagType TagType { get; } Property Value Type Description TagType Methods | Edit this page View Source ExecuteCommand(TMPCommandArgs) Execute the command. Declaration public void ExecuteCommand(TMPCommandArgs args) Parameters Type Name Description TMPCommandArgs args The arguments for the command. | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters The parameters to validate. Returns Type Description bool true if the parameters were successfully validated; false otherwise. Implements ITMPCommand"
  },
  "api/TMPEffects.TMPCommands.TagType.html": {
    "href": "api/TMPEffects.TMPCommands.TagType.html",
    "title": "Enum TagType | TMPEffects documentation",
    "keywords": "Enum TagType Namespace: TMPEffects.TMPCommands Assembly: .dll Syntax public enum TagType Fields Name Description Block Either Index"
  },
  "api/TMPEffects.TMPCommands.html": {
    "href": "api/TMPEffects.TMPCommands.html",
    "title": "Namespace TMPEffects.TMPCommands | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.TMPCommands Classes TMPCommand Base class for commands. TMPCommandArgs The argument object for ITMPCommand. Structs TMPSceneCommand Struct defining scene commands. Interfaces ITMPCommand Base interface for all TMPEffects commands. Enums TagType"
  },
  "api/TMPEffects.TMPEvents.TMPEvent.html": {
    "href": "api/TMPEffects.TMPEvents.TMPEvent.html",
    "title": "Class TMPEvent | TMPEffects documentation",
    "keywords": "Class TMPEvent Class used by TMPWriter to raise event tags. Inheritance object TMPEvent Namespace: TMPEffects.TMPEvents Assembly: .dll Syntax [Serializable] public class TMPEvent : UnityEvent<TMPEventArgs> Constructors | Edit this page View Source TMPEvent() Declaration public TMPEvent()"
  },
  "api/TMPEffects.TMPEvents.TMPEventArgs.html": {
    "href": "api/TMPEffects.TMPEvents.TMPEventArgs.html",
    "title": "Class TMPEventArgs | TMPEffects documentation",
    "keywords": "Class TMPEventArgs The argument object for TMPEvent. Inheritance object EventArgs TMPEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.TMPEvents Assembly: .dll Syntax public class TMPEventArgs : EventArgs Constructors | Edit this page View Source TMPEventArgs(TMPEffectTag, TMPEffectTagIndices, TMPWriter) Declaration public TMPEventArgs(TMPEffectTag tag, TMPEffectTagIndices indices, TMPWriter writer) Parameters Type Name Description TMPEffectTag tag TMPEffectTagIndices indices TMPWriter writer Properties | Edit this page View Source Indices The indices of the tag. Declaration public TMPEffectTagIndices Indices { get; } Property Value Type Description TMPEffectTagIndices | Edit this page View Source Tag The tag of the event. Declaration public TMPEffectTag Tag { get; } Property Value Type Description TMPEffectTag | Edit this page View Source Writer The TMPWriter that invoked this event. Declaration public TMPWriter Writer { get; } Property Value Type Description TMPWriter"
  },
  "api/TMPEffects.TMPEvents.html": {
    "href": "api/TMPEffects.TMPEvents.html",
    "title": "Namespace TMPEffects.TMPEvents | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.TMPEvents Classes TMPEvent Class used by TMPWriter to raise event tags. TMPEventArgs The argument object for TMPEvent."
  },
  "api/TMPEffects.TMPSceneAnimations.TMPSceneAnimation.html": {
    "href": "api/TMPEffects.TMPSceneAnimations.TMPSceneAnimation.html",
    "title": "Class TMPSceneAnimation | TMPEffects documentation",
    "keywords": "Class TMPSceneAnimation Base class for all BasicSceneAnimations. Inheritance object TMPSceneAnimationBase TMPSceneAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPSceneAnimationBase.Animate(CharData, IAnimationContext) TMPSceneAnimationBase.GetNewCustomData() TMPSceneAnimationBase.SetParameters(object, IDictionary<string, string>) TMPSceneAnimationBase.ValidateParameters(IDictionary<string, string>) TMPSceneAnimationBase.ObjectChanged TMPSceneAnimationBase.OnValidate() TMPSceneAnimationBase.OnDestroy() TMPSceneAnimationBase.RaiseObjectChanged() Namespace: TMPEffects.TMPSceneAnimations Assembly: .dll Syntax public abstract class TMPSceneAnimation : TMPSceneAnimationBase, ITMPAnimation, INotifyObjectChanged Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPSceneAnimations.TMPSceneAnimationBase.html": {
    "href": "api/TMPEffects.TMPSceneAnimations.TMPSceneAnimationBase.html",
    "title": "Class TMPSceneAnimationBase | TMPEffects documentation",
    "keywords": "Class TMPSceneAnimationBase Base class for all SceneAnimations. Inheritance object TMPSceneAnimationBase TMPSceneAnimation TMPSceneHideAnimation TMPSceneShowAnimation Implements ITMPAnimation INotifyObjectChanged Namespace: TMPEffects.TMPSceneAnimations Assembly: .dll Syntax public abstract class TMPSceneAnimationBase : MonoBehaviour, ITMPAnimation, INotifyObjectChanged Methods | Edit this page View Source Animate(CharData, IAnimationContext) Animate the given character. Declaration public abstract void Animate(CharData cData, IAnimationContext context) Parameters Type Name Description CharData cData Data about the character. IAnimationContext context Data about the animator. | Edit this page View Source GetNewCustomData() Create and get a new custom data object for this animation. Declaration public abstract object GetNewCustomData() Returns Type Description object The custom data object for this animation. | Edit this page View Source OnDestroy() Declaration protected virtual void OnDestroy() | Edit this page View Source OnValidate() Declaration protected virtual void OnValidate() | Edit this page View Source RaiseObjectChanged() Declaration protected void RaiseObjectChanged() | Edit this page View Source SetParameters(object, IDictionary<string, string>) Set the parameters for the animation. Declaration public abstract void SetParameters(object customData, IDictionary<string, string> parameters) Parameters Type Name Description object customData The custom data for this animation. IDictionary<string, string> parameters Parameters as key-value-pairs. | Edit this page View Source ValidateParameters(IDictionary<string, string>) Validate the parameters. Used to validate tags. Declaration public abstract bool ValidateParameters(IDictionary<string, string> parameters) Parameters Type Name Description IDictionary<string, string> parameters Returns Type Description bool true if the parameters were successfully validated; false otherwise. Events | Edit this page View Source ObjectChanged Declaration public event ObjectChangedEventHandler ObjectChanged Event Type Type Description ObjectChangedEventHandler Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPSceneAnimations.TMPSceneHideAnimation.html": {
    "href": "api/TMPEffects.TMPSceneAnimations.TMPSceneHideAnimation.html",
    "title": "Class TMPSceneHideAnimation | TMPEffects documentation",
    "keywords": "Class TMPSceneHideAnimation Base class for all SceneHideAnimations. Inheritance object TMPSceneAnimationBase TMPSceneHideAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPSceneAnimationBase.Animate(CharData, IAnimationContext) TMPSceneAnimationBase.GetNewCustomData() TMPSceneAnimationBase.SetParameters(object, IDictionary<string, string>) TMPSceneAnimationBase.ValidateParameters(IDictionary<string, string>) TMPSceneAnimationBase.ObjectChanged TMPSceneAnimationBase.OnValidate() TMPSceneAnimationBase.OnDestroy() TMPSceneAnimationBase.RaiseObjectChanged() Namespace: TMPEffects.TMPSceneAnimations Assembly: .dll Syntax public abstract class TMPSceneHideAnimation : TMPSceneAnimationBase, ITMPAnimation, INotifyObjectChanged Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPSceneAnimations.TMPSceneShowAnimation.html": {
    "href": "api/TMPEffects.TMPSceneAnimations.TMPSceneShowAnimation.html",
    "title": "Class TMPSceneShowAnimation | TMPEffects documentation",
    "keywords": "Class TMPSceneShowAnimation Base class for all SceneShowAnimations. Inheritance object TMPSceneAnimationBase TMPSceneShowAnimation Implements ITMPAnimation INotifyObjectChanged Inherited Members TMPSceneAnimationBase.Animate(CharData, IAnimationContext) TMPSceneAnimationBase.GetNewCustomData() TMPSceneAnimationBase.SetParameters(object, IDictionary<string, string>) TMPSceneAnimationBase.ValidateParameters(IDictionary<string, string>) TMPSceneAnimationBase.ObjectChanged TMPSceneAnimationBase.OnValidate() TMPSceneAnimationBase.OnDestroy() TMPSceneAnimationBase.RaiseObjectChanged() Namespace: TMPEffects.TMPSceneAnimations Assembly: .dll Syntax public abstract class TMPSceneShowAnimation : TMPSceneAnimationBase, ITMPAnimation, INotifyObjectChanged Implements ITMPAnimation INotifyObjectChanged"
  },
  "api/TMPEffects.TMPSceneAnimations.html": {
    "href": "api/TMPEffects.TMPSceneAnimations.html",
    "title": "Namespace TMPEffects.TMPSceneAnimations | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.TMPSceneAnimations Classes TMPSceneAnimation Base class for all BasicSceneAnimations. TMPSceneAnimationBase Base class for all SceneAnimations. TMPSceneHideAnimation Base class for all SceneHideAnimations. TMPSceneShowAnimation Base class for all SceneShowAnimations."
  },
  "api/TMPEffects.Tags.Collections.CachedCollection-1.MinMax.html": {
    "href": "api/TMPEffects.Tags.Collections.CachedCollection-1.MinMax.html",
    "title": "Class CachedCollection<T>.MinMax | TMPEffects documentation",
    "keywords": "Class CachedCollection<T>.MinMax The minimum and maximum collection index of cached tags potentially relevant to a given text index. Inheritance object CachedCollection<T>.MinMax Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.Tags.Collections Assembly: .dll Syntax public class CachedCollection<T>.MinMax Constructors | Edit this page View Source MinMax(int) Declaration public MinMax(int textIndex) Parameters Type Name Description int textIndex Fields | Edit this page View Source MaxIndex The maximum collection index of cached tags potentially relevant to a given text index. Declaration public int MaxIndex Field Value Type Description int | Edit this page View Source MinIndex The minimum collection index of cached tags potentially relevant to a given text index. Declaration public int MinIndex Field Value Type Description int"
  },
  "api/TMPEffects.Tags.Collections.CachedCollection-1.StructContainingEnumerable.html": {
    "href": "api/TMPEffects.Tags.Collections.CachedCollection-1.StructContainingEnumerable.html",
    "title": "Struct CachedCollection<T>.StructContainingEnumerable | TMPEffects documentation",
    "keywords": "Struct CachedCollection<T>.StructContainingEnumerable Helper struct for GetContaining_NonAlloc(int). Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: TMPEffects.Tags.Collections Assembly: .dll Syntax public struct CachedCollection<T>.StructContainingEnumerable Constructors | Edit this page View Source StructContainingEnumerable(List<T>, int, int, int) Declaration public StructContainingEnumerable(List<T> pool, int containedIndex, int maxIndex, int minIndex) Parameters Type Name Description List<T> pool int containedIndex int maxIndex int minIndex Methods | Edit this page View Source GetEnumerator() Declaration public CachedCollection<T>.StructContainingEnumerator GetEnumerator() Returns Type Description CachedCollection<T>.StructContainingEnumerator"
  },
  "api/TMPEffects.Tags.Collections.CachedCollection-1.StructContainingEnumerator.html": {
    "href": "api/TMPEffects.Tags.Collections.CachedCollection-1.StructContainingEnumerator.html",
    "title": "Struct CachedCollection<T>.StructContainingEnumerator | TMPEffects documentation",
    "keywords": "Struct CachedCollection<T>.StructContainingEnumerator Helper struct for GetContaining_NonAlloc(int). Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: TMPEffects.Tags.Collections Assembly: .dll Syntax public struct CachedCollection<T>.StructContainingEnumerator Properties | Edit this page View Source Current Declaration public T Current { get; } Property Value Type Description T Methods | Edit this page View Source MoveNext() Declaration public bool MoveNext() Returns Type Description bool | Edit this page View Source Reset() Declaration public void Reset()"
  },
  "api/TMPEffects.Tags.Collections.CachedCollection-1.StructReversedContainingEnumerable.html": {
    "href": "api/TMPEffects.Tags.Collections.CachedCollection-1.StructReversedContainingEnumerable.html",
    "title": "Struct CachedCollection<T>.StructReversedContainingEnumerable | TMPEffects documentation",
    "keywords": "Struct CachedCollection<T>.StructReversedContainingEnumerable Helper struct for GetContainingReversed_NonAlloc(int). Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: TMPEffects.Tags.Collections Assembly: .dll Syntax public struct CachedCollection<T>.StructReversedContainingEnumerable Constructors | Edit this page View Source StructReversedContainingEnumerable(List<T>, int, int, int) Declaration public StructReversedContainingEnumerable(List<T> pool, int containedIndex, int maxIndex, int minIndex) Parameters Type Name Description List<T> pool int containedIndex int maxIndex int minIndex Methods | Edit this page View Source GetEnumerator() Declaration public CachedCollection<T>.StructReversedContainingEnumerator GetEnumerator() Returns Type Description CachedCollection<T>.StructReversedContainingEnumerator"
  },
  "api/TMPEffects.Tags.Collections.CachedCollection-1.StructReversedContainingEnumerator.html": {
    "href": "api/TMPEffects.Tags.Collections.CachedCollection-1.StructReversedContainingEnumerator.html",
    "title": "Struct CachedCollection<T>.StructReversedContainingEnumerator | TMPEffects documentation",
    "keywords": "Struct CachedCollection<T>.StructReversedContainingEnumerator Helper struct for GetContainingReversed_NonAlloc(int). Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: TMPEffects.Tags.Collections Assembly: .dll Syntax public struct CachedCollection<T>.StructReversedContainingEnumerator Properties | Edit this page View Source Current Declaration public T Current { get; } Property Value Type Description T Methods | Edit this page View Source MoveNext() Declaration public bool MoveNext() Returns Type Description bool | Edit this page View Source Reset() Declaration public void Reset()"
  },
  "api/TMPEffects.Tags.Collections.CachedCollection-1.html": {
    "href": "api/TMPEffects.Tags.Collections.CachedCollection-1.html",
    "title": "Class CachedCollection<T> | TMPEffects documentation",
    "keywords": "Class CachedCollection<T> Manages a collection of ITagWrapper that represent a cached tag. Will keep itself synchronized with the given ObservableTagCollection. Inheritance object CachedCollection<T> Implements IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.Tags.Collections Assembly: .dll Syntax public class CachedCollection<T> : IEnumerable<T>, IEnumerable where T : ITagWrapper Type Parameters Name Description T The type of tag wrapper / cached tags. Remarks Designed for fast \"Get tags that contain index\" operations. Ideally use along with TMPEffects.Tags.Collections.TagCollectionManager<TKey> to get the ObservableTagCollection (see implementations of both TMPAnimator and TMPWriter for examples). Constructors | Edit this page View Source CachedCollection(ITagCacher<T>, ObservableTagCollection) Declaration public CachedCollection(ITagCacher<T> cacher, ObservableTagCollection tagCollection) Parameters Type Name Description ITagCacher<T> cacher ObservableTagCollection tagCollection Properties | Edit this page View Source Count Amount of cached tags contained in this collection. Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source this[int] Get the cached tag of type T at the given collection index. Declaration public T this[int index] { get; } Parameters Type Name Description int index The collection index. Property Value Type Description T The cached tag of type T at the given collection index. Exceptions Type Condition ArgumentOutOfRangeException Methods | Edit this page View Source GetAt(int) Enumerates all cached tags that start at the given text index. Declaration public IEnumerable<T> GetAt(int textIndex) Parameters Type Name Description int textIndex The text index. Returns Type Description IEnumerable<T> All cached tags that start at the given text index. | Edit this page View Source GetContaining(int) Enumerates all cached tags that contain the given text index. Declaration public IEnumerable<T> GetContaining(int textIndex) Parameters Type Name Description int textIndex The text index. Returns Type Description IEnumerable<T> All cached tags that contain the given text index. | Edit this page View Source GetContainingReversed_NonAlloc(int) Enumerates all cached tags that contain the given text index in reversed order, without allocating any memory. Declaration public CachedCollection<T>.StructReversedContainingEnumerable GetContainingReversed_NonAlloc(int textIndex) Parameters Type Name Description int textIndex The text index. Returns Type Description CachedCollection<T>.StructReversedContainingEnumerable All cached tags that contain the given text index. | Edit this page View Source GetContaining_NonAlloc(int) Enumerates all cached tags that contain the given text index, without allocating any memory. Declaration public CachedCollection<T>.StructContainingEnumerable GetContaining_NonAlloc(int textIndex) Parameters Type Name Description int textIndex The text index. Returns Type Description CachedCollection<T>.StructContainingEnumerable All cached tags that contain the given text index. | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator<T> An enumerator that can be used to iterate through the collection. | Edit this page View Source HasAny() Whether this collection has any cached tags. Declaration public bool HasAny() Returns Type Description bool true if there is at least one cached tag; false otherwise. | Edit this page View Source HasAnyAt(int) Whether this collection has any cached tags that start at the given text index. Declaration public bool HasAnyAt(int index) Parameters Type Name Description int index Returns Type Description bool true if there is at least one cached tag that starts at the given text index; false otherwise. | Edit this page View Source HasAnyContaining(int) Whether this collection has any cached tags that contain the given text index. Declaration public bool HasAnyContaining(int textIndex) Parameters Type Name Description int textIndex The text index. Returns Type Description bool true if there is at least one cached tag that contains the given text index; false otherwise. | Edit this page View Source MinMaxAt(int) Get the CachedCollection<T>.MinMax for a text index. Declaration public CachedCollection<T>.MinMax MinMaxAt(int textIndex) Parameters Type Name Description int textIndex The text index. Returns Type Description CachedCollection<T>.MinMax The CachedCollection<T>.MinMax for the text index, if one exists; otherwise null. Implements IEnumerable<T> IEnumerable"
  },
  "api/TMPEffects.Tags.Collections.IReadOnlyTagCollection.html": {
    "href": "api/TMPEffects.Tags.Collections.IReadOnlyTagCollection.html",
    "title": "Interface IReadOnlyTagCollection | TMPEffects documentation",
    "keywords": "Interface IReadOnlyTagCollection A readonly collection of TMPEffectTagTuple. Inherited Members IReadOnlyCollection<TMPEffectTagTuple>.Count IEnumerable<TMPEffectTagTuple>.GetEnumerator() Namespace: TMPEffects.Tags.Collections Assembly: .dll Syntax public interface IReadOnlyTagCollection : IReadOnlyCollection<TMPEffectTagTuple>, IEnumerable<TMPEffectTagTuple>, IEnumerable Properties | Edit this page View Source TagCount The amount of TMPEffectTagTuple in this collection. Declaration int TagCount { get; } Property Value Type Description int Methods | Edit this page View Source Contains(TMPEffectTag, TMPEffectTagIndices?) Whether this collection contains the given tag with the given indices (if supplied). Declaration bool Contains(TMPEffectTag tag, TMPEffectTagIndices? indices = null) Parameters Type Name Description TMPEffectTag tag The tag to check. TMPEffectTagIndices? indices The tag indices. If you don't care about the tag's indices, leave as default. Returns Type Description bool true if this collection contains the given tag with the given indices (if supplied); otherwise false. | Edit this page View Source IndicesOf(TMPEffectTag) Get the associated indices of the given tag. Declaration TMPEffectTagIndices? IndicesOf(TMPEffectTag tag) Parameters Type Name Description TMPEffectTag tag The tag to get the indices of. Returns Type Description TMPEffectTagIndices? The indices of the given tag, if the tag is contained in the collection; otherwise null. | Edit this page View Source TagAt(int, int?) Get the tag at the given startIndex with the correct order. If order is left to default, the first tag at startIndex will be returned. Declaration TMPEffectTag TagAt(int startIndex, int? order = null) Parameters Type Name Description int startIndex The start index. int? order The order at the start index. Returns Type Description TMPEffectTag The tag at the given indices, if it exists; otherwise null. | Edit this page View Source TagsAt(int) Get the tags starting at the given startIndex. Declaration IEnumerable<TMPEffectTagTuple> TagsAt(int startIndex) Parameters Type Name Description int startIndex The start index. Returns Type Description IEnumerable<TMPEffectTagTuple> All tags starting at the given startIndex. | Edit this page View Source TagsAt(int, TMPEffectTagTuple[], int) Get the tags starting at the given startIndex. Declaration int TagsAt(int startIndex, TMPEffectTagTuple[] buffer, int bufferIndex = 0) Parameters Type Name Description int startIndex The start index. TMPEffectTagTuple[] buffer The buffer the tags will be stored in. int bufferIndex The offset index of the buffer, i.e. the index at which the tags should be inserted into buffer. Returns Type Description int The amount of tags starting at the given startIndex."
  },
  "api/TMPEffects.Tags.Collections.ITagCollection.html": {
    "href": "api/TMPEffects.Tags.Collections.ITagCollection.html",
    "title": "Interface ITagCollection | TMPEffects documentation",
    "keywords": "Interface ITagCollection A writable collection of TMPEffectTagTuple. Inherited Members IReadOnlyTagCollection.TagCount IReadOnlyTagCollection.Contains(TMPEffectTag, TMPEffectTagIndices?) IReadOnlyTagCollection.IndicesOf(TMPEffectTag) IReadOnlyTagCollection.TagsAt(int, TMPEffectTagTuple[], int) IReadOnlyTagCollection.TagsAt(int) IReadOnlyTagCollection.TagAt(int, int?) IReadOnlyCollection<TMPEffectTagTuple>.Count IEnumerable<TMPEffectTagTuple>.GetEnumerator() Namespace: TMPEffects.Tags.Collections Assembly: .dll Syntax public interface ITagCollection : IReadOnlyTagCollection, IReadOnlyCollection<TMPEffectTagTuple>, IEnumerable<TMPEffectTagTuple>, IEnumerable Methods | Edit this page View Source Clear() Clear the entire collection. Declaration void Clear() | Edit this page View Source Remove(TMPEffectTag, TMPEffectTagIndices?) Remove the given tag, with the specified indices (if supplied). Declaration bool Remove(TMPEffectTag tag, TMPEffectTagIndices? indices = null) Parameters Type Name Description TMPEffectTag tag The tag to remove. TMPEffectTagIndices? indices The indices of the tag. Returns Type Description bool true if the tag was removed; false otherwise. | Edit this page View Source RemoveAllAt(int, TMPEffectTagTuple[], int) Remove all tags starting at the given startIndex. Declaration int RemoveAllAt(int startIndex, TMPEffectTagTuple[] buffer = null, int bufferIndex = 0) Parameters Type Name Description int startIndex The start index. TMPEffectTagTuple[] buffer Buffer to save the removed tags into. Leave at default if you do not want to get the tags. int bufferIndex The offset index of the buffer, i.e. the index at which the tags should be inserted into buffer. Returns Type Description int The amount of removed tags. | Edit this page View Source RemoveAt(int, int?) Remove the tag starting at the given startIndex with the correct order. If order is left to default, the first tag at startIndex will be removed. Declaration bool RemoveAt(int startIndex, int? order = null) Parameters Type Name Description int startIndex The start index. int? order The order at the start index. Returns Type Description bool true if a tag was removed; false otherwise. | Edit this page View Source TryAdd(TMPEffectTag, int, int, int?) Attempt to add a new tag to the collection. If orderAtIndex is left to default, the order will be assigned so it is the first tag at the given startIndex. Declaration bool TryAdd(TMPEffectTag tag, int startIndex = 0, int endIndex = -1, int? orderAtIndex = null) Parameters Type Name Description TMPEffectTag tag The tag to add. int startIndex The tag's start index. int endIndex The tag's end index. int? orderAtIndex The tag's order at index. Returns Type Description bool true if the tag was successfully added; false otherwise. | Edit this page View Source TryAdd(TMPEffectTag, TMPEffectTagIndices) Attempt to add a new tag to the collection. Declaration bool TryAdd(TMPEffectTag tag, TMPEffectTagIndices indices) Parameters Type Name Description TMPEffectTag tag The tag to add. TMPEffectTagIndices indices The tag's indices. Returns Type Description bool true if the tag was successfully added; false otherwise."
  },
  "api/TMPEffects.Tags.Collections.ITagCollectionManager-1.html": {
    "href": "api/TMPEffects.Tags.Collections.ITagCollectionManager-1.html",
    "title": "Interface ITagCollectionManager<TKey> | TMPEffects documentation",
    "keywords": "Interface ITagCollectionManager<TKey> Interface for a manager of ITagCollection. Namespace: TMPEffects.Tags.Collections Assembly: .dll Syntax public interface ITagCollectionManager<TKey> Type Parameters Name Description TKey Properties | Edit this page View Source this[TKey] Get the ITagCollection associated with the given key. Declaration ITagCollection this[TKey key] { get; } Parameters Type Name Description TKey key The key. Property Value Type Description ITagCollection The ITagCollection associated with the given key. Exceptions Type Condition KeyNotFoundException Methods | Edit this page View Source AddKey(TKey) Add a key. This will automatically create an associated ITagCollection. Declaration ITagCollection AddKey(TKey key) Parameters Type Name Description TKey key The key to add. Returns Type Description ITagCollection The automatically created ITagCollection. | Edit this page View Source RemoveKey(TKey) Remove a key. Declaration bool RemoveKey(TKey key) Parameters Type Name Description TKey key The key to remove. Returns Type Description bool true if the key was removed; false otherwise."
  },
  "api/TMPEffects.Tags.Collections.ObservableTagCollection.html": {
    "href": "api/TMPEffects.Tags.Collections.ObservableTagCollection.html",
    "title": "Class ObservableTagCollection | TMPEffects documentation",
    "keywords": "Class ObservableTagCollection An observable ITagCollection. Inheritance object TagCollection ObservableTagCollection Implements ITagCollection IReadOnlyTagCollection IReadOnlyCollection<TMPEffectTagTuple> IEnumerable<TMPEffectTagTuple> IEnumerable INotifyCollectionChanged Inherited Members TagCollection.AdjustOrderAtIndexAt(int, TMPEffectTagIndices) TagCollection.CopyTo(TMPEffectTag[], int) TagCollection.TagCount TagCollection.Contains(TMPEffectTag, TMPEffectTagIndices?) TagCollection.GetEnumerator() TagCollection.TagAt(int, int?) TagCollection.TagsAt(int, TMPEffectTagTuple[], int) TagCollection.TagsAt(int) TagCollection.IndicesOf(TMPEffectTag) TagCollection.FindIndex(TMPEffectTag) TagCollection.BinarySearchIndexOf(IComparable<TMPEffectTagIndices>) TagCollection.BinarySearchIndexFirstIndexOf(TagCollection.StartIndexOnly) TagCollection.tags TagCollection.validator object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.Tags.Collections Assembly: .dll Syntax public class ObservableTagCollection : TagCollection, ITagCollection, IReadOnlyTagCollection, IReadOnlyCollection<TMPEffectTagTuple>, IEnumerable<TMPEffectTagTuple>, IEnumerable, INotifyCollectionChanged Constructors | Edit this page View Source ObservableTagCollection(IList<TMPEffectTagTuple>, ITMPTagValidator) Declaration public ObservableTagCollection(IList<TMPEffectTagTuple> tags, ITMPTagValidator validator = null) Parameters Type Name Description IList<TMPEffectTagTuple> tags ITMPTagValidator validator | Edit this page View Source ObservableTagCollection(ITMPTagValidator) Declaration public ObservableTagCollection(ITMPTagValidator validator = null) Parameters Type Name Description ITMPTagValidator validator Methods | Edit this page View Source Clear() Clear the entire collection. Declaration public override void Clear() Overrides TagCollection.Clear() | Edit this page View Source InvokeEvent(NotifyCollectionChangedEventArgs) Declaration protected void InvokeEvent(NotifyCollectionChangedEventArgs e) Parameters Type Name Description NotifyCollectionChangedEventArgs e | Edit this page View Source Remove(TMPEffectTag, TMPEffectTagIndices?) Remove the given tag, with the specified indices (if supplied). Declaration public override bool Remove(TMPEffectTag tag, TMPEffectTagIndices? indices = null) Parameters Type Name Description TMPEffectTag tag The tag to remove. TMPEffectTagIndices? indices The indices of the tag. Returns Type Description bool true if the tag was removed; false otherwise. Overrides TagCollection.Remove(TMPEffectTag, TMPEffectTagIndices?) | Edit this page View Source RemoveAllAt(int, TMPEffectTagTuple[], int) Remove all tags starting at the given startIndex. Declaration public override int RemoveAllAt(int startIndex, TMPEffectTagTuple[] buffer = null, int bufferIndex = 0) Parameters Type Name Description int startIndex The start index. TMPEffectTagTuple[] buffer Buffer to save the removed tags into. Leave at default if you do not want to get the tags. int bufferIndex The offset index of the buffer, i.e. the index at which the tags should be inserted into buffer. Returns Type Description int The amount of removed tags. Overrides TagCollection.RemoveAllAt(int, TMPEffectTagTuple[], int) | Edit this page View Source RemoveAt(int, int?) Remove the tag starting at the given startIndex with the correct order. If order is left to default, the first tag at startIndex will be removed. Declaration public override bool RemoveAt(int startIndex, int? order = null) Parameters Type Name Description int startIndex The start index. int? order The order at the start index. Returns Type Description bool true if a tag was removed; false otherwise. Overrides TagCollection.RemoveAt(int, int?) | Edit this page View Source TryAdd(TMPEffectTag, int, int, int?) Attempt to add a new tag to the collection. If orderAtIndex is left to default, the order will be assigned so it is the first tag at the given startIndex. Declaration public override bool TryAdd(TMPEffectTag tag, int startIndex = 0, int endIndex = -1, int? orderAtIndex = null) Parameters Type Name Description TMPEffectTag tag The tag to add. int startIndex The tag's start index. int endIndex The tag's end index. int? orderAtIndex The tag's order at index. Returns Type Description bool true if the tag was successfully added; false otherwise. Overrides TagCollection.TryAdd(TMPEffectTag, int, int, int?) | Edit this page View Source TryAdd(TMPEffectTag, TMPEffectTagIndices) Attempt to add a new tag to the collection. Declaration public override bool TryAdd(TMPEffectTag tag, TMPEffectTagIndices indices) Parameters Type Name Description TMPEffectTag tag The tag to add. TMPEffectTagIndices indices The tag's indices. Returns Type Description bool true if the tag was successfully added; false otherwise. Overrides TagCollection.TryAdd(TMPEffectTag, TMPEffectTagIndices) Events | Edit this page View Source CollectionChanged Raised when the collection changed. Declaration public event NotifyCollectionChangedEventHandler CollectionChanged Event Type Type Description NotifyCollectionChangedEventHandler Implements ITagCollection IReadOnlyTagCollection IReadOnlyCollection<T> IEnumerable<T> IEnumerable INotifyCollectionChanged"
  },
  "api/TMPEffects.Tags.Collections.ReadOnlyTagCollection.html": {
    "href": "api/TMPEffects.Tags.Collections.ReadOnlyTagCollection.html",
    "title": "Class ReadOnlyTagCollection | TMPEffects documentation",
    "keywords": "Class ReadOnlyTagCollection Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. Inheritance object ReadOnlyTagCollection Implements IReadOnlyTagCollection IReadOnlyCollection<TMPEffectTagTuple> IEnumerable<TMPEffectTagTuple> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.Tags.Collections Assembly: .dll Syntax public class ReadOnlyTagCollection : IReadOnlyTagCollection, IReadOnlyCollection<TMPEffectTagTuple>, IEnumerable<TMPEffectTagTuple>, IEnumerable Properties | Edit this page View Source TagCount The amount of TMPEffectTagTuple in this collection. Declaration public int TagCount { get; } Property Value Type Description int Methods | Edit this page View Source Contains(TMPEffectTag, TMPEffectTagIndices?) Whether this collection contains the given tag with the given indices (if supplied). Declaration public bool Contains(TMPEffectTag tag, TMPEffectTagIndices? indices = null) Parameters Type Name Description TMPEffectTag tag The tag to check. TMPEffectTagIndices? indices The tag indices. If you don't care about the tag's indices, leave as default. Returns Type Description bool true if this collection contains the given tag with the given indices (if supplied); otherwise false. | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<TMPEffectTagTuple> GetEnumerator() Returns Type Description IEnumerator<TMPEffectTagTuple> An enumerator that can be used to iterate through the collection. | Edit this page View Source IndicesOf(TMPEffectTag) Get the associated indices of the given tag. Declaration public TMPEffectTagIndices? IndicesOf(TMPEffectTag tag) Parameters Type Name Description TMPEffectTag tag The tag to get the indices of. Returns Type Description TMPEffectTagIndices? The indices of the given tag, if the tag is contained in the collection; otherwise null. | Edit this page View Source TagAt(int, int?) Get the tag at the given startIndex with the correct order. If order is left to default, the first tag at startIndex will be returned. Declaration public TMPEffectTag TagAt(int startIndex, int? order = null) Parameters Type Name Description int startIndex The start index. int? order The order at the start index. Returns Type Description TMPEffectTag The tag at the given indices, if it exists; otherwise null. | Edit this page View Source TagsAt(int) Get the tags starting at the given startIndex. Declaration public IEnumerable<TMPEffectTagTuple> TagsAt(int startIndex) Parameters Type Name Description int startIndex The start index. Returns Type Description IEnumerable<TMPEffectTagTuple> All tags starting at the given startIndex. | Edit this page View Source TagsAt(int, TMPEffectTagTuple[], int) Get the tags starting at the given startIndex. Declaration public int TagsAt(int startIndex, TMPEffectTagTuple[] buffer, int bufferIndex = 0) Parameters Type Name Description int startIndex The start index. TMPEffectTagTuple[] buffer The buffer the tags will be stored in. int bufferIndex The offset index of the buffer, i.e. the index at which the tags should be inserted into buffer. Returns Type Description int The amount of tags starting at the given startIndex. Implements IReadOnlyTagCollection IReadOnlyCollection<T> IEnumerable<T> IEnumerable"
  },
  "api/TMPEffects.Tags.Collections.TagCollection.StartIndexOnly.html": {
    "href": "api/TMPEffects.Tags.Collections.TagCollection.StartIndexOnly.html",
    "title": "Struct TagCollection.StartIndexOnly | TMPEffects documentation",
    "keywords": "Struct TagCollection.StartIndexOnly Implements IComparable<TMPEffectTagIndices> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: TMPEffects.Tags.Collections Assembly: .dll Syntax protected struct TagCollection.StartIndexOnly : IComparable<TMPEffectTagIndices> Constructors | Edit this page View Source StartIndexOnly(int) Declaration public StartIndexOnly(int startIndex) Parameters Type Name Description int startIndex Fields | Edit this page View Source startIndex Declaration public readonly int startIndex Field Value Type Description int Methods | Edit this page View Source CompareTo(TMPEffectTagIndices) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(TMPEffectTagIndices other) Parameters Type Name Description TMPEffectTagIndices other An object to compare with this instance. Returns Type Description int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. Implements IComparable<T>"
  },
  "api/TMPEffects.Tags.Collections.TagCollection.TempIndices.html": {
    "href": "api/TMPEffects.Tags.Collections.TagCollection.TempIndices.html",
    "title": "Struct TagCollection.TempIndices | TMPEffects documentation",
    "keywords": "Struct TagCollection.TempIndices Implements IComparable<TMPEffectTagIndices> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: TMPEffects.Tags.Collections Assembly: .dll Syntax protected struct TagCollection.TempIndices : IComparable<TMPEffectTagIndices> Constructors | Edit this page View Source TempIndices(int, int) Declaration public TempIndices(int startIndex, int orderAtIndex) Parameters Type Name Description int startIndex int orderAtIndex Methods | Edit this page View Source CompareTo(TMPEffectTagIndices) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(TMPEffectTagIndices other) Parameters Type Name Description TMPEffectTagIndices other An object to compare with this instance. Returns Type Description int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. Implements IComparable<T>"
  },
  "api/TMPEffects.Tags.Collections.TagCollection.html": {
    "href": "api/TMPEffects.Tags.Collections.TagCollection.html",
    "title": "Class TagCollection | TMPEffects documentation",
    "keywords": "Class TagCollection Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. Inheritance object TagCollection ObservableTagCollection Implements ITagCollection IReadOnlyTagCollection IReadOnlyCollection<TMPEffectTagTuple> IEnumerable<TMPEffectTagTuple> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.Tags.Collections Assembly: .dll Syntax public class TagCollection : ITagCollection, IReadOnlyTagCollection, IReadOnlyCollection<TMPEffectTagTuple>, IEnumerable<TMPEffectTagTuple>, IEnumerable Constructors | Edit this page View Source TagCollection(IList<TMPEffectTagTuple>, ITMPTagValidator) Declaration public TagCollection(IList<TMPEffectTagTuple> tags, ITMPTagValidator validator = null) Parameters Type Name Description IList<TMPEffectTagTuple> tags ITMPTagValidator validator | Edit this page View Source TagCollection(ITMPTagValidator) Declaration public TagCollection(ITMPTagValidator validator = null) Parameters Type Name Description ITMPTagValidator validator Fields | Edit this page View Source tags Declaration protected IList<TMPEffectTagTuple> tags Field Value Type Description IList<TMPEffectTagTuple> | Edit this page View Source validator Declaration protected readonly ITMPTagValidator validator Field Value Type Description ITMPTagValidator Properties | Edit this page View Source TagCount The amount of TMPEffectTagTuple in this collection. Declaration public int TagCount { get; } Property Value Type Description int Methods | Edit this page View Source AdjustOrderAtIndexAt(int, TMPEffectTagIndices) Declaration protected void AdjustOrderAtIndexAt(int listIndex, TMPEffectTagIndices indices) Parameters Type Name Description int listIndex TMPEffectTagIndices indices | Edit this page View Source BinarySearchIndexFirstIndexOf(StartIndexOnly) Declaration protected int BinarySearchIndexFirstIndexOf(TagCollection.StartIndexOnly indices) Parameters Type Name Description TagCollection.StartIndexOnly indices Returns Type Description int | Edit this page View Source BinarySearchIndexOf(IComparable<TMPEffectTagIndices>) Declaration protected int BinarySearchIndexOf(IComparable<TMPEffectTagIndices> indices) Parameters Type Name Description IComparable<TMPEffectTagIndices> indices Returns Type Description int | Edit this page View Source Clear() Clear the entire collection. Declaration public virtual void Clear() | Edit this page View Source Contains(TMPEffectTag, TMPEffectTagIndices?) Whether this collection contains the given tag with the given indices (if supplied). Declaration public bool Contains(TMPEffectTag tag, TMPEffectTagIndices? indices = null) Parameters Type Name Description TMPEffectTag tag The tag to check. TMPEffectTagIndices? indices The tag indices. If you don't care about the tag's indices, leave as default. Returns Type Description bool true if this collection contains the given tag with the given indices (if supplied); otherwise false. | Edit this page View Source CopyTo(TMPEffectTag[], int) Declaration public void CopyTo(TMPEffectTag[] array, int arrayIndex) Parameters Type Name Description TMPEffectTag[] array int arrayIndex | Edit this page View Source FindIndex(TMPEffectTag) Declaration protected int FindIndex(TMPEffectTag tag) Parameters Type Name Description TMPEffectTag tag Returns Type Description int | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<TMPEffectTagTuple> GetEnumerator() Returns Type Description IEnumerator<TMPEffectTagTuple> An enumerator that can be used to iterate through the collection. | Edit this page View Source IndicesOf(TMPEffectTag) Get the associated indices of the given tag. Declaration public TMPEffectTagIndices? IndicesOf(TMPEffectTag tag) Parameters Type Name Description TMPEffectTag tag The tag to get the indices of. Returns Type Description TMPEffectTagIndices? The indices of the given tag, if the tag is contained in the collection; otherwise null. | Edit this page View Source Remove(TMPEffectTag, TMPEffectTagIndices?) Remove the given tag, with the specified indices (if supplied). Declaration public virtual bool Remove(TMPEffectTag tag, TMPEffectTagIndices? indices = null) Parameters Type Name Description TMPEffectTag tag The tag to remove. TMPEffectTagIndices? indices The indices of the tag. Returns Type Description bool true if the tag was removed; false otherwise. | Edit this page View Source RemoveAllAt(int, TMPEffectTagTuple[], int) Remove all tags starting at the given startIndex. Declaration public virtual int RemoveAllAt(int startIndex, TMPEffectTagTuple[] buffer = null, int bufferIndex = 0) Parameters Type Name Description int startIndex The start index. TMPEffectTagTuple[] buffer Buffer to save the removed tags into. Leave at default if you do not want to get the tags. int bufferIndex The offset index of the buffer, i.e. the index at which the tags should be inserted into buffer. Returns Type Description int The amount of removed tags. | Edit this page View Source RemoveAt(int, int?) Remove the tag starting at the given startIndex with the correct order. If order is left to default, the first tag at startIndex will be removed. Declaration public virtual bool RemoveAt(int startIndex, int? order = null) Parameters Type Name Description int startIndex The start index. int? order The order at the start index. Returns Type Description bool true if a tag was removed; false otherwise. | Edit this page View Source TagAt(int, int?) Get the tag at the given startIndex with the correct order. If order is left to default, the first tag at startIndex will be returned. Declaration public TMPEffectTag TagAt(int startIndex, int? order = null) Parameters Type Name Description int startIndex The start index. int? order The order at the start index. Returns Type Description TMPEffectTag The tag at the given indices, if it exists; otherwise null. | Edit this page View Source TagsAt(int) Get the tags starting at the given startIndex. Declaration public IEnumerable<TMPEffectTagTuple> TagsAt(int startIndex) Parameters Type Name Description int startIndex The start index. Returns Type Description IEnumerable<TMPEffectTagTuple> All tags starting at the given startIndex. | Edit this page View Source TagsAt(int, TMPEffectTagTuple[], int) Get the tags starting at the given startIndex. Declaration public int TagsAt(int startIndex, TMPEffectTagTuple[] buffer, int bufferIndex = 0) Parameters Type Name Description int startIndex The start index. TMPEffectTagTuple[] buffer The buffer the tags will be stored in. int bufferIndex The offset index of the buffer, i.e. the index at which the tags should be inserted into buffer. Returns Type Description int The amount of tags starting at the given startIndex. | Edit this page View Source TryAdd(TMPEffectTag, int, int, int?) Attempt to add a new tag to the collection. If orderAtIndex is left to default, the order will be assigned so it is the first tag at the given startIndex. Declaration public virtual bool TryAdd(TMPEffectTag tag, int startIndex = 0, int endIndex = -1, int? orderAtIndex = null) Parameters Type Name Description TMPEffectTag tag The tag to add. int startIndex The tag's start index. int endIndex The tag's end index. int? orderAtIndex The tag's order at index. Returns Type Description bool true if the tag was successfully added; false otherwise. | Edit this page View Source TryAdd(TMPEffectTag, TMPEffectTagIndices) Attempt to add a new tag to the collection. Declaration public virtual bool TryAdd(TMPEffectTag tag, TMPEffectTagIndices indices) Parameters Type Name Description TMPEffectTag tag The tag to add. TMPEffectTagIndices indices The tag's indices. Returns Type Description bool true if the tag was successfully added; false otherwise. Implements ITagCollection IReadOnlyTagCollection IReadOnlyCollection<T> IEnumerable<T> IEnumerable"
  },
  "api/TMPEffects.Tags.Collections.html": {
    "href": "api/TMPEffects.Tags.Collections.html",
    "title": "Namespace TMPEffects.Tags.Collections | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.Tags.Collections Classes CachedCollection<T> Manages a collection of ITagWrapper that represent a cached tag. Will keep itself synchronized with the given ObservableTagCollection. CachedCollection<T>.MinMax The minimum and maximum collection index of cached tags potentially relevant to a given text index. ObservableTagCollection An observable ITagCollection. ReadOnlyTagCollection Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. TagCollection Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. Structs CachedCollection<T>.StructContainingEnumerable Helper struct for GetContaining_NonAlloc(int). CachedCollection<T>.StructContainingEnumerator Helper struct for GetContaining_NonAlloc(int). CachedCollection<T>.StructReversedContainingEnumerable Helper struct for GetContainingReversed_NonAlloc(int). CachedCollection<T>.StructReversedContainingEnumerator Helper struct for GetContainingReversed_NonAlloc(int). TagCollection.StartIndexOnly TagCollection.TempIndices Interfaces IReadOnlyTagCollection A readonly collection of TMPEffectTagTuple. ITagCollection A writable collection of TMPEffectTagTuple. ITagCollectionManager<TKey> Interface for a manager of ITagCollection."
  },
  "api/TMPEffects.Tags.ITMPPrefixSupplier.html": {
    "href": "api/TMPEffects.Tags.ITMPPrefixSupplier.html",
    "title": "Interface ITMPPrefixSupplier | TMPEffects documentation",
    "keywords": "Interface ITMPPrefixSupplier Interface for supplying prefix. Namespace: TMPEffects.Tags Assembly: .dll Syntax public interface ITMPPrefixSupplier Properties | Edit this page View Source Prefix The supplied prefix. Declaration char Prefix { get; } Property Value Type Description char"
  },
  "api/TMPEffects.Tags.ITMPTagValidator.html": {
    "href": "api/TMPEffects.Tags.ITMPTagValidator.html",
    "title": "Interface ITMPTagValidator | TMPEffects documentation",
    "keywords": "Interface ITMPTagValidator Tag validation interface. Namespace: TMPEffects.Tags Assembly: .dll Syntax public interface ITMPTagValidator Methods | Edit this page View Source ValidateOpenTag(TagInfo, out TMPEffectTag, out int) Validate a given ParsingUtility.TagInfo. MUST be of type Open. Declaration bool ValidateOpenTag(ParsingUtility.TagInfo tagInfo, out TMPEffectTag data, out int endIndex) Parameters Type Name Description ParsingUtility.TagInfo tagInfo Information about the tag. TMPEffectTag data Assuming the tag is validated, this will be set to the created TMPEffectTag; otherwise it will be null. int endIndex Assuming the tag is validated, this will be set to the endIndex of the tag. TODO this arguably exceeds ITMPTagValidators responsibilities Returns Type Description bool true if the tag is successfully validated; false otherwise. Exceptions Type Condition ArgumentException | Edit this page View Source ValidateTag(TMPEffectTag) Validate a given TMPEffectTag. Declaration bool ValidateTag(TMPEffectTag tag) Parameters Type Name Description TMPEffectTag tag Information about the tag. Returns Type Description bool true if the tag is successfully validated; false otherwise. | Edit this page View Source ValidateTag(TagInfo) Validate a given ParsingUtility.TagInfo. Declaration bool ValidateTag(ParsingUtility.TagInfo tagInfo) Parameters Type Name Description ParsingUtility.TagInfo tagInfo Information about the tag. Returns Type Description bool true if the tag is successfully validated; false otherwise."
  },
  "api/TMPEffects.Tags.ITagCacher-1.html": {
    "href": "api/TMPEffects.Tags.ITagCacher-1.html",
    "title": "Interface ITagCacher<T> | TMPEffects documentation",
    "keywords": "Interface ITagCacher<T> Generic interface for caching tags. Namespace: TMPEffects.Tags Assembly: .dll Syntax public interface ITagCacher<T> where T : ITagWrapper Type Parameters Name Description T Type that will be used to represent a cached tag. Methods | Edit this page View Source CacheTag(TMPEffectTag, TMPEffectTagIndices) Cache the given tag and its associated indices. Declaration T CacheTag(TMPEffectTag tag, TMPEffectTagIndices indices) Parameters Type Name Description TMPEffectTag tag The tag to cache. TMPEffectTagIndices indices The associated indices. Returns Type Description T The cached tag."
  },
  "api/TMPEffects.Tags.ITagWrapper.html": {
    "href": "api/TMPEffects.Tags.ITagWrapper.html",
    "title": "Interface ITagWrapper | TMPEffects documentation",
    "keywords": "Interface ITagWrapper Interface that wraps an TMPEffectTag as well as an TMPEffectTagIndices instance. Namespace: TMPEffects.Tags Assembly: .dll Syntax public interface ITagWrapper Properties | Edit this page View Source Indices The wrapped tag indices. Declaration TMPEffectTagIndices Indices { get; } Property Value Type Description TMPEffectTagIndices | Edit this page View Source Tag The wrapped tag. Declaration TMPEffectTag Tag { get; } Property Value Type Description TMPEffectTag"
  },
  "api/TMPEffects.Tags.TMPEffectTag.html": {
    "href": "api/TMPEffects.Tags.TMPEffectTag.html",
    "title": "Class TMPEffectTag | TMPEffects documentation",
    "keywords": "Class TMPEffectTag A TMPEffects tag. Contains any data \"inherent\" to the given tag. Inheritance object TMPEffectTag Implements IEquatable<TMPEffectTag> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.Tags Assembly: .dll Syntax public sealed class TMPEffectTag : IEquatable<TMPEffectTag> Constructors | Edit this page View Source TMPEffectTag(string, char, IDictionary<string, string>) Declaration public TMPEffectTag(string name, char prefix, IDictionary<string, string> parameters) Parameters Type Name Description string name char prefix IDictionary<string, string> parameters Properties | Edit this page View Source Name The name of the tag. Declaration public string Name { get; } Property Value Type Description string | Edit this page View Source Parameters The parameters of the tag. Declaration public ReadOnlyDictionary<string, string> Parameters { get; } Property Value Type Description ReadOnlyDictionary<string, string> | Edit this page View Source Prefix The prefix of the tag. Declaration public char Prefix { get; } Property Value Type Description char Methods | Edit this page View Source Equals(TMPEffectTag) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(TMPEffectTag other) Parameters Type Name Description TMPEffectTag other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Implements IEquatable<T>"
  },
  "api/TMPEffects.Tags.TMPEffectTagIndices.html": {
    "href": "api/TMPEffects.Tags.TMPEffectTagIndices.html",
    "title": "Struct TMPEffectTagIndices | TMPEffects documentation",
    "keywords": "Struct TMPEffectTagIndices The indices of an TMPEffectTag. The indices can be regarded as a half-open interval of [StartIndex, EndIndex). For example, an instance with StartIndex == 5 and EndIndex == 10 \"contains\" the indices 5, 6, 7, 8 and 9. Implements IComparable<TMPEffectTagIndices> IEquatable<TMPEffectTagIndices> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: TMPEffects.Tags Assembly: .dll Syntax public struct TMPEffectTagIndices : IComparable<TMPEffectTagIndices>, IEquatable<TMPEffectTagIndices> Constructors | Edit this page View Source TMPEffectTagIndices(int, int, int) Declaration public TMPEffectTagIndices(int startIndex, int endIndex, int orderAtIndex) Parameters Type Name Description int startIndex int endIndex int orderAtIndex Properties | Edit this page View Source ContainedIndices Enumeration of all contained indices. Declaration public IEnumerable<int> ContainedIndices { get; } Property Value Type Description IEnumerable<int> | Edit this page View Source EndIndex The (exclusive) end index of the tag. Declaration public int EndIndex { get; } Property Value Type Description int | Edit this page View Source IsEmpty Whether the tag is empty, i.e. doesn't contain any indices. Declaration public bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source IsOpen Whether the tag is open, meaning it is never closed and therefore does not have a defined end index; the tag's index interval ranges from the StartIndex to the end of whatever text it is applied to. Declaration public bool IsOpen { get; } Property Value Type Description bool | Edit this page View Source Length The length of the interval, meaning the difference between EndIndex and StartIndex. Is -1 if the tag is open. Declaration public int Length { get; } Property Value Type Description int | Edit this page View Source OrderAtIndex The order at the start index. If there are multiple tags with the same start index, this will define their order: tags with lower order come first, tags with higher index come later. Note that the order may have gaps (e.g. there are three tags at a given index, with order -5, 4 and 10 respectively). Declaration public int OrderAtIndex { get; } Property Value Type Description int | Edit this page View Source StartIndex The (inclusive) start index of the tag. Declaration public int StartIndex { get; } Property Value Type Description int Methods | Edit this page View Source CompareTo(TMPEffectTagIndices) Compares this instance to another instance of TMPEffectTagIndices. First compares StartIndex. If those are equal, compares OrderAtIndex. The EndIndex is not considered. Declaration public int CompareTo(TMPEffectTagIndices other) Parameters Type Name Description TMPEffectTagIndices other The instance to compare this instance to. Returns Type Description int Less than zero => This instance precedes other in the sort order. Zero => This instance occurs in the same position in the sort order as other. Greater than zero => This instance follows other in the sort order. | Edit this page View Source Contains(int) Whether the indices contain the given index. Declaration public bool Contains(int index) Parameters Type Name Description int index The index. Returns Type Description bool true if the indices containg the given index; false otherwise. | Edit this page View Source Equals(object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source Equals(TMPEffectTagIndices) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(TMPEffectTagIndices other) Parameters Type Name Description TMPEffectTagIndices other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Edit this page View Source operator ==(TMPEffectTagIndices, TMPEffectTagIndices) Declaration public static bool operator ==(TMPEffectTagIndices c1, TMPEffectTagIndices c2) Parameters Type Name Description TMPEffectTagIndices c1 TMPEffectTagIndices c2 Returns Type Description bool | Edit this page View Source operator >(TMPEffectTagIndices, TMPEffectTagIndices) Declaration public static bool operator >(TMPEffectTagIndices c1, TMPEffectTagIndices c2) Parameters Type Name Description TMPEffectTagIndices c1 TMPEffectTagIndices c2 Returns Type Description bool | Edit this page View Source operator !=(TMPEffectTagIndices, TMPEffectTagIndices) Declaration public static bool operator !=(TMPEffectTagIndices c1, TMPEffectTagIndices c2) Parameters Type Name Description TMPEffectTagIndices c1 TMPEffectTagIndices c2 Returns Type Description bool | Edit this page View Source operator <(TMPEffectTagIndices, TMPEffectTagIndices) Declaration public static bool operator <(TMPEffectTagIndices c1, TMPEffectTagIndices c2) Parameters Type Name Description TMPEffectTagIndices c1 TMPEffectTagIndices c2 Returns Type Description bool Implements IComparable<T> IEquatable<T>"
  },
  "api/TMPEffects.Tags.TMPEffectTagTuple.html": {
    "href": "api/TMPEffects.Tags.TMPEffectTagTuple.html",
    "title": "Struct TMPEffectTagTuple | TMPEffects documentation",
    "keywords": "Struct TMPEffectTagTuple Readonly struct that combines an TMPEffectTag and an TMPEffectTagIndices. Implements IEquatable<TMPEffectTagTuple> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: TMPEffects.Tags Assembly: .dll Syntax public struct TMPEffectTagTuple : IEquatable<TMPEffectTagTuple> Constructors | Edit this page View Source TMPEffectTagTuple(TMPEffectTag, TMPEffectTagIndices) Declaration public TMPEffectTagTuple(TMPEffectTag tag, TMPEffectTagIndices indices) Parameters Type Name Description TMPEffectTag tag TMPEffectTagIndices indices Fields | Edit this page View Source Indices The tag indices. Declaration public readonly TMPEffectTagIndices Indices Field Value Type Description TMPEffectTagIndices | Edit this page View Source Tag The tag. Declaration public readonly TMPEffectTag Tag Field Value Type Description TMPEffectTag Methods | Edit this page View Source Equals(TMPEffectTagTuple) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(TMPEffectTagTuple other) Parameters Type Name Description TMPEffectTagTuple other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Implements IEquatable<T>"
  },
  "api/TMPEffects.Tags.html": {
    "href": "api/TMPEffects.Tags.html",
    "title": "Namespace TMPEffects.Tags | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.Tags Classes TMPEffectTag A TMPEffects tag. Contains any data \"inherent\" to the given tag. Structs TMPEffectTagIndices The indices of an TMPEffectTag. The indices can be regarded as a half-open interval of [StartIndex, EndIndex). For example, an instance with StartIndex == 5 and EndIndex == 10 \"contains\" the indices 5, 6, 7, 8 and 9. TMPEffectTagTuple Readonly struct that combines an TMPEffectTag and an TMPEffectTagIndices. Interfaces ITMPPrefixSupplier Interface for supplying prefix. ITMPTagValidator Tag validation interface. ITagCacher<T> Generic interface for caching tags. ITagWrapper Interface that wraps an TMPEffectTag as well as an TMPEffectTagIndices instance."
  },
  "api/TMPEffects.TextProcessing.ITagProcessorManager.html": {
    "href": "api/TMPEffects.TextProcessing.ITagProcessorManager.html",
    "title": "Interface ITagProcessorManager | TMPEffects documentation",
    "keywords": "Interface ITagProcessorManager Interface for manager of TagProcessor. Inherited Members IEnumerable<TagProcessor>.GetEnumerator() Namespace: TMPEffects.TextProcessing Assembly: .dll Syntax public interface ITagProcessorManager : IEnumerable<TagProcessor>, IEnumerable Properties | Edit this page View Source TagProcessors Mapping of prefix to list of TagProcessor. Declaration ReadOnlyDictionary<char, ReadOnlyCollection<TagProcessor>> TagProcessors { get; } Property Value Type Description ReadOnlyDictionary<char, ReadOnlyCollection<TagProcessor>> Methods | Edit this page View Source AddProcessor(char, TagProcessor, int) Add a processor. Declaration void AddProcessor(char prefix, TagProcessor processor, int priority = 0) Parameters Type Name Description char prefix Prefix of tags processed by processor. TagProcessor processor The processor. int priority Priority of this processor. Only one processors can process any given tag, so the order that processors are invoked in matters. Less than zero => last processed zero => first processed (highest priority) Greater than zero => priority-th processed Greater than current amount of processors => last processed | Edit this page View Source RemoveProcessor(char, TagProcessor) Remove a processor. Declaration bool RemoveProcessor(char prefix, TagProcessor processor) Parameters Type Name Description char prefix Prefix of tags processed by processor. TagProcessor processor The processor. Returns Type Description bool true if the processors was removed; otherwise false."
  },
  "api/TMPEffects.TextProcessing.ParsingUtility.TagInfo.html": {
    "href": "api/TMPEffects.TextProcessing.ParsingUtility.TagInfo.html",
    "title": "Class ParsingUtility.TagInfo | TMPEffects documentation",
    "keywords": "Class ParsingUtility.TagInfo Utility class that holds data about a parsed tag. Inheritance object ParsingUtility.TagInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.TextProcessing Assembly: .dll Syntax public class ParsingUtility.TagInfo Constructors | Edit this page View Source TagInfo() Declaration public TagInfo() | Edit this page View Source TagInfo(int, int, TagType, char, string, string) Declaration public TagInfo(int startIndex, int endIndex, ParsingUtility.TagType type, char prefix, string name, string parameterString) Parameters Type Name Description int startIndex int endIndex ParsingUtility.TagType type char prefix string name string parameterString Fields | Edit this page View Source endIndex End index of the tag in the source text. Declaration public int endIndex Field Value Type Description int | Edit this page View Source name Name of the tag. Declaration public string name Field Value Type Description string | Edit this page View Source parameterString The parameters of the tag, unparsed. Declaration public string parameterString Field Value Type Description string | Edit this page View Source prefix Prefix of the tag. Declaration public char prefix Field Value Type Description char | Edit this page View Source startIndex Start index of the tag in the source text. Declaration public int startIndex Field Value Type Description int | Edit this page View Source type Type of the tag (open, close). Declaration public ParsingUtility.TagType type Field Value Type Description ParsingUtility.TagType"
  },
  "api/TMPEffects.TextProcessing.ParsingUtility.TagType.html": {
    "href": "api/TMPEffects.TextProcessing.ParsingUtility.TagType.html",
    "title": "Enum ParsingUtility.TagType | TMPEffects documentation",
    "keywords": "Enum ParsingUtility.TagType Tag type enum. Either open, close, or both. Namespace: TMPEffects.TextProcessing Assembly: .dll Syntax [Flags] public enum ParsingUtility.TagType Fields Name Description Close Open"
  },
  "api/TMPEffects.TextProcessing.ParsingUtility.html": {
    "href": "api/TMPEffects.TextProcessing.ParsingUtility.html",
    "title": "Class ParsingUtility | TMPEffects documentation",
    "keywords": "Class ParsingUtility Utility methods for text processing and parsing. Inheritance object ParsingUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.TextProcessing Assembly: .dll Syntax public static class ParsingUtility Methods | Edit this page View Source GetNextTag(string, int, ref TagInfo, TagType) Get the next tag in text, starting from startIndex. Declaration public static bool GetNextTag(string text, int startIndex, ref ParsingUtility.TagInfo tag, ParsingUtility.TagType type = TagType.Open | TagType.Close) Parameters Type Name Description string text The full string. int startIndex The index to start the search from. ParsingUtility.TagInfo tag Reference to a ParsingUtility.TagInfo. Will be set to the parsed tag if one is found. ParsingUtility.TagType type The type of tag to get. Leave at default for either type. Returns Type Description bool true if a next tag was found; false otherwise. | Edit this page View Source GetTagParametersDict(string) Declaration public static Dictionary<string, string> GetTagParametersDict(string tag) Parameters Type Name Description string tag Returns Type Description Dictionary<string, string> | Edit this page View Source IsTag(string, int, int, TagType) Checks if the given string contains a substring starting at startIndex, going up to maxIndex, that is a well formed tag. Declaration public static bool IsTag(string text, int startIndex, int maxIndex = -1, ParsingUtility.TagType type = TagType.Open | TagType.Close) Parameters Type Name Description string text The string to check. int startIndex The start index of the substring. int maxIndex The end index of the substring. Leave at default to set to length of text. ParsingUtility.TagType type Returns Type Description bool true if the given string contains a substring starting at startIndex, going up to maxIndex, that is a well formed tag; otherwise false. | Edit this page View Source IsTag(string, TagType) Checks if the given string is a well formed tag (of the given type, if supplied). Declaration public static bool IsTag(string tag, ParsingUtility.TagType type = TagType.Open | TagType.Close) Parameters Type Name Description string tag The string to check. ParsingUtility.TagType type The type of tag to check for. Leave default for either type. Returns Type Description bool true if the the given string is a tag (of the given type, if supplied); otherwise false. | Edit this page View Source TryParseTag(string, int, int, ref TagInfo, TagType) Attempt to parse a tag from the substring of text given by startIndex and endIndex. Declaration public static bool TryParseTag(string text, int startIndex, int endIndex, ref ParsingUtility.TagInfo tag, ParsingUtility.TagType type = TagType.Open | TagType.Close) Parameters Type Name Description string text The full string. int startIndex Start index of the substring. int endIndex End index of the substring. ParsingUtility.TagInfo tag Reference to a ParsingUtility.TagInfo. Will be set to the parsed tag if successful. ParsingUtility.TagType type The type of tag to check for. Leave at default for either type. Returns Type Description bool true if a tag was successfully parsed from the substring; false otherwise."
  },
  "api/TMPEffects.TextProcessing.TMPTextProcessor.TMPTextProcessorEventHandler.html": {
    "href": "api/TMPEffects.TextProcessing.TMPTextProcessor.TMPTextProcessorEventHandler.html",
    "title": "Delegate TMPTextProcessor.TMPTextProcessorEventHandler | TMPEffects documentation",
    "keywords": "Delegate TMPTextProcessor.TMPTextProcessorEventHandler Namespace: TMPEffects.TextProcessing Assembly: .dll Syntax public delegate void TMPTextProcessor.TMPTextProcessorEventHandler(string text) Parameters Type Name Description string text"
  },
  "api/TMPEffects.TextProcessing.TMPTextProcessor.html": {
    "href": "api/TMPEffects.TextProcessing.TMPTextProcessor.html",
    "title": "Class TMPTextProcessor | TMPEffects documentation",
    "keywords": "Class TMPTextProcessor Preprocesses the text, removing valid tags. As part of a post process, also adjusts the indices of the parsed tags to accomodate for native TextMeshPro tags. Inheritance object TMPTextProcessor Implements ITagProcessorManager IEnumerable<TagProcessor> IEnumerable Namespace: TMPEffects.TextProcessing Assembly: .dll Syntax public class TMPTextProcessor : ITextPreprocessor, ITagProcessorManager, IEnumerable<TagProcessor>, IEnumerable Constructors | Edit this page View Source TMPTextProcessor(TMP_Text) Declaration public TMPTextProcessor(TMP_Text text) Parameters Type Name Description TMP_Text text Properties | Edit this page View Source TagProcessors Mapping of prefix to list of TagProcessor. Declaration public ReadOnlyDictionary<char, ReadOnlyCollection<TagProcessor>> TagProcessors { get; } Property Value Type Description ReadOnlyDictionary<char, ReadOnlyCollection<TagProcessor>> | Edit this page View Source TextComponent The associated TMP_Text component. Declaration public TMP_Text TextComponent { get; } Property Value Type Description TMP_Text Methods | Edit this page View Source AddProcessor(char, TagProcessor, int) Add a processor. Declaration public void AddProcessor(char prefix, TagProcessor processor, int priority = 0) Parameters Type Name Description char prefix Prefix of tags processed by processor. TagProcessor processor The processor. int priority Priority of this processor. Only one processors can process any given tag, so the order that processors are invoked in matters. Less than zero => last processed zero => first processed (highest priority) Greater than zero => priority-th processed Greater than current amount of processors => last processed | Edit this page View Source AdjustIndices() Adjust the indices that were cached during the preprocess stage to accomodate for index changes due to native TextMeshPro tags. Declaration public void AdjustIndices() | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<TagProcessor> GetEnumerator() Returns Type Description IEnumerator<TagProcessor> An enumerator that can be used to iterate through the collection. | Edit this page View Source PreprocessText(string) Preprocess the text. Remove TMPEffects tags from text Cache the tags incl. their indices Declaration public string PreprocessText(string text) Parameters Type Name Description string text The text to preprocess. Returns Type Description string The preprocessed text. | Edit this page View Source RemoveProcessor(char, TagProcessor) Remove a processor. Declaration public bool RemoveProcessor(char prefix, TagProcessor processor) Parameters Type Name Description char prefix Prefix of tags processed by processor. TagProcessor processor The processor. Returns Type Description bool true if the processors was removed; otherwise false. Events | Edit this page View Source BeginAdjustIndices Raised just before the AdjustIndices routine begins. Declaration public event TMPTextProcessor.TMPTextProcessorEventHandler BeginAdjustIndices Event Type Type Description TMPTextProcessor.TMPTextProcessorEventHandler | Edit this page View Source BeginPreProcess Raised just before the PreProcess routine begins. Declaration public event TMPTextProcessor.TMPTextProcessorEventHandler BeginPreProcess Event Type Type Description TMPTextProcessor.TMPTextProcessorEventHandler | Edit this page View Source FinishAdjustIndices Raised once the AdjustIndices routine finished. Declaration public event TMPTextProcessor.TMPTextProcessorEventHandler FinishAdjustIndices Event Type Type Description TMPTextProcessor.TMPTextProcessorEventHandler | Edit this page View Source FinishPreProcess Raised once the PreProcess routine finished. Declaration public event TMPTextProcessor.TMPTextProcessorEventHandler FinishPreProcess Event Type Type Description TMPTextProcessor.TMPTextProcessorEventHandler Implements ITagProcessorManager IEnumerable<T> IEnumerable"
  },
  "api/TMPEffects.TextProcessing.TagProcessor.html": {
    "href": "api/TMPEffects.TextProcessing.TagProcessor.html",
    "title": "Class TagProcessor | TMPEffects documentation",
    "keywords": "Class TagProcessor Handles processing of, and stores successfully processed tags. Inheritance object TagProcessor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.TextProcessing Assembly: .dll Syntax public sealed class TagProcessor Constructors | Edit this page View Source TagProcessor(ITMPTagValidator) Declaration public TagProcessor(ITMPTagValidator validator) Parameters Type Name Description ITMPTagValidator validator Fields | Edit this page View Source ALL_KEYWORD Tags with this keyword as name will close all open tags of this tag processor. Declaration public const string ALL_KEYWORD = \"all\" Field Value Type Description string | Edit this page View Source MOST_RECENT_KEYWORD Tags with this keyword as name will close teh most recent open tag of this tag processor. Declaration public const string MOST_RECENT_KEYWORD = \"\" Field Value Type Description string | Edit this page View Source ProcessedTags All processed tags. Declaration public readonly ReadOnlyCollection<KeyValuePair<TMPEffectTagIndices, TMPEffectTag>> ProcessedTags Field Value Type Description ReadOnlyCollection<KeyValuePair<TMPEffectTagIndices, TMPEffectTag>> Methods | Edit this page View Source Process(TagInfo, int, int) Process the given tag. Declaration public bool Process(ParsingUtility.TagInfo tagInfo, int textIndex, int orderAtIndex) Parameters Type Name Description ParsingUtility.TagInfo tagInfo Information about the tag. int textIndex The index of the tag within its source text. int orderAtIndex The order at the index of the tag withing its source text. Returns Type Description bool true if tag is successfully processed, false otherwise. | Edit this page View Source Reset() Reset this TagProcessor. Declaration public void Reset()"
  },
  "api/TMPEffects.TextProcessing.TagProcessorManager.html": {
    "href": "api/TMPEffects.TextProcessing.TagProcessorManager.html",
    "title": "Class TagProcessorManager | TMPEffects documentation",
    "keywords": "Class TagProcessorManager Manages multiple TagProcessor. Inheritance object TagProcessorManager Implements ITagProcessorManager IEnumerable<TagProcessor> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: TMPEffects.TextProcessing Assembly: .dll Syntax public class TagProcessorManager : ITagProcessorManager, IEnumerable<TagProcessor>, IEnumerable Constructors | Edit this page View Source TagProcessorManager() Declaration public TagProcessorManager() Properties | Edit this page View Source TagProcessors Mapping of prefix to list of TagProcessor. Declaration public ReadOnlyDictionary<char, ReadOnlyCollection<TagProcessor>> TagProcessors { get; } Property Value Type Description ReadOnlyDictionary<char, ReadOnlyCollection<TagProcessor>> Methods | Edit this page View Source AddProcessor(char, TagProcessor, int) Add a processor. Declaration public void AddProcessor(char prefix, TagProcessor processor, int priority = 0) Parameters Type Name Description char prefix Prefix of tags processed by processor. TagProcessor processor The processor. int priority Priority of this processor. Only one processors can process any given tag, so the order that processors are invoked in matters. Less than zero => last processed zero => first processed (highest priority) Greater than zero => priority-th processed Greater than current amount of processors => last processed | Edit this page View Source Clear() Remove all processors. Declaration public void Clear() | Edit this page View Source GetEnumerator() Get all TagProcessor managed by this instance. Declaration public IEnumerator<TagProcessor> GetEnumerator() Returns Type Description IEnumerator<TagProcessor> All TagProcessor managed by this instance. | Edit this page View Source RegisterTo(TMPTextProcessor) Register all TagProcessor to the given textProcessor. Declaration public void RegisterTo(TMPTextProcessor textProcessor) Parameters Type Name Description TMPTextProcessor textProcessor The TMPTextProcessor to register to. | Edit this page View Source RemoveProcessor(char, TagProcessor) Remove a processor. Declaration public bool RemoveProcessor(char prefix, TagProcessor processor) Parameters Type Name Description char prefix Prefix of tags processed by processor. TagProcessor processor The processor. Returns Type Description bool true if the processors was removed; otherwise false. | Edit this page View Source UnregisterFrom(TMPTextProcessor) Unregister all TagProcessor from the given textProcessor. Declaration public void UnregisterFrom(TMPTextProcessor textProcessor) Parameters Type Name Description TMPTextProcessor textProcessor The TMPTextProcessor to unregister from. Implements ITagProcessorManager IEnumerable<T> IEnumerable"
  },
  "api/TMPEffects.TextProcessing.html": {
    "href": "api/TMPEffects.TextProcessing.html",
    "title": "Namespace TMPEffects.TextProcessing | TMPEffects documentation",
    "keywords": "Namespace TMPEffects.TextProcessing Classes ParsingUtility Utility methods for text processing and parsing. ParsingUtility.TagInfo Utility class that holds data about a parsed tag. TMPTextProcessor Preprocesses the text, removing valid tags. As part of a post process, also adjusts the indices of the parsed tags to accomodate for native TextMeshPro tags. TagProcessor Handles processing of, and stores successfully processed tags. TagProcessorManager Manages multiple TagProcessor. Interfaces ITagProcessorManager Interface for manager of TagProcessor. Enums ParsingUtility.TagType Tag type enum. Either open, close, or both. Delegates TMPTextProcessor.TMPTextProcessorEventHandler"
  },
  "index.html": {
    "href": "index.html",
    "title": "TMPEffects | TMPEffects documentation",
    "keywords": "TMPEffects If you want to, please support me / TMPEffects on Ko-fi! TMPEffects allows you to easily apply all kinds of effects to your TextMeshPro texts using (custom) tags • Animate text blocks continuously • Show and hide text over time • Animate the show / hide sequence • Raise commands at any given index Raise events at any given index API to create your own tags (animations, commands) For a full preview of built-in animations, show / hide animations, and commands, see the respective documentation. Dependencies and compatibility TMPEffects is compatible with Unity 2021.3 and up Tested in 2021.3, 2022.3 and 2023.2; if you have compatibility issues in another version (>= 2021.3), please open an issue for it! Only dependency: Unity's TextMeshPro package (automatically included in Unity 2018.3 and up) Installation TMPEffects is available on the OpenUPM registry. Alternatively, you can install TMPEffects through the Unity Package Manager, using the git url: https://github.com/Luca3317/TMPEffects.git?path=/Package If you don't know how to install packages using git urls, see the docs. If you instead want to simply clone the repository, you will have to manually import the required resources located under Assets > TMPEffects > Resources. Documentation The full documentation can be found here"
  },
  "manual/animatingacharacter.html": {
    "href": "manual/animatingacharacter.html",
    "title": "Animating a character | TMPEffects documentation",
    "keywords": "Animating a character This section guides you through how you animate characters in TMPEffects. As shown in Creating animations, the Animate method takes two parameters: CharData IAnimationContext For general information about these types, see the respective documentation. Applying transformations to a character Moving the character To move the character, simply use the SetPosition(Vector3 position) or AddPositionDelta(Vector3 delta) method on CharData. Most of the time, you will want to do this using the original position of the character and an offset. public void Animate(CharData cData, IAnimationContext context) { // Move the character up 125 units over time, then down again; indefinitely float val = Mathf.PingPong(context.animatorContext.PassedTime * 50, 125); cData.SetPosition(cData.InitialPosition + Vector3.up * val); } Your browser does not support the video tag. Rotating the character To rotate the character, use CharData's SetRotation(Quaternion rotation) method. If you want to rotate around a specific pivot, you may set it using either the SetPivot(Vector3 pivot) method or the AddPivotDelta(Vector3 delta) method. If you don't set a pivot for the rotation, it will rotate around the center of the character. public void Animate(CharData cData, IAnimationContext context) { // Rotate the character indefinitely in the z axis over time float angle = context.animatorContext.PassedTime * 50 % 360; cData.SetRotation(Quaternion.Euler(0, 0, angle)); // And by adding this line, it will use the pivot you set; // in this case the character will rotate around the point 150 units from its // center on the x axis cData.AddPivotDelta(Vector3.right * 150); } Your browser does not support the video tag. Scaling the character To scale the character, use the SetScale(Vector3 scale) method. public void Animate(CharData cData, IAnimationContext context) { // Ping-pong the scale between (0, 0, 0) and (1, 1, 1) over time float val = Mathf.PingPong(context.animatorContext.PassedTime, 1); Vector3 scale = Vector3.one * val; cData.SetScale(scale); } Your browser does not support the video tag. Modifying a character's vertices Setting the vertices' positions You can set the positions of the character's vertices using the SetPosition(int i, Vector3 value) method on the VertexData type. The integer specifies the vertex to modify (again, see CharData) while the vector specifies the new position. public void Animate(CharData cData, IAnimationContext context) { // Pingpong the magnitude of the offset between 0 and 125 over time, // then add that offset to the two top vertices float val = Mathf.PingPong(context.animatorContext.PassedTime * 50, 125); for (int i = 1; i < 3; i++) { cData.mesh.SetPosition(i, cData.initialMesh.GetPosition(i) + Vector3.up * val); } } Your browser does not support the video tag. Setting the vertices' colors Using the SetColor(int i, Color32 value, bool ignoreAlpha) method, you can set the color value of each vertex. If you pass true for ignoreAlpha, only the RGB color channels are overwritten; the alpha channel will remain unchanged. If you want to do the opposite of this and only set the alpha channel, then you can use the SetAlpha(int i, float alpha) method. public void Animate(CharData cData, IAnimationContext context) { // Set each vertex color to red and set the alpha dependent on passed time. Color32 color = Color.red; float alpha = Mathf.PingPong(context.animatorContext.PassedTime * 125, 255); for (int i = 0; i < 4; i++) { cData.mesh.SetColor(i, color, true); cData.mesh.SetAlpha(i, alpha); } } Your browser does not support the video tag. Setting the vertices' UVs Using the SetUV0(int i, Vector2 uv) and SetUV2(int i, Vector2 uv) methods, you can set the UV0 and UV2 values of each vertex respectively. These properties are more niche compared to the other ones, and you will likely use them much less; char is the only built-in animation to utilize this property. public void Animate(CharData cData, IAnimationContext context) { // Pan the UV0 of the character over time Vector2 delta = Vector2.right * context.animatorContext.PassedTime; for (int i = 0; i &lt; 4; i++) { cData.mesh.SetUV0(i, cData.initialMesh.GetUV0(i) + delta); } } Your browser does not support the video tag. Making your animation fancier The above character transformations and vertex modifiers are all you really need to animate your character! Combined with easing functions (see: AnimationCurveUtility, Waves), even these really simple animations above can look quite nice already. For example, the animation code for the built-in jump animation is hardly more complicated than that for the first animation on this page (at least once you've looked at Waves \uD83D\uDE09). public override void Animate(CharData cData, IAnimationContext context) { Data data = (Data)context.customData; float eval = data.wave.Evaluate(context.animatorContext.PassedTime, GetWaveOffset(cData, context, data.waveOffsetType)).Item1; cData.SetPosition(cData.InitialPosition + Vector3.up * eval); } Your browser does not support the video tag."
  },
  "manual/animationcurveutility.html": {
    "href": "manual/animationcurveutility.html",
    "title": "AnimationCurveUtility | TMPEffects documentation",
    "keywords": "AnimationCurveUtility AnimationCurveUtility is a static utility class that allows easy creation of various AnimationCurves. The full API docs can be found here. .center { display: block; margin-left: auto; margin-right: auto; margin-top: 2em; margin-bottom: 2em; width: 40%; } Predefined curves All of the easing functions presented at this link are implemented: https://easings.net/ You can create the corresponding AnimationCurve like this: AnimationCurveUtility.EaseInOutSine(). You can also get the Bézier points (don't worry about what this means if you don't know \uD83D\uDE04) that define the AnimationCurve, so you can manipulate them to easily create slightly modified versions of the existing curves using the Bézier constructors. Bezier constructors You can create AnimationCurves using Bézier points. Simply call Bezier(params Vector2[] points) with your points Bézier points. The method will automatically infer whether you are creating a linear, quadratic or cubic Bézier curve based on the amount of points. If the amount of points does not clearly indicate one specific type, higher degree Bézier curves are preferred. There are also the LinearBezier, QuadraticBezier, and CubicBezier methods, if you want to make sure the correct degree Bézier curve is created. ⚠️ When creating your own AnimationCurves like this, always keep in the back of your mind that Unity's AnimationCurves use time as input; this means the Bézier curve must at all times advance on the X axis, or you will get an invalid AnimationCurve. For example, imagine the quadratic curve defined by the points (0,0), (0,1), (1,1): This will yield an invalid curve! Consider the very beginning of this curve. At the very beginning, the curve moves perfectly straight up; that is not possible in AnimationCurves. Something even more extreme, like the curve moving \"back\" / to the left, is of course not possible either: Huge props to qwe321qwe321qwe321 on GitHub for his BezierToAnimationCurve implementation, as well as the optimized curve points!"
  },
  "manual/animationutility.html": {
    "href": "manual/animationutility.html",
    "title": "AnimationUtility | TMPEffects documentation",
    "keywords": "AnimationUtility AnimationUtility is a static utility class to be used with all animation types. The full API docs can be found here. Raw Positions & Deltas One of TMPAnimator's settings is a toggle that decides whether animations should be scaled or not (see TMPAnimator Settings). In some cases, you will want to ignore this scaling in your animation though. For example, the built-in spread animation sets the individual vertices of the character to the center point of the character, to make it invisible at first and then over time spread out from the center point to the original vertex positions. If this was scaled, then the vertices would in many cases move either not enough, or too far, to make the character invisible. These methods allow you to get and set positions and deltas that ignore the scaling of the animator: Getters Vector3 GetRawVertex(int index, Vector3 position, CharData cData, ref IAnimationContext ctx) - Calculate the raw version of the passed in vertex position, i.e. the one that will ignore the animator's scaling. Vector3 GetRawPosition(Vector3 position, CharData cData, ref IAnimationContext ctx) - Calculate the raw version of the passed in character position, i.e. the one that will ignore the animator's scaling. Vector3 GetRawDelta(Vector3 delta, CharData cData, ref IAnimationContext ctx) - Calculate the raw version of the passed in delta, i.e. the one that will ignore the animator's scaling. Setters void SetVertexRaw(int index, Vector3 position, CharData cData, IAnimationContext ctx) - Set the raw position of the vertex at the given index. This position will ignore the animator's scaling. void SetPositionRaw(Vector3 position, CharData cData, IAnimationContext ctx) - Set the raw position of the character. This position will ignore the animator's scaling. void AddVertexDeltaRaw(int index, Vector3 delta, CharData cData, IAnimationContext ctx) - Add a raw delta to the vertex at the given index. This delta will ignore the animator's scaling. void AddPositionDeltaRaw(Vector3 delta, CharData cData, IAnimationContext ctx) - Add a raw delta to the position of the character. This delta will ignore the animator's scaling. AnchorToPosition Given a Vector2 that represents an anchor (see ParameterTypes), you can calculate the actual position on the character using the Vector2 AnchorToPosition(Vector2 anchor, CharData cData) method. GetValue A simple wrapper method that allows you to evaluate an AnimationCurve in any WrapMode. Wave Utility The AnimationUtility class contains a Wave type; for more information about it as well as the WaveOffsetType enum, see the next section. These are the utility methods for the Wave type: Converting functions There are a few simple, general converting functions (that are not specific to the Wave type, but to waves in general): float FrequencyToPeriod(float frequency) - Get the period of a wave from its frequency float PeriodToFrequency(float period) - Get the frequency of a wave from its period float WaveLengthVelocityToFrequency(float wavelength, float wavevelocity) - Get the frequency of a wave from its wavelength and velocity float WaveLengthFrequencyToVelocity(float wavelength, float frequency) - Get the velocity of a wave from its wavelength and frequency float WaveVelocityFrequencyToLength(float wavevelocity, float frequency) - Get the wavelength of a wave from its velocity and frequency GetWaveOffset When evaluating a Wave, you have to pass in an offset, which is dependent on the current character you are animating as well as the WaveOffsetType you are using; the float GetWaveOffset(CharData cData, IAnimationContext ctx, WaveOffsetType type) calculates the correct offset for you."
  },
  "manual/autoparameters.html": {
    "href": "manual/autoparameters.html",
    "title": "AutoParameters | TMPEffects documentation",
    "keywords": "AutoParameters AutoParameters is a plugin for TMPEffects that minimizes any parameter-related boilerplate for animations by automatically implementing the ValidateParameters, SetParameters and GetNewCustomData methods for you. For more information, see the page on it."
  },
  "manual/chardata.html": {
    "href": "manual/chardata.html",
    "title": "CharData | TMPEffects documentation",
    "keywords": "CharData The CharData class holds information about a character, which is primarily used by the TMPAnimator and its animations. In addition to holding a selection of data supplied by the respective TMP_CharacterInfo, accessible through the info field, also holds TMPEffects-specific data and methods to manipulate said data. Modifiable properties Each CharData has a position, rotation and scale property. You may modify all of those properties using the respective setter methods. CharData also exposes the initial, readonly value of each of those properties. Through the mesh field, you can access the character's VertexData. In TextMeshPro, each character consists of a rectangular mesh. VertexData allows you to modify the properties of each of the four vertices of the character mesh. These properties are: Position Color UV0 UV2 VertexData also exposes a ReadOnlyVertexData object through its initial field. It contains the initial, readonly VertexData. Animating CharData For an explanation and examples as to how you can animate characters by modifying the mentioned properties, see Animating a character."
  },
  "manual/databases.html": {
    "href": "manual/databases.html",
    "title": "Databases | TMPEffects documentation",
    "keywords": "Databases In TMPEffects, the set of animations a TMPAnimator can use (or the set of commands a TMPWriter can use) is defined by the database it uses. Databases, like animations and commands, are ScriptableObject assets. You can create a new database by right-clicking in your project view, then Create -> TMPEffects -> Database, again, just like animations and commands. You can then add any animation / command to your database, and assign it to a TMPAnimator / TMPWriter component in the inspector. Of course, you can also modify the built-in default databases any way you want, or assign different databases to be used as default database in the TMPEffects settings (in the top bar, Edit -> Preferences -> TMPEffects). SceneAnimations and SceneCommands are separate from databases and are instead added to a dictionary in the component's inspector; see the individual sections on them."
  },
  "manual/effecttag.html": {
    "href": "manual/effecttag.html",
    "title": "TMPEffectTag | TMPEffects documentation",
    "keywords": "TMPEffectTag TMPEffectTag, together with TMPEffectTagIndices, is the data structure used to represent a tag in the code, for example animation tags or command tags. The API docs can be found here. Properties The TMPEffectTag consists of the following properties: Name : string Prefix : char Parameters : ReadOnlyDictionary<string, string> Example: the show tag <+fade anc=zero dur=0.55> would be: Name : \"fade\" Prefix : '+' Parameters : {{ \"anc\", \"zero\" }, { \"dur\", \"0.55\" }} Indices The TMPEffectTagIndices struct consists of: StartIndex : int EndIndex : int OrderAtIndex : int The indices are a half open interval; meaning a tag with a StartIndex of 5 and an EndIndex of 12 will \"contain\" the indices 5, 6, 7, 8, 9, 10, 11 and 12. The OrderAtIndex is used to maintain an order if there are multiple tags at the same index. Generally speaking, the tags' OrderAtIndex won't be sequential (i.e. 1, 2, 3, and so on), but may skip around. You will notice this if you iterate, for example, over the BasicTags property of a TMPAnimator. The only invariant OrderAtIndex it guaranteed to follow is that they are sorted from smallest to largest."
  },
  "manual/ianimationcontext.html": {
    "href": "manual/ianimationcontext.html",
    "title": "IAnimationContext | TMPEffects documentation",
    "keywords": "IAnimationContext An instance of the IAnimationContext type serves as the context for all animations. Properties IAnimationContext exposes various properties that will be useful for your animations: CustomData: The custom data object created in GetNewCustomData (see Creating Animations). SegmentData: Contains information about the animation segment the current character belongs to. StartIndex: The first index of the segment within the containing text Length: The lenght of the segment FirstVisibleIndex: The index of the first visible character (i.e. non-whitespace character) LastVisibleIndex: The index of the last visible character (i.e. non-whitespace character) FirstAnimationIndex: The index of the first character will actually be animated (i.e. not whitespace, not excluded by TMPAnimator) LastAnimationIndex: The index of the last character will actually be animated (i.e. not whitespace, not excluded by TMPAnimator) Max: The maximum vertex positions of text in this segment Min: The minimum vertex positions of text in this segment SegmentIndexOf(CharData): Get the index within this segment for the passed in CharData State: Exposes multiple readonly properties about the current state of the CharData (with previous animations already applied). Generally, to be used with the late tag parameters (see Getting started with TMPAnimator). CalculateVertexPositions(): Calculate the current vertex positions. Results can be read from BL_Result, TL_Result, TR_Result, BR_Result. Finished(int), Finished(CharData): Check whether the given CharData is done animating. To be used with show and hide animations (see Creating show / hide animations). FinishAnimation(CharData): Finish the animation for the given CharData. To be used with show and hide animations (see Creating show / hide animations). AnimatorContext: The IAnimatorContext exposes properties about the animator state. PassedTime: The time that has passed since the animator began animating. Generally speaking, you should use this as the time value for basic animations DeltaTime: The current delta time used by the animator to update the animations. UseScaledTime: Whether the animator uses scaled time (=> whether PassedTime is scaled) ScaleAnimations: Whether the animator scales the animation. Used by various AnimationUtility methods. StateTime(CharData): How long the given CharData has been in its current visibility state for. Generally speaking, you should use this as the time value for show and hide animations VisibleTime(CharData): How long the given CharData has been visible for. Can use this alternatively to PassedTime for basic animations"
  },
  "manual/installation.html": {
    "href": "manual/installation.html",
    "title": "Installation | TMPEffects documentation",
    "keywords": "Installation TMPEffects is available on the OpenUPM registry. Alternatively, you can install TMPEffects through the Unity Package Manager, using the git url: https://github.com/Luca3317/TMPEffects.git For that, open the Package Manager window in Unity and click on the '+' icon in the top left. Then, paste the above git url and hit enter. Done! Importing Resources Once installed, when you first access a TMPEffects component, you will be prompted to import the required resources. These are the asset files for the built-in animations, commands and databases, as well as a settings file (which you can access through Unity's Preferences). They will be imported into Assets/TMPEffects. Warning ⚠️ Ideally, you should reload the current scene once you imported these resources, otherwise some asset references might not be correctly updated until the next domain reload. After that, you should be good to go \uD83D\uDE03 Optionally, there are a few basic samples you can import."
  },
  "manual/introduction.html": {
    "href": "manual/introduction.html",
    "title": "Introduction | TMPEffects documentation",
    "keywords": "Introduction TMPEffects is a tool for Unity that allows you to easily apply many different kinds of effects to your text. It consists of two main components: TMPAnimator allows you to animate text over time TMPWriter allows you to show and hide text over time, as well as execute commands or raise events at any given index Using both components in conjunction also allows you to apply special animations to text that is in the process of being shown or hidden."
  },
  "manual/parameters.html": {
    "href": "manual/parameters.html",
    "title": "Parameters | TMPEffects documentation",
    "keywords": "Parameters The following three sections introduce you to the different parameter types, and show you how to make your life easier when writing animations (or commands)."
  },
  "manual/parametertypes.html": {
    "href": "manual/parametertypes.html",
    "title": "Parameter types | TMPEffects documentation",
    "keywords": "Parameter types TMPEffects supports a variety of different parameter types that come with built-in parsing utilities (see the next section). Supported types This is the full list of currently supported parameter types: float int bool Color Vector2 Vector3 Vector2Offset Vector3Offset Anchor TypedVector2 TypedVector3 AnimationCurve WaveOffsetType Array Type formatting This is an overview of how to correctly format the different parameter types in your tags, most with at least one example. float: Must use . as decimal, not , 2.54, 3 int: Just a plain integer number 12 bool: Either true or false Color: Colors may be defined either in HEX format, HSV format or RGB(A) format. In addition to that, there are a bunch of supported keywords #DEADBEEF,hsv(0.3,64,52), rgb(0,0.5,0.5), indigo Vector2: Two bracketed floats, separated by comma (0.3, 22.4) Vector3: Three bracketed floats, separated by comma (or two; third float automatically set to zero) (0.3, 22.4, 0) = (0.3, 22.4) Vector2Offset: Same as Vector2, but with leading o: o:(0.3, 22.4) Vector2Offset: Same as Vector3, but with leading o: (0.3, 22.4, 0) = o:(0.3, 22.4) Anchor: Same as Vector2, but with leading a: a:(0.3, 22.4) TypedVector2: Format of either Vector2, Vector2Offset or Anchor (0.3, 22.4), o:(0.3, 22.4), a:(0.3, 22.4) TypedVector3: Format of either Vector3, Vector3Offset or Anchor (0.3, 22.4, 0), o:(0.3, 22.4, 0), a:(0.3, 22.4) AnimationCurve: Generally keywords; though you may also construct custom curves by specifying one of the predefined methods (cubic, quadratic, linear) or just a raw vector sequence. See AnimationCurveUtility for more info. easinoutsine, quadratic((0,0),(0.2,0.7),(1,1)), (0,0),(0.2,0.7),(1,1) WaveOffsetType: Keywords index / idx, segmentindex / sindex / sidx, x / xpos, y / ypos Array: Multiple of the desired type, separated by a semicolon 0.3;4.82;1, red;green;blue, true;false;false"
  },
  "manual/parameterutility.html": {
    "href": "manual/parameterutility.html",
    "title": "ParameterUtility | TMPEffects documentation",
    "keywords": "ParameterUtility ParameterUtility is a static utility class for parameter validation and parsing, to be used with all types of animations and commands. The full API docs can be found here. For each of the supported parameter types listed in the previous section, there is a HasXYZParameter method, a HasNonXYZParameter method, a GetXYZParameter and a TryGetXZYParameter method. Each of these methods are explained individually below. HasParameter bool HasXYZParameter(IDictionary<string, string>, string name, params string[] aliases) checks whether the given set of parameters contains a parameter of the given name, or any of the aliases, that is of type XYZ. Example: HasFloatParameter(parameters, \"duration\", \"dur\", \"d\") returns true if parameters contains a parameter named either \"duration\", \"dur\" or \"d\", and the value could be converted to type float. Otherwise, it returns false. HasNonParameter bool HasNonXYZParameter(IDictionary<string, string>, string name, params string[] aliases) checks whether the given set of parameters contains a parameter of the given name, or any of the aliases, that is NOT of type XYZ. Example: HasNonFloatParameter(parameters, \"duration\", \"dur\", \"d\") returns true exactly when parameters contains a parameter named either \"duration\", \"dur\" or \"d\", but the value could NOT be converted to type float. Otherwise, it returns false. GetParameter XYZ GetXYZParameter(IDictionary<string, string>, string name, params string[] aliases) returns the parameter defined by the given name, or any of the aliases, converted to type XYZ. Otherwise, it will throw an exception. Example: GetFloatParameter(parameters, \"duration\", \"dur\", \"d\") throws an exception if parameters does not contain a parameter named either \"duration\", \"dur\" or \"d\", or, if the parameter is defined, it could not be converted to type float. Otherwise, it will return the parameter converted to type float. TryGetParameter bool TryGetXYZParameter(out XYZ value, IDictionary<string, string>, string name, params string[] aliases) wraps GetParameter in a try-catch statement, returning true if it was successful, otherwise it returns false. If successful, you can get the value of the converted parameter from the out XYZ value parameter. Example: TryGetFloatParameter(out float value, parameters, \"duration\", \"dur\", \"d\") returns false if parameters does not contain a parameter named either \"duration\", \"dur\" or \"d\", or, if the parameter is defined, it could not be converted to type float. Otherwise, it will return true and value will be set to the parameter converted to type float. Array For array parameters, each of these four methods have an additional required parameter: ParseDelegate<string, T, IDictionary<string, T>, where ParseDelegate is defined as: public delegate W ParseDelegate<T, U, V, W>(T input, out U output, V keywords). Essentially, this delegate is used to parse the individual elements of the array. You can use the ParsingUtility.StringToXYZ methods for this (they are not further explained here, but you can look at the API docs for them). Example: TryGetArrayParameter<float>(out float[] value, parameters, ParsingUtility.StringToFloat, \"numbers\", \"nums\") ParameterDefined In addition to these type-specific methods, there are also generic methods for checking whether a parameter is defined, without performing any type checks. These are: bool ParameterDefined(IDictionary<string, string>, string name, params string[] aliases): Checks whether a parameter of the given name or any of its aliases is present in the dictionary. EXACTLY one must be defined for this to return true; if for example two aliases are present it is considered not defined. string GetDefinedParameter(IDictionary<string, string>, string name, params string[] aliases): If the parameter is defined according to ParameterDefined, this will return the value of that parameter. Otherwise, it will throw an exception. bool TryGetDefinedParameter(out string value, IDictionary<string, string>, string name, params string[] aliases): Wraps GetDefinedParameter in a try-catch statement. If successful, the parameter value will be stored in the out string value parameter. Waves If your animation uses Waves, you can use the pre-defined wave parameters set by using ValidateWaveParameters(IDictionary<string, string> parameters, string prefix = \"\") and GetWaveParameters(IDictionary<string, string> parameters, string prefix = \"\") in ValidateParameters and SetParameters respectively. The passed in prefix lets you use multiple waves with differently prefixed parameter names. If you have a default wave, you can combine it with the set parameters like this: [SerializeField] Wave wave; public void SetParameters(object customData, IDictionary&lt;string, string&gt; parameters) { Data d = customData as Data; // Cast custom data to whatever type it is d.Wave = CreateWave(wave, GetWaveParameters(parameters)); } This will create a new wave from the set parameters and the values defined in the default wave as fallback values for the non-set parameters. For the full list of parameters that are part of the wave parameters set, see the API documentation."
  },
  "manual/tagcollections.html": {
    "href": "manual/tagcollections.html",
    "title": "TagCollections | TMPEffects documentation",
    "keywords": "TagCollections TagCollection is a collection of TMPEffectTagTuples, which combine TMPEffectTags and TMPEffecTagIndices. It maintains an order for the tags based on their indices, and exposes multiple functions to get contained tags based on their indices, and vice versa. When creating a TagCollection, you can pass a ITMPTagValidator, to guarantee you may only add specific tags to the collection. For normal use cases, you won't be creating TagCollections though; generally, you will use the TagCollections exposed by the TMPAnimator and TMPWriter to add or remove tags from script. Be aware that if you add tags to a TagCollection, if there is already a tag present with the exact same StartIndex and OrderAtIndex, that the OrderAtIndex of the contained tags will be adjusted."
  },
  "manual/tmpanimator.html": {
    "href": "manual/tmpanimator.html",
    "title": "TMPAnimator | TMPEffects documentation",
    "keywords": "TMPAnimator TMPAnimator is one of the two main components of TMPEffects, along with TMPWriter. Primarily, it allows you to Your browser does not support the video tag."
  },
  "manual/tmpanimator_addinganimations.html": {
    "href": "manual/tmpanimator_addinganimations.html",
    "title": "| TMPEffects documentation",
    "keywords": ""
  },
  "manual/tmpanimator_animationutility_wave.html": {
    "href": "manual/tmpanimator_animationutility_wave.html",
    "title": "Wave | TMPEffects documentation",
    "keywords": "Wave The Wave class significantly streamlines the process of creating periodic animations. .center { display: block; margin-left: auto; margin-right: auto; margin-top: 2em; margin-bottom: 2em; width: 50%; } .center2 { display: block; margin-left: auto; margin-right: auto; margin-top: 2em; margin-bottom: 2em; width: 70%; } Defining a wave Waves are defined by, and created using, eight different parameters, which are as follows: Upward Curve: Defines the \"shape\" of the half of the curve that moves up Downward Curve: Defines the \"shape\" of the half of the curve that moves down Up Period: Defines the amount of time it takes to travel the upward curve Down Period: Defines the amount of time it takes to travel the downward curve Amplitude: Defines the maximum value the wave reaches; this is 1 by default Crest Wait: Defines the amount of time the wave maintains its peak Trough Wait: Defines the amount of time the wave maintains its minimum Uniformity: Defines how much the offset passed in when evaluating the wave is considered The following diagram illustrates the first five parameters. On the left you see the upward curve, on the right the downward curve. The second diagram illustrates crest and trough wait. Both essentially insert a period of time during which the wave's value does not change. The uniformity is hard to visualize in a diagram in this way; I find it easier to just imagine it abstractly as the uniformity the animation will show across the animated text segment. Below, you see the same animation with the exact same wave, except that the first animation uses uniformity = 0, the second uniformity = 0.25, the third uniformity = 1. Your browser does not support the video tag. Creating a wave You create a wave simply by passing in these eight values into Waves constructor. Since this class is designed specifically to be used with animations though, likely you will mostly be creating it using the CreateWave method from the ParameterUtility class. For info about how to use wave as a parameter in your animations, see ParameterUtility Wave. Evaluating a wave Once you have created a Wave, you can evaluate it using a time value and an offset value: (float, int) Evaluate(float time, float offset). As you can tell by the signature, Evaluate returns two values. The float is the actual value of the curve for the given time and offset. The integer indicates whether the curve is currently travelling up or down; if it is negative, the curve is moving down, if it is positive, the curve is moving up. This value is useful for when you want to switch the behavior of your animation depending on what curve the wave is currently travelling. For example, the built-in fade animation can use different anchors depending on whether the character is fading in or out. The animation below visualizes how fade uses both values of the Evaluate method. Your browser does not support the video tag. Checking wave extrema You can check if the wave passed an extrema (so either the crest or the trough) during the last update, using the int PassedExtrema(float time, float deltaTime, float offset) method. Once again, you need the time value and the offset, and additionally here you need the deltaTime since you last checked. Essentially, the method checks whether the wave passed an extrema during the time interval of [timeValue - deltaTime, timeValue]. A positive return value indicates that a maximum was passed, a negative return value indicates that a minimum was passed, and 0 indicates neither was. An additional, optional parameter is PulseExtrema. If the checked wave has a crest or trough wait, this parameter defines whether an extremum is passed once the wait time begins, or once it ends. PulseExtrema can also consider both to be an extrema, but of course be aware that it will then notify you of each extremum twice. If multiple extrema were passed during the specified interval, it will notify you of the latest one."
  },
  "manual/tmpanimator_builtinbasicanimations.html": {
    "href": "manual/tmpanimator_builtinbasicanimations.html",
    "title": "Built-in animations | TMPEffects documentation",
    "keywords": "Built-in animations This section gives you a complete overview of all built-in basic animations and their parameters (for show / hide / scene animations see the respective sections). Basic animations are those type of animation seen in the previous section, which animate a piece of text continuously over time. .anim-grid { display: grid; grid-template-columns: repeat(3, 1fr); } .centered-video { } .flex-row{ display: flex; flex-direction: row; justify-content: space-evenly; } .flex-row > div { flex: 1; } .anim-container { margin-left: 1.2rem; margin-right: 1.2rem; } .wrap-collabsible { margin-bottom: 1.2rem 0; display: flex; justify-content: center; flex-direction: column; align-items: center; } input[type='checkbox'] { display: none; } .lbl-toggle { display: block; font-weight: bold; font-family: monospace; font-size: 1.2rem; text-transform: uppercase; text-align: center; padding: 1rem; color: #A77B0E; background: #FAE042; cursor: pointer; border-radius: 0px; transition: all 0.00s ease-out; user-select: none; width: 100%; } .lbl-toggle:hover { color: #7C5A0B; } .lbl-toggle::before { content: ' '; display: inline-block; border-top: 5px solid transparent; border-bottom: 5px solid transparent; border-left: 5px solid currentColor; vertical-align: middle; margin-right: .7rem; transform: translateY(-2px); transition: transform .0s ease-out; } .toggle:checked + .lbl-toggle::before { transform: rotate(90deg) translateX(-3px); } .collapsible-content { max-height: 0px; overflow: hidden; transition: max-height .00s ease-in-out; } .toggle:checked + .lbl-toggle + .collapsible-content { max-height: 100vh; } .toggle:checked + .lbl-toggle { border-bottom-right-radius: 0; border-bottom-left-radius: 0; } .collapsible-content .content-inner { background: rgba(250, 224, 66, .2); border-bottom: 1px solid rgba(250, 224, 66, .45); border-bottom-left-radius: 7px; border-bottom-right-radius: 7px; padding: .5rem 1rem; } Your browser does not support the video tag. wave Parameters Wave: see ParameterUtility.Waves WaveOffsetType: The way the offset for the wave is calculated. waveoffset, woffset, waveoff, woff Your browser does not support the video tag. Fade Parameters Wave: see ParameterUtility.Waves WaveOffsetType: The way the offset for the wave is calculated. waveoffset, woffset, waveoff, woff MaxOpacity: The maximum opacity that is reached. maxopacity, maxop, max FadeInAnchor: The anchor used for fading in. fadeinanchor, fianchor, fianc, fia FadeInDirection: The direction used for fading in. fadeindirection, fidirection, fidir, fid MinOpacity: The minimum opacity that is reached. minopacity, minop, min FadeOutAnchor: The anchor used for fading out. fadeoutanchor, foanchor, foanc, foa FadeOutDirection: The direction used for fading out. fadeoutdirection, fodirection, fodir, fod Your browser does not support the video tag. Pivot Parameters Wave: see ParameterUtility.Waves WaveOffsetType: The way the offset for the wave is calculated. waveoffset, woffset, waveoff, woff Pivot: The pivot position of the rotation. pivot, pv, p RotationAxis: The axis to rotate around. rotationaxis, axis, a MaxAngleLimit: The maximum angle of the rotation. maxangle, maxa, max MinAngleLimit: The minimum angle of the rotation. minangle, mina, min Your browser does not support the video tag. funky Parameters Speed: The speed at which the animation plays. speed, sp, s SqueezeFactor: The percentage of its original size the text is squeezed to. squeezefactor, squeeze, sqz Amplitude: The amplitude the text pushes to the left / right. amplitude, amp Your browser does not support the video tag. Fade Parameters Characters: The pool of characters to change to. characters, chars, char, c Probability: The probability to change to a character different from the original. probability, prob, p MinWait: The minimum amount of time to wait once a character changed (or did not change). minwait, minw, min MaxWait: The maximum amount of time to wait once a character changed (or did not change). maxwait, maxw, max AutoCase: Whether to ensure capitalized characters are only changed to other capitalized characters, and vice versa. autocase, case Your browser does not support the video tag. shake Parameters Uniform: Whether to apply the shake uniformly across the text. uniform, uni MaxXAmplitude: The maximum X amplitude of each shake. maxxamplitude, maxxamp, maxxa, maxx MinXAmplitude: The minimum X amplitude of each shake. minxamplitude, minxamp, minxa, minx MaxYAmplitude: The maximum Y amplitude of each shake. maxyamplitude, maxyamp, maxya, maxy MinYAmplitude: The minimum Y amplitude of each shake. minyamplitude, minyamp, minya, miny UniformWait: Whether to use uniform wait time across the text. Ignored if uniform is true. uniformwait, uniwait, uniw MaxWait: The minimum amount of time to wait after each shake. maxwait, maxw MinWait: The maximum amount of time to wait after each shake. minwait, minw Your browser does not support the video tag. grow Parameters Wave: see ParameterUtility.Waves WaveOffsetType: The way the offset for the wave is calculated. waveoffset, woffset, waveoff, woff MaxScale: The maximum scale to grow to. maxscale, maxscl, max MinScale: The minimum scale to shrink to. minscale, minscl, min Your browser does not support the video tag. Fade Parameters Wave: see ParameterUtility.Waves WaveOffsetType: The way the offset for the wave is calculated. waveoffset, woffset, waveoff, woff Colors: The colors to cycle through. colors, clrs Your browser does not support the video tag. spread Parameters Wave: see ParameterUtility.Waves WaveOffsetType: The way the offset for the wave is calculated. waveoffset, woffset, waveoff, woff GrowAnchor: The anchor used for growing. growanchor, growanc, ganc GrowDirection: The direction used for growing. growdirection, growdir, gdir ShrinkAnchor: The anchor used for shrinking. shrinkanchor, shrinkanc, sanc ShrinkDirection: The direction used for shrinking. shrinkdirection, shrinkdir, sdir MaxPercentage: The maximum percentage to spread to, at 1 being completely shown. maxpercentage, maxp, max MinPercentage: The minimum percentage to unspread to, at 0 being completely hidden. minpercentage, minp, min Your browser does not support the video tag. pivotc Parameters Pivot: The pivot position of the rotation. pivot, pv, p RotationAxis: The axis to rotate around. rotationaxis, axis, a Speed: The speed of the rotation, in rotations per second. speed, sp, s Your browser does not support the video tag. Your browser does not support the video tag. <swing> and <jump> are based on previous animations; they use the same code with different default values. <swing> is based on <pivot>, <jump> is based on <wave>. The parameters are therefore identical with the ones they are based on."
  },
  "manual/tmpanimator_builtinshowhideanimations.html": {
    "href": "manual/tmpanimator_builtinshowhideanimations.html",
    "title": "Built-in animations | TMPEffects documentation",
    "keywords": "Built-in animations This section gives you a complete overview of all built-in show and hide animations and their parameters (for basic / scene animations see the respective sections). Each of the animations listed here has both a show and a hide version. .centered-video { } .anim-grid { display: grid; grid-template-columns: repeat(3, 1fr); } .grid-item { border: 1px solid black; padding: 10px; } .flex-row{ display: flex; flex-direction: row; justify-content: space-evenly; } .flex-row > div { flex: 1; } .anim-container { margin-left: 1.2rem; margin-right: 1.2rem; } .wrap-collabsible { margin-bottom: 1.2rem 0; display: flex; justify-content: center; flex-direction: column; align-items: center; } input[type='checkbox'] { display: none; } .lbl-toggle { display: block; font-weight: bold; font-family: monospace; font-size: 1.2rem; text-transform: uppercase; text-align: center; padding: 1rem; color: #A77B0E; background: #FAE042; cursor: pointer; border-radius: 0px; transition: all 0.00s ease-out; user-select: none; width: 100%; } .lbl-toggle:hover { color: #7C5A0B; } .lbl-toggle::before { content: ' '; display: inline-block; border-top: 5px solid transparent; border-bottom: 5px solid transparent; border-left: 5px solid currentColor; vertical-align: middle; margin-right: .7rem; transform: translateY(-2px); transition: transform .0s ease-out; } .toggle:checked + .lbl-toggle::before { transform: rotate(90deg) translateX(-3px); } .collapsible-content { max-height: 0px; overflow: hidden; transition: max-height .00s ease-in-out; } .toggle:checked + .lbl-toggle + .collapsible-content { max-height: 100vh; } .toggle:checked + .lbl-toggle { border-bottom-right-radius: 0; border-bottom-left-radius: 0; } .collapsible-content .content-inner { background: rgba(250, 224, 66, .2); border-bottom: 1px solid rgba(250, 224, 66, .45); border-bottom-left-radius: 7px; border-bottom-right-radius: 7px; padding: .5rem 1rem; } Your browser does not support the video tag. fade Parameters Duration: How long the animation will take to fully show / hide the character. duration, dur, d Curve: The curve used for fading in / out. curve, crv, c Anchor: The anchor that is faded in / out from. anchor, anc, a Direction: The direction that is faded in / out from. direction, dir Show:StartOpacity: The opacity that is faded in from. startopacity, startop, start Hide:TargetOpacity: The opacity that is faded out from. targetopacity, targetop, target Your browser does not support the video tag. pivot Parameters Duration: How long the animation will take to fully show / hide the character. duration, dur, d Curve: The curve used for getting the t-value to interpolate between the angles. curve, crv, c Pivot: The pivot position of the rotation. pivot, pv, p StartAngle: The starting euler angles. startangle, start TargetAngle: The target euler angles. targetangle, target Your browser does not support the video tag. grow Parameters Duration: How long the animation will take to fully show / hide the character. duration, dur, d Curve: The curve used for getting the t-value to interpolate between the scales. curve, crv, c Show StartScale: The scale to start growing to the initial scale from. startscale, startscl, start Hide TargetScale: The scale to grow to from the initial scale. targetscale, targetscl, target Your browser does not support the video tag. spread Parameters Duration: How long the animation will take to fully show / hide the character. duration, dur, d Curve: The curve used for getting the t-value to interpolate between the percentages. curve, crv, c Anchor: The anchor from where the character spreads. anchor, anc, a Direction: The direction in which the character spreads. direction, dir, d StartPercentage: The start percentage of the spread, 0 being fully hidden. startpercentage, start TargetPercentage: The target percentage of the spread, 1 being fully shown. targetpercentage, target Your browser does not support the video tag. move Parameters Duration: How long the animation will take to fully show / hide the character. duration, dur, d Curve: The curve used for getting the t-value to interpolate between the start and target position. curve, crv, c Show StartPositon: The postion to move the character in from. startposition, startpos, start Hide TargetPosition: The postion to move the character to. targetposition, targetpos, target Your browser does not support the video tag. shake Parameters Duration: How long the animation will take to fully show / hide the character. duration, dur, d MaxXAmplitude: The maximum X amplitude of each shake. maxxamplitude, maxxamp, maxxa, maxx MinXAmplitude: The minimum X amplitude of each shake. minxamplitude, minxamp, minxa, minx MaxYAmplitude: The maximum Y amplitude of each shake. maxyamplitude, maxyamp, maxya, maxy MinYAmplitude: The minimum Y amplitude of each shake. minyamplitude, minyamp, minya, miny MaxWait: The minimum amount of time to wait after each shake. maxwait, maxw MinWait: The maximum amount of time to wait after each shake. minwait, minw WaitCurve: The curve that defines the falloff of the wait between each shake. waitcurve, waitcrv, waitc AmplitudeCurve: The curve that defines the falloff of the amplitude of each shake. amplitudecurve, amplitudecrv, amplitudec, ampcurve, ampcrv, ampc Your browser does not support the video tag. char Parameters Duration: How long the animation will take to fully show / hide the character. duration, dur, d Characters: The pool of characters to change to. characters, chars, char, c Probability: The probability to change to a character different from the original. probability, prob, p MinWait: The minimum amount of time to wait once a character changed (or did not change). minwait, minw, min MaxWait: The maximum amount of time to wait once a character changed (or did not change). maxwait, maxw, max AutoCase: Whether to ensure capitalized characters are only changed to other capitalized characters, and vice versa. autocase, case WaitCurve: The curve that defines the falloff of the wait between each change. waitcurve, waitcrv, waitc Probability: The curve that defines the falloff of the probability of changing to a character other than the original. probabilitycurve, probabilitycrv, probabilityc, probcurve, probcrv, probc"
  },
  "manual/tmpanimator_componentoverview.html": {
    "href": "manual/tmpanimator_componentoverview.html",
    "title": "TMPAnimator overview | TMPEffects documentation",
    "keywords": "TMPAnimator overview This section gives an overview of the actual TMPAnimator component, both for the inspector and scripting. The full API documentation can be found here. Preview To toggle the editor preview of animations, press the TogglePreview at the top of the TMPAnimator inspector. Next to it, the button labeled Reset time resets the time tracked by the TMPAnimator component, and therefore all animations. Updating the animations In the inspector or through the SetUpdateFrom method, you can set how the animations are updated. If UpdateFrom is set to either Update, LateUpdate or FixedUpdate, the animations are automatically updated in the respective Unity callback. In order to play animations in play mode, you will have to call StartAnimating or set the Play On Start to true in either the inspector or some other script's Awake function. You can then stop animating again by simply calling StopAnimating. Alternatively, if you want more fine-tuned control over when and how often animations are updated, for example if you want to limit the updates per second to at most 300, you can set the TMPAnimator's UpdateFrom to Script. This causes the animations to no longer be updated automatically; instead you may call UpdateAnimations(float deltaTime) manually whenever you like. Note that if UpdateFrom is set to Script, you should not call StartAnimating or StopAnimating, since this will have no effect besides logging a warning to Unity's console. Vice versa, if UpdateFrom is set to be automatically updated, you should not call UpdateAnimations(float deltaTime); it again does nothing but log a warning. The state of UpdateFrom has no effect on the editor preview. Animation databases The TMPAnimator inspector has a foldout labeled Animations. There, you may choose the animation database that is used to process animation tags from the TextMeshPro component's text. If you toggle Use default database to true, the default animation database is automatically selected for you. The default database is defined in the TMPEffects preferences file. You can also set the database used by the TMPAnimator component through script, using the SetDatabase(TMPAnimationDatabase db) method. Below the database, there are three other fields: SceneAnimations, SceneShowAnimations and SceneHideAnimations. These are simply dictionaries that allow you to map tag names to SceneAnimations. Tags defined here are also parsed by the TMPAnimator. For more about databases, see Databases. For more about SceneAnimations, see SceneAnimations. Animator settings TMPAnimator has various settings that modify the way it animates its text. Each of these is settable through both the inspector and through script. Animations override: The default override behavior for all animation tags. If true, each tag overrides any of its category (basic / show / hide) that came before it, and only that one is applied. Otherwise, animations are stacked by default. Each tag can manually define its override behavior by using the override (shorthand: or) parameter. Default show / hide string: Allows you to define a default show / hide animation that is used for the entirety of the text, if no other show / hide animation tag effects it. Set this like you would add any tag to your text, e.g. <+fade dur=0.65 anc=a:bottom>>, <-spread crv=easeinoutsine>>. Exclusions: For each of the animationg categories (basic / show / hide), you can define a set of characters that is excluded from all animations. For example, if you don't want numbers to be animated, you could set Excluded Characters to \"1234567890\". In addition to this, there is an Exclude Punctuation toggle for each of the categories. Scale animations: Defines whether animations should be scaled to the font size property of the TMP_Text component. If true, animations will look identical regardless of font size. Use scaled time: Defines whether animations should use scaled time or not. Adding & removing tags through script The TMPAnimator class exposes four different TagCollections: BasicTags, which contains all parsed basic animation tags, ShowTags, which contains all parsed show animation tags and HideTags, which contains all parsed hide animation tags. Additionally, Tags is the union of the other three collections. For each of the TagCollections, you may freely add and remove tags at any point."
  },
  "manual/tmpanimator_creatinganimations.html": {
    "href": "manual/tmpanimator_creatinganimations.html",
    "title": "Creating animations | TMPEffects documentation",
    "keywords": "Creating animations This section walks you through creating your own animations, specifically basic animations, or animations that derive from TMPAnimation. For what small differences there are, see Creating show / hide animation and Creating scene animations. Creating the class First, create a new C# script in the Unity editor. Add the following using statement at the top of your class: using TMPEffects.TMPAnimations;. Then, make the created class derive from TMPAnimation. In order to be able to create the animation object in the Unity editor and add it to your database, make sure to decorate the class with the CreateAssetMenu attribute. Methods You will have errors due to TMPAnimation's abstract members not being implemented. Auto-implement them using your IDE, or add them manually. When you are done, your class should look something like this: using UnityEngine; using TMPEffects.TMPAnimations; [CreateAssetMenu(fileName=\"new YourFirstAnimation\", menuName=\"Your/Path/YourFirstAnimation\")] public class YourFirstAnimation : TMPAnimation { public override void Animate(CharData cData, IAnimationContext context) { throw new System.NotImplementedException(); } public override bool ValidateParameters(IDictionary<string, string> parameters) { throw new System.NotImplementedException(); } public override object GetNewCustomData() { throw new System.NotImplementedException(); } public override void SetParameters(object customData, IDictionary<string, string> parameters) { throw new System.NotImplementedException(); } } Let's go over each method individually. Animate(CharData cData, IAnimationContext context): The primary method of your animation. This method will be called each animation update, once for each animated character. We'll go into more detail about this method in the next section. ValidateParameters(IDictionary<string, string>): This method is called once during tag processing. It allows you to specify whether a given tag for this animation has valid parameters. ParameterUtility will come in handy here. Return true if the parameters are valid, return false if not. If false, the tag will not be processed. GetNewCustomData(): Allows you to create a piece of custom data that will be passed into Animate as part of the IAnimationContext. Used for storing parameters, keeping other consistent values (for example, create an RNG once and store it here instead of creating it every Animate call), and anything else you need. In here, you should also set the default values for the parameters defined in the inspector. SetParameters(object customData, IDictionary<string, string>): This method is called once, right after tag processing is done. The passed in customData object is the object you created and returned in GetNewCustomData. It allows you to store the tag parameters in your object and access them in Animate. Full example The code below is the full implementation of the built-in wave animation. If the code seems somewhat daunting don't worry; you will have to have looked at AnimationUtility, ParameterUtility, and Animating a character to fully get what's going on here \uD83D\uDE42 using System.Collections.Generic; using UnityEngine; using TMPEffects.CharacterData; using static TMPEffects.ParameterUtility; using static TMPEffects.TMPAnimations.AnimationUtility; using TMPEffects.Extensions; namespace TMPEffects.TMPAnimations.Animations { [CreateAssetMenu(fileName = \"new WaveAnimation\", menuName = \"TMPEffects/Animations/Wave\")] public class WaveAnimation : TMPAnimation { [Tooltip(\"The wave that defines the behavior of this animation. No prefix.\\nFor more information about Wave, see the section on it in the documentation.\")] [SerializeField] Wave wave = new Wave(AnimationCurveUtility.EaseInOutSine(), AnimationCurveUtility.EaseInOutSine(), 0.5f, 0.5f, 1f, 1f, 0.2f); [Tooltip(\"The way the offset for the wave is calculated.\\nFor more information about Wave, see the section on it in the documentation.\\nAliases: waveoffset, woffset, waveoff, woff\")] [SerializeField] WaveOffsetType waveOffsetType = WaveOffsetType.XPos; // Animate the character public override void Animate(CharData cData, IAnimationContext context) { // Cast your custom data object to the type Data data = (Data)context.customData; // Evaluate the wave data structure at the current time, with the characters offset (see AnimationUtility section for info on this) float eval = data.wave.Evaluate(context.animatorContext.PassedTime, GetWaveOffset(cData, context, data.waveOffsetType)).Item1; // Set the new position of the character cData.SetPosition(cData.info.initialPosition + Vector3.up * eval); } // Validate the tag's parameters public override bool ValidateParameters(IDictionary<string, string> parameters) { // If there is no parameters, return true (wave does not have any required parameters) if (parameters == null) return true; // If there is a parameter \"waveoffset\" (or one of its aliases) // but it has the wrong type, return false if (HasNonWaveOffsetParameter(parameters, \"waveoffset\", WaveOffsetAliases)) return false; // If the wave parameters could not be validated, return false // Note: \"WaveParameters\" does not refer to anything specific to \"WaveAnimation\" here. // WaveParameters is a predefined parameter bundle in ParameterUtility. See the section on it for more info. if (!ValidateWaveParameters(parameters)) return false; // else return true return true; } // Create the custom data object, set the default values for the parameters, and return it public override object GetNewCustomData() { return new Data() { wave = this.wave, waveOffsetType = this.waveOffsetType }; } // Set the parameters defined in the tag public override void SetParameters(object customData, IDictionary<string, string> parameters) { // If there is no parameters, return early if (parameters == null) return; // Cast your custom data object to the type Data data = (Data)customData; // If has the waveoffset parameter set it in your custom data object if (TryGetWaveOffsetParameter(out var wot, parameters, \"waveoffset\", WaveOffsetAliases)) data.waveOffsetType = wot; // Set the wave in your custom data object // As with ValidateWaveParameters, \"Wave\" refers to the parameter bundle // defined in ParameterUtility, not \"WaveAnimation\". data.wave = CreateWave(this.wave, GetWaveParameters(parameters)); } // The class used to store the parameter values private class Data { public Wave wave; public WaveOffsetType waveOffsetType; } } } Adding the animation to a database To actually use the animation in your text, you will have to follow these steps: Create an animation object: Right click in your project view and create it (it will be in the path you specified in the CreateAssetMenu attribute). Add that object to the database you want to use and give it a name Use that database in the TMPAnimator component Done! You can now use your custom animation like any of the built-in ones. Creating show / hide animations Creating show and hide animations works 99% the same as creating basic animations. The only differences are: Instead of deriving from TMPAnimation, you must derive from TMPShowAnimation or TMPHideAnimation respectively. Warning ⚠️ You HAVE to call context.FinishAnimation(cData) at some point in the animation; This will notify the animator that this show animation is finished, and the character may transition from the Showing state to the Shown state. Because of this, all built-in show and hide animations have a duration parameter, and context.FinishAnimation(cData); is called when that duration is exceeded. See the example below for a simple way to do that. public void Animate(CharData cData, IAnimationContext context) { ReadOnlyAnimatorContext ac = context.animatorContext; Data d = context.customData as Data; // Check if the difference between the time that passed since the animator started // playing and the time the character entered the SHOWING state exceeds the duration if (ac.PassedTime - ac.StateTime(cData) >= d.duration) { context.FinishAnimation(cData); return; } // Actual animation logic here... } Creating scene animations Creating a scene animation, scene show animation or scene hide animation is almost the exact same as creating a basic animation, show animation or hide animation; the only difference is that you will have to derive from TMPSceneAnimation, TMPSceneShowAnimation or TMPSceneHideAnimation respectively, and that you don't add the CreateAssetMenu attribute. Since it is not a ScriptableObject, you of course don't add it to a database either; instead, you add it as a component to a GameObject in your scene, and add that GameObject to your TMPAnimator as described here: Adding scene animation. Warning ⚠️ The context.FinishAnimation(cData) call is required for TMPSceneShowAnimation and TMPSceneHideAnimation as well."
  },
  "manual/tmpanimator_gettingstarted.html": {
    "href": "manual/tmpanimator_gettingstarted.html",
    "title": "Getting started with TMPAnimator | TMPEffects documentation",
    "keywords": "Getting started with TMPAnimator After adding TMPEffects to your project, add a TMPAnimator component to a GameObject with a TMP_Text component (either TextMeshPro - Text or TextMeshPro - Text (UI)). Applying your first animation Write some placeholder text in the TextMeshPro's component textbox. Analogous to TextMeshPro's built-in rich text tags (e.g. <color>, <s>), you can add animations to your text by simply adding animation tags. Try adding <wave> before your placeholder text, and then hitting the Toggle Preview button in the TMPAnimator's inspector. In the scene and game view, you should now see that your text is being animated. It should look something like this: Your browser does not support the video tag. Warning ⚠️ If the <wave> tag is still visible in the scene / game view, the tag is not being correctly processed. Make sure to use the default database by toggling Use default database in the TMPAnimator inspector's Animations foldout. You can close the animation using </wave>. Only text between the opening and closing tag is animated. Modifying the animation Optionally, you can pass various parameter to animation tags. For example, the <wave> tag supports amplitude and uniformity, among others. You could modify the tag like so: <wave amplitude=10 uniformity=0.5>, which should result in something like this: Your browser does not support the video tag. Try to play around with these two values to get something you like! Theres a lot more customization you can apply for almost all animation tags; a complete overview of all tags and their respective parameters can be found in Built-in animations. Stacking animations First, close the <wave> if you haven't already. After the closing tag, add another tag, <palette>, as well as some text after this tag that will be animated by it. Your text should look like this now: \"<wave> *Text* </wave> <palette> *More text* </palette>\", although you will notice the last closing tag is completely optional in this case. The animated text should look like this: Your browser does not support the video tag. If you now remove the closing </wave> tag, the second text will be animated by both tags (assuming the Animations override toggle in the Animator settings foldout is set to false, which it will be by default). It should look something like this: Your browser does not support the video tag. In this manner, you can stack a (theoretically) limitless amount of animations. Of course, there's no guarantee all combinations will mesh well together \uD83D\uDE09 If you switch the Animations override toggle in the TMPAnimator's inspector to true, the second text will be animated as before. This toggle only defines the default behavior of animation tags; you can decide whether a tag should override the previous tags individually by adding the override parameter to a tag, like so: <palette override=true>. All animation tags support this parameter. Late animations / second pass Another parameter supported by all animation tags is late, and is used like so: <wave late>. If set, the animation will be applied in a second pass within the TMPAnimator, meaning it will be applied after all animations that do not have this parameter. You will not need this parameter in the large majority of cases. It is useful primarily for when you need the mesh data of the character to consider the changes made by the other animations. For example, the flashlight effect shown below needs the late parameter to work correctly, as it operates on the vertex positions of the characters. If it was applied before the wave animation, the flashlight would use the incorrect, initial vertex positions. Your browser does not support the video tag. More information about how animations work (and how to create your own) can be found in Creating Animations."
  },
  "manual/tmpanimator_sceneanimations.html": {
    "href": "manual/tmpanimator_sceneanimations.html",
    "title": "Scene animations | TMPEffects documentation",
    "keywords": "Scene animations In addition to TMPAnimation, TMPShowAnimation and TMPHideAnimation, which the animations we've seen so far derive from and which are stored on disk, there is also a SceneAnimation equivalent for each. These are alternative versions of the base classes for the respective category which derive from Unity's MonoBehaviour. The primary purpose of them is to allow you to easily reference Scene objects. Adding scene animations When you have a GameObject with a SceneAnimation component on it, you can simply drag it into the corresponding dictionary in TMPAnimator's Animations foldout, the same way you would assign any scene reference. Once you did that, enter a fitting name for the animation in the field next to where you dragged the SceneAnimation. That's it! You can now use the animation in your text through a tag like any of the built-in animations. Applying scene animations Scene animations are applied in the exact same way as their respective counterpart: Scene animation tags can be directly inserted into the text, where scene show animations are prefixed with a '+', scene hide animations with a '-', and basic scene animation tags are not prefixed. Creating scene animations For information about how to create scene animations, see Creating animations."
  },
  "manual/tmpanimator_showhideanimations.html": {
    "href": "manual/tmpanimator_showhideanimations.html",
    "title": "Show / hide animations | TMPEffects documentation",
    "keywords": "Show / hide animations In addition to basic animations, which are applied continuously, there are also show animations and hide animations, which will be applied only when the effected text is in the process of being shown / hidden. Applying show / hide animations Generally speaking, both show and hide animations require you to add a TMPWriter component to the same GameObject as your TMPAnimator. (You could also write a custom script to show and hide the text in the manner required for show / hide animations to take effect, using TMPAnimator's or TMPWriter's Show/Hide methods.) Show and hide animations are applied in much the same way as basic animations are; in your TMP_Text component, simply add the supported show / hide animation tags like you would regular TextMeshPro tags. Show animation tags are prefixed with a '+', for example <+fade>. Hide animation tags are prefixed with a '-', for example <-move>. For both, the corresponding closing tag must also include the prefix, after the slash: </+fade>, </-move>. So, for example, the string \"<+fade><-move>My placeholder text\" would animate the text like this: Your browser does not support the video tag. If you want to try out recreating this animation, you will have to add a TMPWriter component your TMPAnimator GameObject, and set it up like described in TMPWriter. Setting parameters and stacking show / hide animations works completely analogous to basic animations."
  },
  "manual/tmpwriter.html": {
    "href": "manual/tmpwriter.html",
    "title": "TMPWriter | TMPEffects documentation",
    "keywords": "TMPWriter TMPWriter is one of the two main components of TMPEffects, along with TMPAnimator. Primarily, it allows you to Your browser does not support the video tag. as well as execute commands and invoke events when specific indices are reached."
  },
  "manual/tmpwriter_builtincommands.html": {
    "href": "manual/tmpwriter_builtincommands.html",
    "title": "Getting started with TMPWriter | TMPEffects documentation",
    "keywords": "Getting started with TMPWriter This section gives you a complete overview of all built-in commands. All of the built-in commands modify the TMPWriter's writing behavior (with the exception of <!debug=\"\">). SceneCommands allow you to call any method you want. .anim-grid { display: grid; grid-template-columns: repeat(2, 1fr); } .anim-grid > div { margin-bottom: 1.2rem; margin-top: 1.2rem; } Wait - Pause the writer for the given amount of time Parameters: name : time in seconds Example: I WILL NOW <!wait=1.5>WAIT Your browser does not support the video tag. Show - Show the text block from the very start Parameters: None Example: THIS WILL ALWAYS BE <!show>SHOWN</!show>, FROM THE VERY START Your browser does not support the video tag. Delay - Set the delay between showing characters Parameters: name : delay in seconds Example: <!delay=0.25>I START SLOW...<!delay=0.05>BUT NOW IM FAST Your browser does not support the video tag. Skippable - Set whether the text is skippable Parameters: name : true/false Example: <!skippable=true>WHEN IM SKIPPED, I WONT <!skippable=false>GO ALL THE WAY Your browser does not support the video tag. Debug - Print a message to the Unity console; you hopefully wont need this much but I decided to leave it in anyway \uD83D\uDE04 Parameters: name : Your message type : l(og) / w(arning) / e(rror) Example: PRINTING TO THE CONSOLE NOW:<!debug=\"Test Message\" type=\"warning\">"
  },
  "manual/tmpwriter_componentoverview.html": {
    "href": "manual/tmpwriter_componentoverview.html",
    "title": "TMPWriter overview | TMPEffects documentation",
    "keywords": "TMPWriter overview This section gives an overview of the actual TMPWriter component, both for the inspector and scripting. The full API documentation can be found here. Preview To preview the writer in editor mode, you can hit the play button in the Writer preview section at the top of the TMPWriter inspector. Right next to it, are the buttons for resetting, stopping, and skipping the writer respectively. The progress bar lets you freely skip to any point of the writing process. The two toggles above the player decide whether events and commands are executed in the editor preview. There is a few things to consider with them: Event toggle You will also have to set the actual events you want to raise to Editor and Runtime. [!WARNING] ⚠️ Be careful about which events you allow to be raised in preview mode. Generally I'd recommend setting the event toggle to false completely. Command toggle SceneCommands are never raised in preview mode. If you create any new commands, you can decide whether it should be raised in preview mode through its ExecuteInPreview property. Controlling the writer TMPWriter supplies multiple methods to control the writer. StartWriter(): Starts (or resumes) the writing process StopWriter(): Stops the writing process ResetWriter(): Stops the writing process and resets it ResetWriter(int index): Stops the writing process and resets it to the given index (must be smaller than the current index of the writer) SkipWriter(bool skipShowAnimations): Skips the current text until the next unskippable section, or until the end of the text. Does nothing if the current section is unskippable RestartWriter(bool skipShowAnimations): Stops the writing process, resets it and then starts it again There are also a few method that let you modify the writing process in a more subtle way: Wait(float seconds): Wait for the given amount of time until showing the next character; behavior is equivalent to the wait tag SetDelay(float seconds): Sets the delay used after each character; behavior is equivalent to the delay tag SetSkippable(bool skippable): Sets whether the current text section is skippable; behavior is equivalent to the skippable tag WaitUntil(Func condition) : Wait until the given condition evaluates to true; [!WARNING] ⚠️ WaitUntil has no built-in timeout. It is up to you to ensure the condition wont be false forever / for too long Default values for the delay as well as the \"skippability\" of the text can be set in the TMPWriter inspector. Command databases The TMPWriter inspector has a foldout labeled Commands. There, you may choose the command database that is used to process command tags from the TextMeshPro component's text. If you toggle Use default database to true, the default command database is automatically selected for you. The default database is defined in the TMPEffects preferences file. You can also set the database used by the TMPWriter component through script, using the SetDatabase(TMPCommandDatabase db) method. Below the database, there is another field, SceneCommands, which is simply a dictionary that allows you to map tag names to SceneCommands. Tags defined here are also parsed by the TMPWriter. For more about databases, see Databases. For more about SceneCommands, see SceneCommands. Writer events Besides the OnTextEvent (see Getting started), there are the following events you may listen to: OnCharacterShown(CharData cData): Raised whenever the writer shows a new character; passes the newly shown character OnStartWriter(): Raised whenever the writing process is started OnStopWriter(): Raised whenever the writing process is stopped OnResetWriter(int index): Raised whenever the writing process is reset; passes the index that was reset to OnResetWriter(int index): Raised whenever the writing process is skipped; passes the index that was skipped to OnFinishWriter(): Raised whenever the writing process is finished, and the whole text is shown Adding & removing tags through script The TMPWriter class exposes three different TagCollections: CommandTags, which contains all parsed command tags and EventTags, which contains all parsed event tags. Additionally, Tags is the union of the other two collections. For each of the TagCollections, you may freely add and remove tags at any point."
  },
  "manual/tmpwriter_creatingcommands.html": {
    "href": "manual/tmpwriter_creatingcommands.html",
    "title": "Creating commands | TMPEffects documentation",
    "keywords": "Creating commands This section walks you through creating your own commands. First, create a new C# script in the Unity editor. Creating the class Add the following using statement at the top of your class: using TMPEffects.TMPCommands;. Then, make the created class derive from TMPCommand. In order to be able to create the command object in the Unity editor and add it to your database, make sure to decorate the class with the CreateAssetMenu attribute. Members You will have errors due to TMPCommand's abstract members not being implemented. Auto-implement them using your IDE, or add them manually. When you are done, your class should look something like this: using UnityEngine; using TMPEffects.TMPCommands; [CreateAssetMenu(fileName=\"new YourFirstCommand\", menuName=\"Your/Path/YourFirstCommand\")] public class YourFirstCommand : TMPCommand { public override TagType TagType => throw new System.NotImplementedException(); public override bool ExecuteInstantly => throw new System.NotImplementedException(); public override bool ExecuteOnSkip => throw new System.NotImplementedException(); public override void ExecuteCommand(TMPCommandArgs args) { throw new System.NotImplementedException(); } public override bool ValidateParameters(IDictionary<string, string> parameters) { throw new System.NotImplementedException(); } } Let's go over each member individually. Properties TagType: Defines whether the tags for this command should operate on an index, a text block, or either option. For example, the built-in wait command operates on an index, and the built-in command show operates on a text block (see Built-in commands). ExecuteInstantly: Commands where this property is true are executed the moment the TMPWriter begins the writing process, instead of when their opening tag index is reached. From the built-in tags, only show is executed instantly. ExecuteOnSkip: Commands where this property is true are executed even when their index is skipped over by the writer (i.e., when TMPWriter.SkipWriter() is called). This should be true for commands that need to ensure they are being called even if skipped over, for example a command that starts a quest or adds an item to the player's inventory. Optional properties There are a few optional properties. If you don't override them, they are set to false by default. In both cases, this is to protect you from yourself \uD83D\uDE09 Only set these to true if you are sure it is safe for your case! ExecuteRepeatable: Commands where this property is true may be executed multiple times, specifically if the writer is reset / restarted at any point (i.e., when TMPWriter.ResetWriter() is called). This should be false for commands that need to ensure they are only ever raised once, for example a command that starts a quest or adds an item to the player's inventory. ExecuteInPreview: Commands where this property is true are executed in the editor preview. [!WARNING] ⚠️ Note that you must wrap this property in a #if UNITY_EDITOR preprocessor directive if you want to override it; otherwise your builds will fail. Methods ValidateParameters(IDictionary<string, string> parameters): This method is called during tag processing. It allows you to specify whether a given tag for this command has valid parameters. ParameterUtility will come in handy here. Return true if the parameters are valid, return false if not. If false, the tag will not be processed. ExecuteCommand(TMPCommandArgs args): The meat of your command. This executes the actual command you are implementing. TMPCommandArgs The sole argument for the ExecuteCommand method. It's kept relatively simple: it provides access to the actual EffectTag, through which you may get the tag's parameters, the EffectTagIndices, and the executing TMPWriter. Full example As complete example, the class below is the implementation of the built-in delay command. using System.Collections.Generic; using UnityEngine; namespace TMPEffects.TMPCommands.Commands { [CreateAssetMenu(fileName = \"new DelayCommand\", menuName = \"TMPEffects/Commands/Delay\")] public class DelayCommand : TMPCommand { public override TagType TagType => TagType.Index; public override bool ExecuteInstantly => false; public override bool ExecuteOnSkip => true; public override bool ExecuteRepeatable => true; #if UNITY_EDITOR public override bool ExecuteInPreview => true; #endif public override void ExecuteCommand(TMPCommandArgs args) { if (ParameterUtility.TryGetFloatParameter(out float delay, args.tag.Parameters, \"\")) { args.writer.SetDelay(delay); return; } // Since validate parameters ensures the parameter is present and float, // this state should be impossible to reach throw new System.InvalidOperationException(); } public override bool ValidateParameters(IDictionary<string, string> parameters) { if (parameters == null) return false; if (!parameters.ContainsKey(\"\")) return false; return ParameterUtility.HasFloatParameter(parameters, \"\"); } } } Adding the command to a database To actually use the command in your text, you will have to follow these steps: Create a command object: Right click in your project view and create it (it will be in the path you specified in the CreateAssetMenu attribute). Add that object to the database you want to use and give it a name Use that database in the TMPWriter component Done! You can now use your custom command like any of the built-in ones. Creating scene commands See Scene commands on how to add scene commands."
  },
  "manual/tmpwriter_gettingstarted.html": {
    "href": "manual/tmpwriter_gettingstarted.html",
    "title": "Getting started with TMPWriter | TMPEffects documentation",
    "keywords": "Getting started with TMPWriter After adding TMPEffects to your project, add a TMPWriter component to a GameObject with a TMP_Text component (either TextMeshPro - Text or TextMeshPro - Text (UI)). Writing your first text Write some placeholder text in the TextMeshPro's component textbox. Hit the play button in the preview section of the TMPWriter inspector, or start playing the scene. Your text should be being written, and it should look something like this, with each character appearing one after the other, with a short delay in between: Your browser does not support the video tag. Warning ⚠️ If your text is instantly showing all at once, or is writing too slowly, ensure the Delay field in the inspector, which defines the delay after showing a character in seconds, is set to a sensible value. The example above uses a delay of 0.075 seconds. Adding command tags TMPWriter allows you to easily execute commands when a specific index is reached. You may add them using command tags, prefixed by a '!'. For example, <!wait=1.5> will pause the writer for 1.5 seconds before continuing. Your browser does not support the video tag. A full overview of all built-in command tags is given in the next section. Adding event tags In addition to command tags, TMPWriter also supports event tags. TMPWriter exposes multiple UnityEvents, to which you may subscribe in the inspector or through code. One of these events is TextEvent. Whenever the writer reaches the index of an event tag, TextEvent is raised with the parsed tag as parameter. Unlike command tags or animation tags, you may use any name for event tags, as well as any parameters. Typically, you would use the tag name in the event callbacks to check whether to process the event / tag. Here are a few example tags: <?myevent>, <?characterspeaking=\"Faust\">, <?alert message=\"*Your message*\" priority=\"warning\"> Animating text appearances The examples above look pretty boring; you can change the way the text is shown, as well as hidden, by using a TMPAnimator component along with TMPWriter. The example below shows you a few variations. Your browser does not support the video tag. For info about how to set up the TMPAnimator, see the sections on TMPAnimator."
  },
  "manual/tmpwriter_scenecommands.html": {
    "href": "manual/tmpwriter_scenecommands.html",
    "title": "Scene commands | TMPEffects documentation",
    "keywords": "Scene commands In addition to TMPCommand, which the commands we've seen so far derive from and which are stored on disk, there is also the SceneCommand type. It allows you to call any method of your scene objects. .my-grid { display: grid; grid-template-columns: repeat(2, 1fr); grid-column-gap:3em; } Adding scene commands When you add a new element to the SceneCommands dictionary found in TMPWriter's Commands foldout, you will see an empty field Name on the left side. Here you can assign a name to reference the command with. On the right, in UnityEvent field, you can simply drag any GameObject and choose the method to call when this command is invoked. The example creates a SceneCommand called \"waituntil\", which calls a method \"WaitUntil(TMPCommandArgs args)\". Using scene commands SceneCommands are applied in the exact same way as their respective counterpart: SceneCommand tags can be directly inserted into the text, with a '!' prefix."
  }
}