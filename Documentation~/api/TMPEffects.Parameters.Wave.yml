### YamlMime:ManagedReference
items:
- uid: TMPEffects.Parameters.Wave
  commentId: T:TMPEffects.Parameters.Wave
  id: Wave
  parent: TMPEffects.Parameters
  children:
  - TMPEffects.Parameters.Wave.#ctor
  - TMPEffects.Parameters.Wave.#ctor(AnimationCurve,AnimationCurve,System.Single,System.Single,System.Single)
  - TMPEffects.Parameters.Wave.#ctor(AnimationCurve,AnimationCurve,System.Single,System.Single,System.Single,System.Single,System.Single)
  - TMPEffects.Parameters.Wave.#ctor(TMPEffects.Parameters.Wave)
  - TMPEffects.Parameters.Wave.Amplitude
  - TMPEffects.Parameters.Wave.CrestWait
  - TMPEffects.Parameters.Wave.DownPeriod
  - TMPEffects.Parameters.Wave.DownwardCurve
  - TMPEffects.Parameters.Wave.EffectiveDownPeriod
  - TMPEffects.Parameters.Wave.EffectivePeriod
  - TMPEffects.Parameters.Wave.EffectiveUpPeriod
  - TMPEffects.Parameters.Wave.Evaluate(System.Single,System.Single)
  - TMPEffects.Parameters.Wave.Evaluate(System.Single,System.Single,System.Boolean)
  - TMPEffects.Parameters.Wave.EvaluateAsInvertedPulse(System.Single,System.Single,System.Boolean)
  - TMPEffects.Parameters.Wave.EvaluateAsOneDirectionalPulse(System.Single,System.Single,System.Boolean)
  - TMPEffects.Parameters.Wave.EvaluateAsPulse(System.Single,System.Single,System.Boolean)
  - TMPEffects.Parameters.Wave.EvaluateAsWave(System.Single,System.Single)
  - TMPEffects.Parameters.Wave.Frequency
  - TMPEffects.Parameters.Wave.OnAfterDeserialize
  - TMPEffects.Parameters.Wave.OnBeforeSerialize
  - TMPEffects.Parameters.Wave.PassedExtrema(System.Single,System.Single,System.Single,System.Boolean,TMPEffects.Parameters.Wave.PulseExtrema)
  - TMPEffects.Parameters.Wave.PassedInvertedPulseExtrema(System.Single,System.Single,System.Single,System.Boolean,TMPEffects.Parameters.Wave.PulseExtrema)
  - TMPEffects.Parameters.Wave.PassedOneDirectionalPulseExtrema(System.Single,System.Single,System.Single,System.Boolean,TMPEffects.Parameters.Wave.PulseExtrema)
  - TMPEffects.Parameters.Wave.PassedPulseExtrema(System.Single,System.Single,System.Single,System.Boolean,TMPEffects.Parameters.Wave.PulseExtrema)
  - TMPEffects.Parameters.Wave.PassedWaveExtrema(System.Single,System.Single,System.Single)
  - TMPEffects.Parameters.Wave.Period
  - TMPEffects.Parameters.Wave.ToString
  - TMPEffects.Parameters.Wave.TroughWait
  - TMPEffects.Parameters.Wave.UpPeriod
  - TMPEffects.Parameters.Wave.UpwardCurve
  - TMPEffects.Parameters.Wave.Velocity
  - TMPEffects.Parameters.Wave.WaveLength
  langs:
  - csharp
  - vb
  name: Wave
  nameWithType: Wave
  fullName: TMPEffects.Parameters.Wave
  type: Class
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: Wave
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 13
  namespace: TMPEffects.Parameters
  summary: >-
    Allows you to easily create periodic animations.<b></b>

    The class is explained in detail <a href="https://tmpeffects.luca3317.dev/docs/tmpanimator_animationutility_wave.html">here</a>.

    TODO Update link once docs updated
  example: []
  syntax:
    content: >-
      [Serializable]

      [TMPParameterBundle("Wave")]

      public class Wave : ISerializationCallbackReceiver
    content.vb: >-
      <Serializable>

      <TMPParameterBundle("Wave")>

      Public Class Wave Inherits ISerializationCallbackReceiver
  inheritance:
  - System.Object
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  - type: TMPEffects.Parameters.Attributes.TMPParameterBundleAttribute
    ctor: TMPEffects.Parameters.Attributes.TMPParameterBundleAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Wave
- uid: TMPEffects.Parameters.Wave.UpPeriod
  commentId: P:TMPEffects.Parameters.Wave.UpPeriod
  id: UpPeriod
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: UpPeriod
  nameWithType: Wave.UpPeriod
  fullName: TMPEffects.Parameters.Wave.UpPeriod
  type: Property
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: UpPeriod
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 23
  namespace: TMPEffects.Parameters
  summary: >-
    The up period of the wave; how long it takes to travel up the wave.<br /><xref href="TMPEffects.Parameters.Wave.UpPeriod" data-throw-if-not-resolved="false"></xref> does NOT contain either wait periods.<br />

    Ignores the <xref href="TMPEffects.Parameters.Wave.Velocity" data-throw-if-not-resolved="false"></xref> of the wave, if you want to know it'll actually

    take to travel up the wave, use <xref href="TMPEffects.Parameters.Wave.EffectiveUpPeriod" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public float UpPeriod { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property UpPeriod As Single
  overload: TMPEffects.Parameters.Wave.UpPeriod*
- uid: TMPEffects.Parameters.Wave.DownPeriod
  commentId: P:TMPEffects.Parameters.Wave.DownPeriod
  id: DownPeriod
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: DownPeriod
  nameWithType: Wave.DownPeriod
  fullName: TMPEffects.Parameters.Wave.DownPeriod
  type: Property
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: DownPeriod
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 57
  namespace: TMPEffects.Parameters
  summary: >-
    The down period of the wave; how long it takes to travel down the wave.<br /><xref href="TMPEffects.Parameters.Wave.DownPeriod" data-throw-if-not-resolved="false"></xref> does NOT contain either wait periods.<br />

    Ignores the <xref href="TMPEffects.Parameters.Wave.Velocity" data-throw-if-not-resolved="false"></xref> of the wave, if you want to know it'll actually

    take to travel down the wave, use <xref href="TMPEffects.Parameters.Wave.EffectiveDownPeriod" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public float DownPeriod { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property DownPeriod As Single
  overload: TMPEffects.Parameters.Wave.DownPeriod*
- uid: TMPEffects.Parameters.Wave.Amplitude
  commentId: P:TMPEffects.Parameters.Wave.Amplitude
  id: Amplitude
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: Amplitude
  nameWithType: Wave.Amplitude
  fullName: TMPEffects.Parameters.Wave.Amplitude
  type: Property
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: Amplitude
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 88
  namespace: TMPEffects.Parameters
  summary: The amplitude of the wave.
  example: []
  syntax:
    content: public float Amplitude { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property Amplitude As Single
  overload: TMPEffects.Parameters.Wave.Amplitude*
- uid: TMPEffects.Parameters.Wave.Velocity
  commentId: P:TMPEffects.Parameters.Wave.Velocity
  id: Velocity
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: Velocity
  nameWithType: Wave.Velocity
  fullName: TMPEffects.Parameters.Wave.Velocity
  type: Property
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: Velocity
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 97
  namespace: TMPEffects.Parameters
  summary: The velocity at which the wave travels.
  example: []
  syntax:
    content: public float Velocity { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property Velocity As Single
  overload: TMPEffects.Parameters.Wave.Velocity*
- uid: TMPEffects.Parameters.Wave.Period
  commentId: P:TMPEffects.Parameters.Wave.Period
  id: Period
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: Period
  nameWithType: Wave.Period
  fullName: TMPEffects.Parameters.Wave.Period
  type: Property
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: Period
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 119
  namespace: TMPEffects.Parameters
  summary: >-
    The period of the wave; how long it takes to travel up and down the wave.<br />

    Sum of <xref href="TMPEffects.Parameters.Wave.UpPeriod" data-throw-if-not-resolved="false"></xref> and <xref href="TMPEffects.Parameters.Wave.DownPeriod" data-throw-if-not-resolved="false"></xref>.<br /><xref href="TMPEffects.Parameters.Wave.Period" data-throw-if-not-resolved="false"></xref> does NOT contain either wait periods.<br />

    Ignores the <xref href="TMPEffects.Parameters.Wave.Velocity" data-throw-if-not-resolved="false"></xref> of the wave, if you want to know it'll actually

    take to travel the wave, use <xref href="TMPEffects.Parameters.Wave.EffectivePeriod" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public float Period { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property Period As Single
  overload: TMPEffects.Parameters.Wave.Period*
- uid: TMPEffects.Parameters.Wave.WaveLength
  commentId: P:TMPEffects.Parameters.Wave.WaveLength
  id: WaveLength
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: WaveLength
  nameWithType: Wave.WaveLength
  fullName: TMPEffects.Parameters.Wave.WaveLength
  type: Property
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: WaveLength
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 128
  namespace: TMPEffects.Parameters
  summary: The wavelength of the wave.
  example: []
  syntax:
    content: public float WaveLength { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property WaveLength As Single
  overload: TMPEffects.Parameters.Wave.WaveLength*
- uid: TMPEffects.Parameters.Wave.EffectiveUpPeriod
  commentId: P:TMPEffects.Parameters.Wave.EffectiveUpPeriod
  id: EffectiveUpPeriod
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: EffectiveUpPeriod
  nameWithType: Wave.EffectiveUpPeriod
  fullName: TMPEffects.Parameters.Wave.EffectiveUpPeriod
  type: Property
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: EffectiveUpPeriod
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 137
  namespace: TMPEffects.Parameters
  summary: The amount of time it takes to travel up the wave.<br /><xref href="TMPEffects.Parameters.Wave.EffectiveUpPeriod" data-throw-if-not-resolved="false"></xref> does NOT contain either wait periods.
  example: []
  syntax:
    content: public float EffectiveUpPeriod { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property EffectiveUpPeriod As Single
  overload: TMPEffects.Parameters.Wave.EffectiveUpPeriod*
- uid: TMPEffects.Parameters.Wave.EffectiveDownPeriod
  commentId: P:TMPEffects.Parameters.Wave.EffectiveDownPeriod
  id: EffectiveDownPeriod
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: EffectiveDownPeriod
  nameWithType: Wave.EffectiveDownPeriod
  fullName: TMPEffects.Parameters.Wave.EffectiveDownPeriod
  type: Property
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: EffectiveDownPeriod
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 146
  namespace: TMPEffects.Parameters
  summary: The amount of time it takes to travel down the wave.<br /><xref href="TMPEffects.Parameters.Wave.EffectiveDownPeriod" data-throw-if-not-resolved="false"></xref> does NOT contain either wait periods.
  example: []
  syntax:
    content: public float EffectiveDownPeriod { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property EffectiveDownPeriod As Single
  overload: TMPEffects.Parameters.Wave.EffectiveDownPeriod*
- uid: TMPEffects.Parameters.Wave.EffectivePeriod
  commentId: P:TMPEffects.Parameters.Wave.EffectivePeriod
  id: EffectivePeriod
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: EffectivePeriod
  nameWithType: Wave.EffectivePeriod
  fullName: TMPEffects.Parameters.Wave.EffectivePeriod
  type: Property
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: EffectivePeriod
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 156
  namespace: TMPEffects.Parameters
  summary: >-
    The amount of time it takes to travel the wave.<br />

    Sum of <xref href="TMPEffects.Parameters.Wave.EffectiveUpPeriod" data-throw-if-not-resolved="false"></xref> and <xref href="TMPEffects.Parameters.Wave.EffectiveDownPeriod" data-throw-if-not-resolved="false"></xref>.<br /><xref href="TMPEffects.Parameters.Wave.EffectivePeriod" data-throw-if-not-resolved="false"></xref> does NOT contain either wait periods.
  example: []
  syntax:
    content: public float EffectivePeriod { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property EffectivePeriod As Single
  overload: TMPEffects.Parameters.Wave.EffectivePeriod*
- uid: TMPEffects.Parameters.Wave.Frequency
  commentId: P:TMPEffects.Parameters.Wave.Frequency
  id: Frequency
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: Frequency
  nameWithType: Wave.Frequency
  fullName: TMPEffects.Parameters.Wave.Frequency
  type: Property
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: Frequency
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 164
  namespace: TMPEffects.Parameters
  summary: The frequency of the wave.
  example: []
  syntax:
    content: public float Frequency { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property Frequency As Single
  overload: TMPEffects.Parameters.Wave.Frequency*
- uid: TMPEffects.Parameters.Wave.UpwardCurve
  commentId: P:TMPEffects.Parameters.Wave.UpwardCurve
  id: UpwardCurve
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: UpwardCurve
  nameWithType: Wave.UpwardCurve
  fullName: TMPEffects.Parameters.Wave.UpwardCurve
  type: Property
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: UpwardCurve
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 172
  namespace: TMPEffects.Parameters
  summary: The upward curve of the wave.
  example: []
  syntax:
    content: public AnimationCurve UpwardCurve { get; set; }
    parameters: []
    return:
      type: Global.AnimationCurve
    content.vb: Public Property UpwardCurve As AnimationCurve
  overload: TMPEffects.Parameters.Wave.UpwardCurve*
- uid: TMPEffects.Parameters.Wave.DownwardCurve
  commentId: P:TMPEffects.Parameters.Wave.DownwardCurve
  id: DownwardCurve
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: DownwardCurve
  nameWithType: Wave.DownwardCurve
  fullName: TMPEffects.Parameters.Wave.DownwardCurve
  type: Property
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: DownwardCurve
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 181
  namespace: TMPEffects.Parameters
  summary: The downward curve of the wave.
  example: []
  syntax:
    content: public AnimationCurve DownwardCurve { get; set; }
    parameters: []
    return:
      type: Global.AnimationCurve
    content.vb: Public Property DownwardCurve As AnimationCurve
  overload: TMPEffects.Parameters.Wave.DownwardCurve*
- uid: TMPEffects.Parameters.Wave.CrestWait
  commentId: P:TMPEffects.Parameters.Wave.CrestWait
  id: CrestWait
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: CrestWait
  nameWithType: Wave.CrestWait
  fullName: TMPEffects.Parameters.Wave.CrestWait
  type: Property
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: CrestWait
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 190
  namespace: TMPEffects.Parameters
  summary: How long to stay at the crest of the wave.
  example: []
  syntax:
    content: public float CrestWait { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property CrestWait As Single
  overload: TMPEffects.Parameters.Wave.CrestWait*
- uid: TMPEffects.Parameters.Wave.TroughWait
  commentId: P:TMPEffects.Parameters.Wave.TroughWait
  id: TroughWait
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: TroughWait
  nameWithType: Wave.TroughWait
  fullName: TMPEffects.Parameters.Wave.TroughWait
  type: Property
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: TroughWait
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 199
  namespace: TMPEffects.Parameters
  summary: How long to stay at the trough of the wave.
  example: []
  syntax:
    content: public float TroughWait { get; set; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public Property TroughWait As Single
  overload: TMPEffects.Parameters.Wave.TroughWait*
- uid: TMPEffects.Parameters.Wave.#ctor
  commentId: M:TMPEffects.Parameters.Wave.#ctor
  id: '#ctor'
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: Wave()
  nameWithType: Wave.Wave()
  fullName: TMPEffects.Parameters.Wave.Wave()
  type: Constructor
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: .ctor
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 205
  namespace: TMPEffects.Parameters
  syntax:
    content: public Wave()
    content.vb: Public Sub New()
  overload: TMPEffects.Parameters.Wave.#ctor*
  nameWithType.vb: Wave.New()
  fullName.vb: TMPEffects.Parameters.Wave.New()
  name.vb: New()
- uid: TMPEffects.Parameters.Wave.#ctor(TMPEffects.Parameters.Wave)
  commentId: M:TMPEffects.Parameters.Wave.#ctor(TMPEffects.Parameters.Wave)
  id: '#ctor(TMPEffects.Parameters.Wave)'
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: Wave(Wave)
  nameWithType: Wave.Wave(Wave)
  fullName: TMPEffects.Parameters.Wave.Wave(TMPEffects.Parameters.Wave)
  type: Constructor
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: .ctor
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 210
  namespace: TMPEffects.Parameters
  syntax:
    content: public Wave(Wave original)
    parameters:
    - id: original
      type: TMPEffects.Parameters.Wave
    content.vb: Public Sub New(original As Wave)
  overload: TMPEffects.Parameters.Wave.#ctor*
  nameWithType.vb: Wave.New(Wave)
  fullName.vb: TMPEffects.Parameters.Wave.New(TMPEffects.Parameters.Wave)
  name.vb: New(Wave)
- uid: TMPEffects.Parameters.Wave.#ctor(AnimationCurve,AnimationCurve,System.Single,System.Single,System.Single)
  commentId: M:TMPEffects.Parameters.Wave.#ctor(AnimationCurve,AnimationCurve,System.Single,System.Single,System.Single)
  id: '#ctor(AnimationCurve,AnimationCurve,System.Single,System.Single,System.Single)'
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: Wave(AnimationCurve, AnimationCurve, float, float, float)
  nameWithType: Wave.Wave(AnimationCurve, AnimationCurve, float, float, float)
  fullName: TMPEffects.Parameters.Wave.Wave(AnimationCurve, AnimationCurve, float, float, float)
  type: Constructor
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: .ctor
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 236
  namespace: TMPEffects.Parameters
  syntax:
    content: public Wave(AnimationCurve upwardCurve, AnimationCurve downwardCurve, float upPeriod, float downPeriod, float amplitude)
    parameters:
    - id: upwardCurve
      type: Global.AnimationCurve
    - id: downwardCurve
      type: Global.AnimationCurve
    - id: upPeriod
      type: System.Single
    - id: downPeriod
      type: System.Single
    - id: amplitude
      type: System.Single
    content.vb: Public Sub New(upwardCurve As AnimationCurve, downwardCurve As AnimationCurve, upPeriod As Single, downPeriod As Single, amplitude As Single)
  overload: TMPEffects.Parameters.Wave.#ctor*
  nameWithType.vb: Wave.New(AnimationCurve, AnimationCurve, Single, Single, Single)
  fullName.vb: TMPEffects.Parameters.Wave.New(AnimationCurve, AnimationCurve, Single, Single, Single)
  name.vb: New(AnimationCurve, AnimationCurve, Single, Single, Single)
- uid: TMPEffects.Parameters.Wave.#ctor(AnimationCurve,AnimationCurve,System.Single,System.Single,System.Single,System.Single,System.Single)
  commentId: M:TMPEffects.Parameters.Wave.#ctor(AnimationCurve,AnimationCurve,System.Single,System.Single,System.Single,System.Single,System.Single)
  id: '#ctor(AnimationCurve,AnimationCurve,System.Single,System.Single,System.Single,System.Single,System.Single)'
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: Wave(AnimationCurve, AnimationCurve, float, float, float, float, float)
  nameWithType: Wave.Wave(AnimationCurve, AnimationCurve, float, float, float, float, float)
  fullName: TMPEffects.Parameters.Wave.Wave(AnimationCurve, AnimationCurve, float, float, float, float, float)
  type: Constructor
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: .ctor
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 251
  namespace: TMPEffects.Parameters
  syntax:
    content: public Wave(AnimationCurve upwardCurve, AnimationCurve downwardCurve, float upPeriod, float downPeriod, float amplitude, float crestWait, float troughWait)
    parameters:
    - id: upwardCurve
      type: Global.AnimationCurve
    - id: downwardCurve
      type: Global.AnimationCurve
    - id: upPeriod
      type: System.Single
    - id: downPeriod
      type: System.Single
    - id: amplitude
      type: System.Single
    - id: crestWait
      type: System.Single
    - id: troughWait
      type: System.Single
    content.vb: Public Sub New(upwardCurve As AnimationCurve, downwardCurve As AnimationCurve, upPeriod As Single, downPeriod As Single, amplitude As Single, crestWait As Single, troughWait As Single)
  overload: TMPEffects.Parameters.Wave.#ctor*
  nameWithType.vb: Wave.New(AnimationCurve, AnimationCurve, Single, Single, Single, Single, Single)
  fullName.vb: TMPEffects.Parameters.Wave.New(AnimationCurve, AnimationCurve, Single, Single, Single, Single, Single)
  name.vb: New(AnimationCurve, AnimationCurve, Single, Single, Single, Single, Single)
- uid: TMPEffects.Parameters.Wave.PassedExtrema(System.Single,System.Single,System.Single,System.Boolean,TMPEffects.Parameters.Wave.PulseExtrema)
  commentId: M:TMPEffects.Parameters.Wave.PassedExtrema(System.Single,System.Single,System.Single,System.Boolean,TMPEffects.Parameters.Wave.PulseExtrema)
  id: PassedExtrema(System.Single,System.Single,System.Single,System.Boolean,TMPEffects.Parameters.Wave.PulseExtrema)
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: PassedExtrema(float, float, float, bool, PulseExtrema)
  nameWithType: Wave.PassedExtrema(float, float, float, bool, Wave.PulseExtrema)
  fullName: TMPEffects.Parameters.Wave.PassedExtrema(float, float, float, bool, TMPEffects.Parameters.Wave.PulseExtrema)
  type: Method
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: PassedExtrema
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 314
  namespace: TMPEffects.Parameters
  summary: >-
    Check whether an extrema was passed between (<code class="paramref">time</code> - <code class="paramref">deltaTime</code>) and <code class="paramref">time</code>.<br />

    This will automatically choose the correct way to interpret the wave.
  example: []
  syntax:
    content: public int PassedExtrema(float time, float deltaTime, float offset, bool realtimeWait = true, Wave.PulseExtrema extrema = PulseExtrema.Early)
    parameters:
    - id: time
      type: System.Single
      description: The time value.
    - id: deltaTime
      type: System.Single
      description: The delta time value.
    - id: offset
      type: System.Single
      description: The offset..
    - id: realtimeWait
      type: System.Boolean
      description: Whether to use real time (i.e. whether to use TMPAnimationUtility.WaveBase.Period or TMPAnimationUtility.WaveBase.EffectivePeriod).
    - id: extrema
      type: TMPEffects.Parameters.Wave.PulseExtrema
      description: If the wave has a <xref href="TMPEffects.Parameters.Wave.CrestWait" data-throw-if-not-resolved="false"></xref> or <xref href="TMPEffects.Parameters.Wave.TroughWait" data-throw-if-not-resolved="false"></xref>, this parameter defines whether an extremum is passed once the wait time begins, or once it ends.
    return:
      type: System.Int32
      description: 1 if a maximum was passed, -1 if a minimum was passed, 0 if no extremum was passed.
    content.vb: Public Function PassedExtrema(time As Single, deltaTime As Single, offset As Single, realtimeWait As Boolean = True, extrema As Wave.PulseExtrema = PulseExtrema.Early) As Integer
  overload: TMPEffects.Parameters.Wave.PassedExtrema*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: ''
  nameWithType.vb: Wave.PassedExtrema(Single, Single, Single, Boolean, Wave.PulseExtrema)
  fullName.vb: TMPEffects.Parameters.Wave.PassedExtrema(Single, Single, Single, Boolean, TMPEffects.Parameters.Wave.PulseExtrema)
  name.vb: PassedExtrema(Single, Single, Single, Boolean, PulseExtrema)
- uid: TMPEffects.Parameters.Wave.PassedWaveExtrema(System.Single,System.Single,System.Single)
  commentId: M:TMPEffects.Parameters.Wave.PassedWaveExtrema(System.Single,System.Single,System.Single)
  id: PassedWaveExtrema(System.Single,System.Single,System.Single)
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: PassedWaveExtrema(float, float, float)
  nameWithType: Wave.PassedWaveExtrema(float, float, float)
  fullName: TMPEffects.Parameters.Wave.PassedWaveExtrema(float, float, float)
  type: Method
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: PassedWaveExtrema
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 344
  namespace: TMPEffects.Parameters
  summary: >-
    Check whether an extrema was passed between (<code class="paramref">time</code> - <code class="paramref">deltaTime</code>) and <code class="paramref">time</code>.<br />

    Explicitly interpret the wave as a normal wave, ignoring both <xref href="TMPEffects.Parameters.Wave.CrestWait" data-throw-if-not-resolved="false"></xref> and <xref href="TMPEffects.Parameters.Wave.TroughWait" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public int PassedWaveExtrema(float time, float deltaTime, float offset)
    parameters:
    - id: time
      type: System.Single
      description: The time value.
    - id: deltaTime
      type: System.Single
      description: The delta time value.
    - id: offset
      type: System.Single
      description: The offset.
    return:
      type: System.Int32
      description: 1 if a maximum was passed, -1 if a minimum was passed, 0 if no extremum was passed.
    content.vb: Public Function PassedWaveExtrema(time As Single, deltaTime As Single, offset As Single) As Integer
  overload: TMPEffects.Parameters.Wave.PassedWaveExtrema*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: ''
  nameWithType.vb: Wave.PassedWaveExtrema(Single, Single, Single)
  fullName.vb: TMPEffects.Parameters.Wave.PassedWaveExtrema(Single, Single, Single)
  name.vb: PassedWaveExtrema(Single, Single, Single)
- uid: TMPEffects.Parameters.Wave.PassedPulseExtrema(System.Single,System.Single,System.Single,System.Boolean,TMPEffects.Parameters.Wave.PulseExtrema)
  commentId: M:TMPEffects.Parameters.Wave.PassedPulseExtrema(System.Single,System.Single,System.Single,System.Boolean,TMPEffects.Parameters.Wave.PulseExtrema)
  id: PassedPulseExtrema(System.Single,System.Single,System.Single,System.Boolean,TMPEffects.Parameters.Wave.PulseExtrema)
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: PassedPulseExtrema(float, float, float, bool, PulseExtrema)
  nameWithType: Wave.PassedPulseExtrema(float, float, float, bool, Wave.PulseExtrema)
  fullName: TMPEffects.Parameters.Wave.PassedPulseExtrema(float, float, float, bool, TMPEffects.Parameters.Wave.PulseExtrema)
  type: Method
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: PassedPulseExtrema
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 384
  namespace: TMPEffects.Parameters
  summary: >-
    Check whether an extrema was passed between (<code class="paramref">time</code> - <code class="paramref">deltaTime</code>) and <code class="paramref">time</code>.<br />

    Explicitly interpret the wave as a pulse, ignoring the <xref href="TMPEffects.Parameters.Wave.CrestWait" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public int PassedPulseExtrema(float time, float deltaTime, float offset, bool realtimeWait = true, Wave.PulseExtrema extrema = PulseExtrema.Early)
    parameters:
    - id: time
      type: System.Single
      description: The time value.
    - id: deltaTime
      type: System.Single
      description: The delta time value.
    - id: offset
      type: System.Single
      description: The offset.
    - id: realtimeWait
      type: System.Boolean
      description: Whether to use real time (i.e. whether to use TMPAnimationUtility.WaveBase.Period or TMPAnimationUtility.WaveBase.EffectivePeriod).
    - id: extrema
      type: TMPEffects.Parameters.Wave.PulseExtrema
      description: If the wave has a <xref href="TMPEffects.Parameters.Wave.CrestWait" data-throw-if-not-resolved="false"></xref> or <xref href="TMPEffects.Parameters.Wave.TroughWait" data-throw-if-not-resolved="false"></xref>, this parameter defines whether an extremum is passed once the wait time begins, or once it ends.
    return:
      type: System.Int32
      description: 1 if a maximum was passed, -1 if a minimum was passed, 0 if no extremum was passed.
    content.vb: Public Function PassedPulseExtrema(time As Single, deltaTime As Single, offset As Single, realtimeWait As Boolean = True, extrema As Wave.PulseExtrema = PulseExtrema.Early) As Integer
  overload: TMPEffects.Parameters.Wave.PassedPulseExtrema*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: ''
  nameWithType.vb: Wave.PassedPulseExtrema(Single, Single, Single, Boolean, Wave.PulseExtrema)
  fullName.vb: TMPEffects.Parameters.Wave.PassedPulseExtrema(Single, Single, Single, Boolean, TMPEffects.Parameters.Wave.PulseExtrema)
  name.vb: PassedPulseExtrema(Single, Single, Single, Boolean, PulseExtrema)
- uid: TMPEffects.Parameters.Wave.PassedInvertedPulseExtrema(System.Single,System.Single,System.Single,System.Boolean,TMPEffects.Parameters.Wave.PulseExtrema)
  commentId: M:TMPEffects.Parameters.Wave.PassedInvertedPulseExtrema(System.Single,System.Single,System.Single,System.Boolean,TMPEffects.Parameters.Wave.PulseExtrema)
  id: PassedInvertedPulseExtrema(System.Single,System.Single,System.Single,System.Boolean,TMPEffects.Parameters.Wave.PulseExtrema)
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: PassedInvertedPulseExtrema(float, float, float, bool, PulseExtrema)
  nameWithType: Wave.PassedInvertedPulseExtrema(float, float, float, bool, Wave.PulseExtrema)
  fullName: TMPEffects.Parameters.Wave.PassedInvertedPulseExtrema(float, float, float, bool, TMPEffects.Parameters.Wave.PulseExtrema)
  type: Method
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: PassedInvertedPulseExtrema
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 439
  namespace: TMPEffects.Parameters
  summary: >-
    Check whether an extrema was passed between (<code class="paramref">time</code> - <code class="paramref">deltaTime</code>) and <code class="paramref">time</code>.<br />

    Explicitly interpret the wave as an inverted pulse, ignoring the <xref href="TMPEffects.Parameters.Wave.TroughWait" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public int PassedInvertedPulseExtrema(float time, float deltaTime, float offset, bool realtimeWait = true, Wave.PulseExtrema extrema = PulseExtrema.Early)
    parameters:
    - id: time
      type: System.Single
      description: The time value.
    - id: deltaTime
      type: System.Single
      description: The delta time value.
    - id: offset
      type: System.Single
      description: The offset.
    - id: realtimeWait
      type: System.Boolean
      description: Whether to use real time (i.e. whether to use TMPAnimationUtility.WaveBase.Period or TMPAnimationUtility.WaveBase.EffectivePeriod).
    - id: extrema
      type: TMPEffects.Parameters.Wave.PulseExtrema
      description: If the wave has a <xref href="TMPEffects.Parameters.Wave.CrestWait" data-throw-if-not-resolved="false"></xref> or <xref href="TMPEffects.Parameters.Wave.TroughWait" data-throw-if-not-resolved="false"></xref>, this parameter defines whether an extremum is passed once the wait time begins, or once it ends.
    return:
      type: System.Int32
      description: 1 if a maximum was passed, -1 if a minimum was passed, 0 if no extremum was passed.
    content.vb: Public Function PassedInvertedPulseExtrema(time As Single, deltaTime As Single, offset As Single, realtimeWait As Boolean = True, extrema As Wave.PulseExtrema = PulseExtrema.Early) As Integer
  overload: TMPEffects.Parameters.Wave.PassedInvertedPulseExtrema*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: ''
  nameWithType.vb: Wave.PassedInvertedPulseExtrema(Single, Single, Single, Boolean, Wave.PulseExtrema)
  fullName.vb: TMPEffects.Parameters.Wave.PassedInvertedPulseExtrema(Single, Single, Single, Boolean, TMPEffects.Parameters.Wave.PulseExtrema)
  name.vb: PassedInvertedPulseExtrema(Single, Single, Single, Boolean, PulseExtrema)
- uid: TMPEffects.Parameters.Wave.PassedOneDirectionalPulseExtrema(System.Single,System.Single,System.Single,System.Boolean,TMPEffects.Parameters.Wave.PulseExtrema)
  commentId: M:TMPEffects.Parameters.Wave.PassedOneDirectionalPulseExtrema(System.Single,System.Single,System.Single,System.Boolean,TMPEffects.Parameters.Wave.PulseExtrema)
  id: PassedOneDirectionalPulseExtrema(System.Single,System.Single,System.Single,System.Boolean,TMPEffects.Parameters.Wave.PulseExtrema)
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: PassedOneDirectionalPulseExtrema(float, float, float, bool, PulseExtrema)
  nameWithType: Wave.PassedOneDirectionalPulseExtrema(float, float, float, bool, Wave.PulseExtrema)
  fullName: TMPEffects.Parameters.Wave.PassedOneDirectionalPulseExtrema(float, float, float, bool, TMPEffects.Parameters.Wave.PulseExtrema)
  type: Method
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: PassedOneDirectionalPulseExtrema
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 493
  namespace: TMPEffects.Parameters
  summary: >-
    Check whether an extrema was passed between (<code class="paramref">time</code> - <code class="paramref">deltaTime</code>) and <code class="paramref">time</code>.

    Explicitly interpret the wave as a one-directional pulse.
  example: []
  syntax:
    content: public int PassedOneDirectionalPulseExtrema(float time, float deltaTime, float offset, bool realtimeWait = true, Wave.PulseExtrema extrema = PulseExtrema.Early)
    parameters:
    - id: time
      type: System.Single
      description: The time value.
    - id: deltaTime
      type: System.Single
      description: The delta time value.
    - id: offset
      type: System.Single
      description: The offset.
    - id: realtimeWait
      type: System.Boolean
      description: Whether to use real time (i.e. whether to use TMPAnimationUtility.WaveBase.Period or TMPAnimationUtility.WaveBase.EffectivePeriod).
    - id: extrema
      type: TMPEffects.Parameters.Wave.PulseExtrema
      description: If the wave has a <xref href="TMPEffects.Parameters.Wave.CrestWait" data-throw-if-not-resolved="false"></xref> or <xref href="TMPEffects.Parameters.Wave.TroughWait" data-throw-if-not-resolved="false"></xref>, this parameter defines whether an extremum is passed once the wait time begins, or once it ends.
    return:
      type: System.Int32
      description: 1 if a maximum was passed, -1 if a minimum was passed, 0 if no extremum was passed.
    content.vb: Public Function PassedOneDirectionalPulseExtrema(time As Single, deltaTime As Single, offset As Single, realtimeWait As Boolean = True, extrema As Wave.PulseExtrema = PulseExtrema.Early) As Integer
  overload: TMPEffects.Parameters.Wave.PassedOneDirectionalPulseExtrema*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: ''
  nameWithType.vb: Wave.PassedOneDirectionalPulseExtrema(Single, Single, Single, Boolean, Wave.PulseExtrema)
  fullName.vb: TMPEffects.Parameters.Wave.PassedOneDirectionalPulseExtrema(Single, Single, Single, Boolean, TMPEffects.Parameters.Wave.PulseExtrema)
  name.vb: PassedOneDirectionalPulseExtrema(Single, Single, Single, Boolean, PulseExtrema)
- uid: TMPEffects.Parameters.Wave.Evaluate(System.Single,System.Single,System.Boolean)
  commentId: M:TMPEffects.Parameters.Wave.Evaluate(System.Single,System.Single,System.Boolean)
  id: Evaluate(System.Single,System.Single,System.Boolean)
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: Evaluate(float, float, bool)
  nameWithType: Wave.Evaluate(float, float, bool)
  fullName: TMPEffects.Parameters.Wave.Evaluate(float, float, bool)
  type: Method
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: Evaluate
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 593
  namespace: TMPEffects.Parameters
  summary: >-
    Evaluate the wave.<br />

    This will automatically choose the correct way to interpret the wave.
  example: []
  syntax:
    content: public (float Value, int Direction) Evaluate(float time, float offset, bool realtimeWait = true)
    parameters:
    - id: time
      type: System.Single
      description: The time value.
    - id: offset
      type: System.Single
      description: The offset.
    - id: realtimeWait
      type: System.Boolean
      description: Whether to use real time (i.e. whether to use TMPAnimationUtility.WaveBase.Period or TMPAnimationUtility.WaveBase.EffectivePeriod).
    return:
      type: System.ValueTuple{System.Single,System.Int32}
      description: 'Value: The value of the wave at the given time and offset.<br />Direction: Whether youre currently travelling up the wave (=1) or down the wave (=-1).'
    content.vb: Public Function Evaluate(time As Single, offset As Single, realtimeWait As Boolean = True) As (Value As Single, Direction As Integer)
  overload: TMPEffects.Parameters.Wave.Evaluate*
  nameWithType.vb: Wave.Evaluate(Single, Single, Boolean)
  fullName.vb: TMPEffects.Parameters.Wave.Evaluate(Single, Single, Boolean)
  name.vb: Evaluate(Single, Single, Boolean)
- uid: TMPEffects.Parameters.Wave.Evaluate(System.Single,System.Single)
  commentId: M:TMPEffects.Parameters.Wave.Evaluate(System.Single,System.Single)
  id: Evaluate(System.Single,System.Single)
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: Evaluate(float, float)
  nameWithType: Wave.Evaluate(float, float)
  fullName: TMPEffects.Parameters.Wave.Evaluate(float, float)
  type: Method
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: Evaluate
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 610
  namespace: TMPEffects.Parameters
  syntax:
    content: public (float Value, int Direction) Evaluate(float time, float offset)
    parameters:
    - id: time
      type: System.Single
    - id: offset
      type: System.Single
    return:
      type: System.ValueTuple{System.Single,System.Int32}
    content.vb: Public Function Evaluate(time As Single, offset As Single) As (Value As Single, Direction As Integer)
  overload: TMPEffects.Parameters.Wave.Evaluate*
  nameWithType.vb: Wave.Evaluate(Single, Single)
  fullName.vb: TMPEffects.Parameters.Wave.Evaluate(Single, Single)
  name.vb: Evaluate(Single, Single)
- uid: TMPEffects.Parameters.Wave.EvaluateAsWave(System.Single,System.Single)
  commentId: M:TMPEffects.Parameters.Wave.EvaluateAsWave(System.Single,System.Single)
  id: EvaluateAsWave(System.Single,System.Single)
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: EvaluateAsWave(float, float)
  nameWithType: Wave.EvaluateAsWave(float, float)
  fullName: TMPEffects.Parameters.Wave.EvaluateAsWave(float, float)
  type: Method
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: EvaluateAsWave
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 634
  namespace: TMPEffects.Parameters
  summary: Evaluate the wave as a normal wave explicitly, ignoring both <xref href="TMPEffects.Parameters.Wave.TroughWait" data-throw-if-not-resolved="false"></xref> and <xref href="TMPEffects.Parameters.Wave.CrestWait" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public (float Value, int Direction) EvaluateAsWave(float time, float offset)
    parameters:
    - id: time
      type: System.Single
      description: The time value.
    - id: offset
      type: System.Single
      description: The offset.
    return:
      type: System.ValueTuple{System.Single,System.Int32}
      description: 'Item1: The value of the wave at the given time and offset.<br />Item2: Whether youre currently travelling up the wave (=1) or down the wave (=-1).'
    content.vb: Public Function EvaluateAsWave(time As Single, offset As Single) As (Value As Single, Direction As Integer)
  overload: TMPEffects.Parameters.Wave.EvaluateAsWave*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: ''
  nameWithType.vb: Wave.EvaluateAsWave(Single, Single)
  fullName.vb: TMPEffects.Parameters.Wave.EvaluateAsWave(Single, Single)
  name.vb: EvaluateAsWave(Single, Single)
- uid: TMPEffects.Parameters.Wave.EvaluateAsPulse(System.Single,System.Single,System.Boolean)
  commentId: M:TMPEffects.Parameters.Wave.EvaluateAsPulse(System.Single,System.Single,System.Boolean)
  id: EvaluateAsPulse(System.Single,System.Single,System.Boolean)
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: EvaluateAsPulse(float, float, bool)
  nameWithType: Wave.EvaluateAsPulse(float, float, bool)
  fullName: TMPEffects.Parameters.Wave.EvaluateAsPulse(float, float, bool)
  type: Method
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: EvaluateAsPulse
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 657
  namespace: TMPEffects.Parameters
  summary: Evaluate the wave as a pulse explicitly, ignoring the <xref href="TMPEffects.Parameters.Wave.CrestWait" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public (float Value, int Direction) EvaluateAsPulse(float time, float offset, bool realTimeWait = true)
    parameters:
    - id: time
      type: System.Single
      description: The time value.
    - id: offset
      type: System.Single
      description: The offset.
    - id: realTimeWait
      type: System.Boolean
      description: Whether to use real time (i.e. whether to use TMPAnimationUtility.WaveBase.Period or TMPAnimationUtility.WaveBase.EffectivePeriod).
    return:
      type: System.ValueTuple{System.Single,System.Int32}
      description: 'Item1: The value of the wave at the given time and offset.<br />Item2: Whether youre currently travelling up the wave (=1) or down the wave (=-1).'
    content.vb: Public Function EvaluateAsPulse(time As Single, offset As Single, realTimeWait As Boolean = True) As (Value As Single, Direction As Integer)
  overload: TMPEffects.Parameters.Wave.EvaluateAsPulse*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: ''
  nameWithType.vb: Wave.EvaluateAsPulse(Single, Single, Boolean)
  fullName.vb: TMPEffects.Parameters.Wave.EvaluateAsPulse(Single, Single, Boolean)
  name.vb: EvaluateAsPulse(Single, Single, Boolean)
- uid: TMPEffects.Parameters.Wave.EvaluateAsInvertedPulse(System.Single,System.Single,System.Boolean)
  commentId: M:TMPEffects.Parameters.Wave.EvaluateAsInvertedPulse(System.Single,System.Single,System.Boolean)
  id: EvaluateAsInvertedPulse(System.Single,System.Single,System.Boolean)
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: EvaluateAsInvertedPulse(float, float, bool)
  nameWithType: Wave.EvaluateAsInvertedPulse(float, float, bool)
  fullName: TMPEffects.Parameters.Wave.EvaluateAsInvertedPulse(float, float, bool)
  type: Method
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: EvaluateAsInvertedPulse
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 690
  namespace: TMPEffects.Parameters
  summary: Evaluate the wave as an inverted pulse explicitly, ignoring the <xref href="TMPEffects.Parameters.Wave.TroughWait" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public (float Value, int Direction) EvaluateAsInvertedPulse(float time, float offset, bool realTimeWait = true)
    parameters:
    - id: time
      type: System.Single
      description: The time value.
    - id: offset
      type: System.Single
      description: The offset.
    - id: realTimeWait
      type: System.Boolean
      description: Whether to use real time (i.e. whether to use TMPAnimationUtility.WaveBase.Period or TMPAnimationUtility.WaveBase.EffectivePeriod).
    return:
      type: System.ValueTuple{System.Single,System.Int32}
      description: 'Item1: The value of the wave at the given time and offset.<br />Item2: Whether youre currently travelling up the wave (=1) or down the wave (=-1).'
    content.vb: Public Function EvaluateAsInvertedPulse(time As Single, offset As Single, realTimeWait As Boolean = True) As (Value As Single, Direction As Integer)
  overload: TMPEffects.Parameters.Wave.EvaluateAsInvertedPulse*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: ''
  nameWithType.vb: Wave.EvaluateAsInvertedPulse(Single, Single, Boolean)
  fullName.vb: TMPEffects.Parameters.Wave.EvaluateAsInvertedPulse(Single, Single, Boolean)
  name.vb: EvaluateAsInvertedPulse(Single, Single, Boolean)
- uid: TMPEffects.Parameters.Wave.EvaluateAsOneDirectionalPulse(System.Single,System.Single,System.Boolean)
  commentId: M:TMPEffects.Parameters.Wave.EvaluateAsOneDirectionalPulse(System.Single,System.Single,System.Boolean)
  id: EvaluateAsOneDirectionalPulse(System.Single,System.Single,System.Boolean)
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: EvaluateAsOneDirectionalPulse(float, float, bool)
  nameWithType: Wave.EvaluateAsOneDirectionalPulse(float, float, bool)
  fullName: TMPEffects.Parameters.Wave.EvaluateAsOneDirectionalPulse(float, float, bool)
  type: Method
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: EvaluateAsOneDirectionalPulse
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 725
  namespace: TMPEffects.Parameters
  summary: Evaluate the wave as a one-directional pulse explicitly.
  example: []
  syntax:
    content: public (float Value, int Direction) EvaluateAsOneDirectionalPulse(float time, float offset, bool realTimeWait = true)
    parameters:
    - id: time
      type: System.Single
      description: The time value.
    - id: offset
      type: System.Single
      description: The offset.
    - id: realTimeWait
      type: System.Boolean
      description: Whether to use real time (i.e. whether to use TMPAnimationUtility.WaveBase.Period or TMPAnimationUtility.WaveBase.EffectivePeriod).
    return:
      type: System.ValueTuple{System.Single,System.Int32}
      description: 'Item1: The value of the wave at the given time and offset.<br />Item2: Whether youre currently travelling up the wave (=1) or down the wave (=-1).'
    content.vb: Public Function EvaluateAsOneDirectionalPulse(time As Single, offset As Single, realTimeWait As Boolean = True) As (Value As Single, Direction As Integer)
  overload: TMPEffects.Parameters.Wave.EvaluateAsOneDirectionalPulse*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: ''
  nameWithType.vb: Wave.EvaluateAsOneDirectionalPulse(Single, Single, Boolean)
  fullName.vb: TMPEffects.Parameters.Wave.EvaluateAsOneDirectionalPulse(Single, Single, Boolean)
  name.vb: EvaluateAsOneDirectionalPulse(Single, Single, Boolean)
- uid: TMPEffects.Parameters.Wave.OnBeforeSerialize
  commentId: M:TMPEffects.Parameters.Wave.OnBeforeSerialize
  id: OnBeforeSerialize
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: OnBeforeSerialize()
  nameWithType: Wave.OnBeforeSerialize()
  fullName: TMPEffects.Parameters.Wave.OnBeforeSerialize()
  type: Method
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: OnBeforeSerialize
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 808
  namespace: TMPEffects.Parameters
  syntax:
    content: public void OnBeforeSerialize()
    content.vb: Public Sub OnBeforeSerialize()
  overload: TMPEffects.Parameters.Wave.OnBeforeSerialize*
- uid: TMPEffects.Parameters.Wave.OnAfterDeserialize
  commentId: M:TMPEffects.Parameters.Wave.OnAfterDeserialize
  id: OnAfterDeserialize
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: OnAfterDeserialize()
  nameWithType: Wave.OnAfterDeserialize()
  fullName: TMPEffects.Parameters.Wave.OnAfterDeserialize()
  type: Method
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: OnAfterDeserialize
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 813
  namespace: TMPEffects.Parameters
  syntax:
    content: public void OnAfterDeserialize()
    content.vb: Public Sub OnAfterDeserialize()
  overload: TMPEffects.Parameters.Wave.OnAfterDeserialize*
- uid: TMPEffects.Parameters.Wave.ToString
  commentId: M:TMPEffects.Parameters.Wave.ToString
  id: ToString
  parent: TMPEffects.Parameters.Wave
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Wave.ToString()
  fullName: TMPEffects.Parameters.Wave.ToString()
  type: Method
  source:
    remote:
      path: Package/Runtime/Parameters/Bundles/Wave.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: ToString
    path: ../Package/Runtime/Parameters/Bundles/Wave.cs
    startLine: 839
  namespace: TMPEffects.Parameters
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString() As String
  overload: TMPEffects.Parameters.Wave.ToString*
references:
- uid: TMPEffects.Parameters
  commentId: N:TMPEffects.Parameters
  href: TMPEffects.html
  name: TMPEffects.Parameters
  nameWithType: TMPEffects.Parameters
  fullName: TMPEffects.Parameters
  spec.csharp:
  - uid: TMPEffects
    name: TMPEffects
    href: TMPEffects.html
  - name: .
  - uid: TMPEffects.Parameters
    name: Parameters
    href: TMPEffects.Parameters.html
  spec.vb:
  - uid: TMPEffects
    name: TMPEffects
    href: TMPEffects.html
  - name: .
  - uid: TMPEffects.Parameters
    name: Parameters
    href: TMPEffects.Parameters.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: TMPEffects.Parameters.Wave.UpPeriod
  commentId: P:TMPEffects.Parameters.Wave.UpPeriod
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_UpPeriod
  name: UpPeriod
  nameWithType: Wave.UpPeriod
  fullName: TMPEffects.Parameters.Wave.UpPeriod
- uid: TMPEffects.Parameters.Wave.Velocity
  commentId: P:TMPEffects.Parameters.Wave.Velocity
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_Velocity
  name: Velocity
  nameWithType: Wave.Velocity
  fullName: TMPEffects.Parameters.Wave.Velocity
- uid: TMPEffects.Parameters.Wave.EffectiveUpPeriod
  commentId: P:TMPEffects.Parameters.Wave.EffectiveUpPeriod
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_EffectiveUpPeriod
  name: EffectiveUpPeriod
  nameWithType: Wave.EffectiveUpPeriod
  fullName: TMPEffects.Parameters.Wave.EffectiveUpPeriod
- uid: TMPEffects.Parameters.Wave.UpPeriod*
  commentId: Overload:TMPEffects.Parameters.Wave.UpPeriod
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_UpPeriod
  name: UpPeriod
  nameWithType: Wave.UpPeriod
  fullName: TMPEffects.Parameters.Wave.UpPeriod
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: TMPEffects.Parameters.Wave.DownPeriod
  commentId: P:TMPEffects.Parameters.Wave.DownPeriod
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_DownPeriod
  name: DownPeriod
  nameWithType: Wave.DownPeriod
  fullName: TMPEffects.Parameters.Wave.DownPeriod
- uid: TMPEffects.Parameters.Wave.EffectiveDownPeriod
  commentId: P:TMPEffects.Parameters.Wave.EffectiveDownPeriod
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_EffectiveDownPeriod
  name: EffectiveDownPeriod
  nameWithType: Wave.EffectiveDownPeriod
  fullName: TMPEffects.Parameters.Wave.EffectiveDownPeriod
- uid: TMPEffects.Parameters.Wave.DownPeriod*
  commentId: Overload:TMPEffects.Parameters.Wave.DownPeriod
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_DownPeriod
  name: DownPeriod
  nameWithType: Wave.DownPeriod
  fullName: TMPEffects.Parameters.Wave.DownPeriod
- uid: TMPEffects.Parameters.Wave.Amplitude*
  commentId: Overload:TMPEffects.Parameters.Wave.Amplitude
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_Amplitude
  name: Amplitude
  nameWithType: Wave.Amplitude
  fullName: TMPEffects.Parameters.Wave.Amplitude
- uid: TMPEffects.Parameters.Wave.Velocity*
  commentId: Overload:TMPEffects.Parameters.Wave.Velocity
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_Velocity
  name: Velocity
  nameWithType: Wave.Velocity
  fullName: TMPEffects.Parameters.Wave.Velocity
- uid: TMPEffects.Parameters.Wave.Period
  commentId: P:TMPEffects.Parameters.Wave.Period
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_Period
  name: Period
  nameWithType: Wave.Period
  fullName: TMPEffects.Parameters.Wave.Period
- uid: TMPEffects.Parameters.Wave.EffectivePeriod
  commentId: P:TMPEffects.Parameters.Wave.EffectivePeriod
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_EffectivePeriod
  name: EffectivePeriod
  nameWithType: Wave.EffectivePeriod
  fullName: TMPEffects.Parameters.Wave.EffectivePeriod
- uid: TMPEffects.Parameters.Wave.Period*
  commentId: Overload:TMPEffects.Parameters.Wave.Period
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_Period
  name: Period
  nameWithType: Wave.Period
  fullName: TMPEffects.Parameters.Wave.Period
- uid: TMPEffects.Parameters.Wave.WaveLength*
  commentId: Overload:TMPEffects.Parameters.Wave.WaveLength
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_WaveLength
  name: WaveLength
  nameWithType: Wave.WaveLength
  fullName: TMPEffects.Parameters.Wave.WaveLength
- uid: TMPEffects.Parameters.Wave.EffectiveUpPeriod*
  commentId: Overload:TMPEffects.Parameters.Wave.EffectiveUpPeriod
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_EffectiveUpPeriod
  name: EffectiveUpPeriod
  nameWithType: Wave.EffectiveUpPeriod
  fullName: TMPEffects.Parameters.Wave.EffectiveUpPeriod
- uid: TMPEffects.Parameters.Wave.EffectiveDownPeriod*
  commentId: Overload:TMPEffects.Parameters.Wave.EffectiveDownPeriod
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_EffectiveDownPeriod
  name: EffectiveDownPeriod
  nameWithType: Wave.EffectiveDownPeriod
  fullName: TMPEffects.Parameters.Wave.EffectiveDownPeriod
- uid: TMPEffects.Parameters.Wave.EffectivePeriod*
  commentId: Overload:TMPEffects.Parameters.Wave.EffectivePeriod
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_EffectivePeriod
  name: EffectivePeriod
  nameWithType: Wave.EffectivePeriod
  fullName: TMPEffects.Parameters.Wave.EffectivePeriod
- uid: TMPEffects.Parameters.Wave.Frequency*
  commentId: Overload:TMPEffects.Parameters.Wave.Frequency
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_Frequency
  name: Frequency
  nameWithType: Wave.Frequency
  fullName: TMPEffects.Parameters.Wave.Frequency
- uid: TMPEffects.Parameters.Wave.UpwardCurve*
  commentId: Overload:TMPEffects.Parameters.Wave.UpwardCurve
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_UpwardCurve
  name: UpwardCurve
  nameWithType: Wave.UpwardCurve
  fullName: TMPEffects.Parameters.Wave.UpwardCurve
- uid: Global.AnimationCurve
  isExternal: true
  name: AnimationCurve
  nameWithType: AnimationCurve
  fullName: AnimationCurve
- uid: TMPEffects.Parameters.Wave.DownwardCurve*
  commentId: Overload:TMPEffects.Parameters.Wave.DownwardCurve
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_DownwardCurve
  name: DownwardCurve
  nameWithType: Wave.DownwardCurve
  fullName: TMPEffects.Parameters.Wave.DownwardCurve
- uid: TMPEffects.Parameters.Wave.CrestWait*
  commentId: Overload:TMPEffects.Parameters.Wave.CrestWait
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_CrestWait
  name: CrestWait
  nameWithType: Wave.CrestWait
  fullName: TMPEffects.Parameters.Wave.CrestWait
- uid: TMPEffects.Parameters.Wave.TroughWait*
  commentId: Overload:TMPEffects.Parameters.Wave.TroughWait
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_TroughWait
  name: TroughWait
  nameWithType: Wave.TroughWait
  fullName: TMPEffects.Parameters.Wave.TroughWait
- uid: TMPEffects.Parameters.Wave.#ctor*
  commentId: Overload:TMPEffects.Parameters.Wave.#ctor
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave__ctor
  name: Wave
  nameWithType: Wave.Wave
  fullName: TMPEffects.Parameters.Wave.Wave
  nameWithType.vb: Wave.New
  fullName.vb: TMPEffects.Parameters.Wave.New
  name.vb: New
- uid: TMPEffects.Parameters.Wave
  commentId: T:TMPEffects.Parameters.Wave
  parent: TMPEffects.Parameters
  href: TMPEffects.Parameters.Wave.html
  name: Wave
  nameWithType: Wave
  fullName: TMPEffects.Parameters.Wave
- uid: TMPEffects.Parameters.Wave.CrestWait
  commentId: P:TMPEffects.Parameters.Wave.CrestWait
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_CrestWait
  name: CrestWait
  nameWithType: Wave.CrestWait
  fullName: TMPEffects.Parameters.Wave.CrestWait
- uid: TMPEffects.Parameters.Wave.TroughWait
  commentId: P:TMPEffects.Parameters.Wave.TroughWait
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_TroughWait
  name: TroughWait
  nameWithType: Wave.TroughWait
  fullName: TMPEffects.Parameters.Wave.TroughWait
- uid: System.Exception
  commentId: T:System.Exception
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.exception
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: TMPEffects.Parameters.Wave.PassedExtrema*
  commentId: Overload:TMPEffects.Parameters.Wave.PassedExtrema
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_PassedExtrema_System_Single_System_Single_System_Single_System_Boolean_TMPEffects_Parameters_Wave_PulseExtrema_
  name: PassedExtrema
  nameWithType: Wave.PassedExtrema
  fullName: TMPEffects.Parameters.Wave.PassedExtrema
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TMPEffects.Parameters.Wave.PulseExtrema
  commentId: T:TMPEffects.Parameters.Wave.PulseExtrema
  parent: TMPEffects.Parameters
  href: TMPEffects.Parameters.Wave.html
  name: Wave.PulseExtrema
  nameWithType: Wave.PulseExtrema
  fullName: TMPEffects.Parameters.Wave.PulseExtrema
  spec.csharp:
  - uid: TMPEffects.Parameters.Wave
    name: Wave
    href: TMPEffects.Parameters.Wave.html
  - name: .
  - uid: TMPEffects.Parameters.Wave.PulseExtrema
    name: PulseExtrema
    href: TMPEffects.Parameters.Wave.PulseExtrema.html
  spec.vb:
  - uid: TMPEffects.Parameters.Wave
    name: Wave
    href: TMPEffects.Parameters.Wave.html
  - name: .
  - uid: TMPEffects.Parameters.Wave.PulseExtrema
    name: PulseExtrema
    href: TMPEffects.Parameters.Wave.PulseExtrema.html
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: TMPEffects.Parameters.Wave.PassedWaveExtrema*
  commentId: Overload:TMPEffects.Parameters.Wave.PassedWaveExtrema
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_PassedWaveExtrema_System_Single_System_Single_System_Single_
  name: PassedWaveExtrema
  nameWithType: Wave.PassedWaveExtrema
  fullName: TMPEffects.Parameters.Wave.PassedWaveExtrema
- uid: TMPEffects.Parameters.Wave.PassedPulseExtrema*
  commentId: Overload:TMPEffects.Parameters.Wave.PassedPulseExtrema
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_PassedPulseExtrema_System_Single_System_Single_System_Single_System_Boolean_TMPEffects_Parameters_Wave_PulseExtrema_
  name: PassedPulseExtrema
  nameWithType: Wave.PassedPulseExtrema
  fullName: TMPEffects.Parameters.Wave.PassedPulseExtrema
- uid: TMPEffects.Parameters.Wave.PassedInvertedPulseExtrema*
  commentId: Overload:TMPEffects.Parameters.Wave.PassedInvertedPulseExtrema
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_PassedInvertedPulseExtrema_System_Single_System_Single_System_Single_System_Boolean_TMPEffects_Parameters_Wave_PulseExtrema_
  name: PassedInvertedPulseExtrema
  nameWithType: Wave.PassedInvertedPulseExtrema
  fullName: TMPEffects.Parameters.Wave.PassedInvertedPulseExtrema
- uid: TMPEffects.Parameters.Wave.PassedOneDirectionalPulseExtrema*
  commentId: Overload:TMPEffects.Parameters.Wave.PassedOneDirectionalPulseExtrema
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_PassedOneDirectionalPulseExtrema_System_Single_System_Single_System_Single_System_Boolean_TMPEffects_Parameters_Wave_PulseExtrema_
  name: PassedOneDirectionalPulseExtrema
  nameWithType: Wave.PassedOneDirectionalPulseExtrema
  fullName: TMPEffects.Parameters.Wave.PassedOneDirectionalPulseExtrema
- uid: TMPEffects.Parameters.Wave.Evaluate*
  commentId: Overload:TMPEffects.Parameters.Wave.Evaluate
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_Evaluate_System_Single_System_Single_System_Boolean_
  name: Evaluate
  nameWithType: Wave.Evaluate
  fullName: TMPEffects.Parameters.Wave.Evaluate
- uid: System.ValueTuple{System.Single,System.Int32}
  commentId: T:System.ValueTuple{System.Single,System.Int32}
  parent: System
  definition: System.ValueTuple`2
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: (float Value, int Direction)
  nameWithType: (float Value, int Direction)
  fullName: (float Value, int Direction)
  nameWithType.vb: (Value As Single, Direction As Integer)
  fullName.vb: (Value As Single, Direction As Integer)
  name.vb: (Value As Single, Direction As Integer)
  spec.csharp:
  - name: (
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: " "
  - uid: System.ValueTuple{System.Single,System.Int32}.Value
    name: Value
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.single,system.int32-.value
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: " "
  - uid: System.ValueTuple{System.Single,System.Int32}.Direction
    name: Direction
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.single,system.int32-.direction
  - name: )
  spec.vb:
  - name: (
  - uid: System.ValueTuple{System.Single,System.Int32}.Value
    name: Value
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.single,system.int32-.value
  - name: " "
  - name: As
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Single,System.Int32}.Direction
    name: Direction
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.single,system.int32-.direction
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  name: (T1, T2)
  nameWithType: (T1, T2)
  fullName: (T1, T2)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: TMPEffects.Parameters.Wave.EvaluateAsWave*
  commentId: Overload:TMPEffects.Parameters.Wave.EvaluateAsWave
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_EvaluateAsWave_System_Single_System_Single_
  name: EvaluateAsWave
  nameWithType: Wave.EvaluateAsWave
  fullName: TMPEffects.Parameters.Wave.EvaluateAsWave
- uid: TMPEffects.Parameters.Wave.EvaluateAsPulse*
  commentId: Overload:TMPEffects.Parameters.Wave.EvaluateAsPulse
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_EvaluateAsPulse_System_Single_System_Single_System_Boolean_
  name: EvaluateAsPulse
  nameWithType: Wave.EvaluateAsPulse
  fullName: TMPEffects.Parameters.Wave.EvaluateAsPulse
- uid: TMPEffects.Parameters.Wave.EvaluateAsInvertedPulse*
  commentId: Overload:TMPEffects.Parameters.Wave.EvaluateAsInvertedPulse
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_EvaluateAsInvertedPulse_System_Single_System_Single_System_Boolean_
  name: EvaluateAsInvertedPulse
  nameWithType: Wave.EvaluateAsInvertedPulse
  fullName: TMPEffects.Parameters.Wave.EvaluateAsInvertedPulse
- uid: TMPEffects.Parameters.Wave.EvaluateAsOneDirectionalPulse*
  commentId: Overload:TMPEffects.Parameters.Wave.EvaluateAsOneDirectionalPulse
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_EvaluateAsOneDirectionalPulse_System_Single_System_Single_System_Boolean_
  name: EvaluateAsOneDirectionalPulse
  nameWithType: Wave.EvaluateAsOneDirectionalPulse
  fullName: TMPEffects.Parameters.Wave.EvaluateAsOneDirectionalPulse
- uid: TMPEffects.Parameters.Wave.OnBeforeSerialize*
  commentId: Overload:TMPEffects.Parameters.Wave.OnBeforeSerialize
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_OnBeforeSerialize
  name: OnBeforeSerialize
  nameWithType: Wave.OnBeforeSerialize
  fullName: TMPEffects.Parameters.Wave.OnBeforeSerialize
- uid: TMPEffects.Parameters.Wave.OnAfterDeserialize*
  commentId: Overload:TMPEffects.Parameters.Wave.OnAfterDeserialize
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_OnAfterDeserialize
  name: OnAfterDeserialize
  nameWithType: Wave.OnAfterDeserialize
  fullName: TMPEffects.Parameters.Wave.OnAfterDeserialize
- uid: TMPEffects.Parameters.Wave.ToString*
  commentId: Overload:TMPEffects.Parameters.Wave.ToString
  href: TMPEffects.Parameters.Wave.html#TMPEffects_Parameters_Wave_ToString
  name: ToString
  nameWithType: Wave.ToString
  fullName: TMPEffects.Parameters.Wave.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
