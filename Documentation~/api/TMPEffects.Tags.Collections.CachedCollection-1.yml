### YamlMime:ManagedReference
items:
- uid: TMPEffects.Tags.Collections.CachedCollection`1
  commentId: T:TMPEffects.Tags.Collections.CachedCollection`1
  id: CachedCollection`1
  parent: TMPEffects.Tags.Collections
  children:
  - TMPEffects.Tags.Collections.CachedCollection`1.#ctor(TMPEffects.Tags.ITagCacher{`0},TMPEffects.Tags.Collections.ObservableTagCollection)
  - TMPEffects.Tags.Collections.CachedCollection`1.Count
  - TMPEffects.Tags.Collections.CachedCollection`1.GetAt(System.Int32)
  - TMPEffects.Tags.Collections.CachedCollection`1.GetContaining(System.Int32)
  - TMPEffects.Tags.Collections.CachedCollection`1.GetContainingReversed_NonAlloc(System.Int32)
  - TMPEffects.Tags.Collections.CachedCollection`1.GetContaining_NonAlloc(System.Int32)
  - TMPEffects.Tags.Collections.CachedCollection`1.GetEnumerator
  - TMPEffects.Tags.Collections.CachedCollection`1.HasAny
  - TMPEffects.Tags.Collections.CachedCollection`1.HasAnyAt(System.Int32)
  - TMPEffects.Tags.Collections.CachedCollection`1.HasAnyContaining(System.Int32)
  - TMPEffects.Tags.Collections.CachedCollection`1.Item(System.Int32)
  - TMPEffects.Tags.Collections.CachedCollection`1.MinMaxAt(System.Int32)
  langs:
  - csharp
  - vb
  name: CachedCollection<T>
  nameWithType: CachedCollection<T>
  fullName: TMPEffects.Tags.Collections.CachedCollection<T>
  type: Class
  source:
    remote:
      path: Runtime/Tags/CachedCollection.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: CachedCollection
    path: ../Assets/TMPEffects OLD/Runtime/Tags/CachedCollection.cs
    startLine: 19
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags.Collections
  summary: >-
    Manages a collection of <xref href="TMPEffects.Tags.ITagWrapper" data-throw-if-not-resolved="false"></xref> that represent a cached tag.<br />

    Will keep itself synchronized with the given <xref href="TMPEffects.Tags.Collections.ObservableTagCollection" data-throw-if-not-resolved="false"></xref>.<br />
  remarks: >-
    Designed for fast "Get tags that contain index" operations.<br />

    Ideally use along with <xref href="TMPEffects.Tags.Collections.TagCollectionManager%601" data-throw-if-not-resolved="false"></xref> to get the <xref href="TMPEffects.Tags.Collections.ObservableTagCollection" data-throw-if-not-resolved="false"></xref> 

    (see implementations of both <xref href="TMPEffects.Components.TMPAnimator" data-throw-if-not-resolved="false"></xref> and <xref href="TMPEffects.Components.TMPWriter" data-throw-if-not-resolved="false"></xref> for examples).
  example: []
  syntax:
    content: 'public class CachedCollection<T> : IEnumerable<T>, IEnumerable where T : ITagWrapper'
    typeParameters:
    - id: T
      description: The type of tag wrapper / cached tags.
    content.vb: Public Class CachedCollection(Of T As ITagWrapper) Implements IEnumerable(Of T), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: CachedCollection(Of T)
  fullName.vb: TMPEffects.Tags.Collections.CachedCollection(Of T)
  name.vb: CachedCollection(Of T)
- uid: TMPEffects.Tags.Collections.CachedCollection`1.Count
  commentId: P:TMPEffects.Tags.Collections.CachedCollection`1.Count
  id: Count
  parent: TMPEffects.Tags.Collections.CachedCollection`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: CachedCollection<T>.Count
  fullName: TMPEffects.Tags.Collections.CachedCollection<T>.Count
  type: Property
  source:
    remote:
      path: Runtime/Tags/CachedCollection.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: Count
    path: ../Assets/TMPEffects OLD/Runtime/Tags/CachedCollection.cs
    startLine: 24
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags.Collections
  summary: Amount of cached tags contained in this collection.
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: TMPEffects.Tags.Collections.CachedCollection`1.Count*
  nameWithType.vb: CachedCollection(Of T).Count
  fullName.vb: TMPEffects.Tags.Collections.CachedCollection(Of T).Count
- uid: TMPEffects.Tags.Collections.CachedCollection`1.#ctor(TMPEffects.Tags.ITagCacher{`0},TMPEffects.Tags.Collections.ObservableTagCollection)
  commentId: M:TMPEffects.Tags.Collections.CachedCollection`1.#ctor(TMPEffects.Tags.ITagCacher{`0},TMPEffects.Tags.Collections.ObservableTagCollection)
  id: '#ctor(TMPEffects.Tags.ITagCacher{`0},TMPEffects.Tags.Collections.ObservableTagCollection)'
  parent: TMPEffects.Tags.Collections.CachedCollection`1
  langs:
  - csharp
  - vb
  name: CachedCollection(ITagCacher<T>, ObservableTagCollection)
  nameWithType: CachedCollection<T>.CachedCollection(ITagCacher<T>, ObservableTagCollection)
  fullName: TMPEffects.Tags.Collections.CachedCollection<T>.CachedCollection(TMPEffects.Tags.ITagCacher<T>, TMPEffects.Tags.Collections.ObservableTagCollection)
  type: Constructor
  source:
    remote:
      path: Runtime/Tags/CachedCollection.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: .ctor
    path: ../Assets/TMPEffects OLD/Runtime/Tags/CachedCollection.cs
    startLine: 26
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags.Collections
  syntax:
    content: public CachedCollection(ITagCacher<T> cacher, ObservableTagCollection tagCollection)
    parameters:
    - id: cacher
      type: TMPEffects.Tags.ITagCacher{{T}}
    - id: tagCollection
      type: TMPEffects.Tags.Collections.ObservableTagCollection
    content.vb: Public Sub New(cacher As ITagCacher(Of T), tagCollection As ObservableTagCollection)
  overload: TMPEffects.Tags.Collections.CachedCollection`1.#ctor*
  nameWithType.vb: CachedCollection(Of T).New(ITagCacher(Of T), ObservableTagCollection)
  fullName.vb: TMPEffects.Tags.Collections.CachedCollection(Of T).New(TMPEffects.Tags.ITagCacher(Of T), TMPEffects.Tags.Collections.ObservableTagCollection)
  name.vb: New(ITagCacher(Of T), ObservableTagCollection)
- uid: TMPEffects.Tags.Collections.CachedCollection`1.MinMaxAt(System.Int32)
  commentId: M:TMPEffects.Tags.Collections.CachedCollection`1.MinMaxAt(System.Int32)
  id: MinMaxAt(System.Int32)
  parent: TMPEffects.Tags.Collections.CachedCollection`1
  langs:
  - csharp
  - vb
  name: MinMaxAt(int)
  nameWithType: CachedCollection<T>.MinMaxAt(int)
  fullName: TMPEffects.Tags.Collections.CachedCollection<T>.MinMaxAt(int)
  type: Method
  source:
    remote:
      path: Runtime/Tags/CachedCollection.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: MinMaxAt
    path: ../Assets/TMPEffects OLD/Runtime/Tags/CachedCollection.cs
    startLine: 75
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags.Collections
  summary: Get the <xref href="TMPEffects.Tags.Collections.CachedCollection%601.MinMax" data-throw-if-not-resolved="false"></xref> for a text index.
  example: []
  syntax:
    content: public CachedCollection<T>.MinMax MinMaxAt(int textIndex)
    parameters:
    - id: textIndex
      type: System.Int32
      description: The text index.
    return:
      type: TMPEffects.Tags.Collections.CachedCollection`1.MinMax
      description: The <xref href="TMPEffects.Tags.Collections.CachedCollection%601.MinMax" data-throw-if-not-resolved="false"></xref> for the text index, if one exists; otherwise null.
    content.vb: Public Function MinMaxAt(textIndex As Integer) As CachedCollection(Of T).MinMax
  overload: TMPEffects.Tags.Collections.CachedCollection`1.MinMaxAt*
  nameWithType.vb: CachedCollection(Of T).MinMaxAt(Integer)
  fullName.vb: TMPEffects.Tags.Collections.CachedCollection(Of T).MinMaxAt(Integer)
  name.vb: MinMaxAt(Integer)
- uid: TMPEffects.Tags.Collections.CachedCollection`1.Item(System.Int32)
  commentId: P:TMPEffects.Tags.Collections.CachedCollection`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: TMPEffects.Tags.Collections.CachedCollection`1
  langs:
  - csharp
  - vb
  name: this[int]
  nameWithType: CachedCollection<T>.this[int]
  fullName: TMPEffects.Tags.Collections.CachedCollection<T>.this[int]
  type: Property
  source:
    remote:
      path: Runtime/Tags/CachedCollection.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: this[]
    path: ../Assets/TMPEffects OLD/Runtime/Tags/CachedCollection.cs
    startLine: 90
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags.Collections
  summary: Get the cached tag of type T at the given collection index.
  example: []
  syntax:
    content: public T this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: The collection index.
    return:
      type: '{T}'
      description: The cached tag of type T at the given collection index.
    content.vb: Public ReadOnly Default Property this[](index As Integer) As T
  overload: TMPEffects.Tags.Collections.CachedCollection`1.Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: ''
  nameWithType.vb: CachedCollection(Of T).this[](Integer)
  fullName.vb: TMPEffects.Tags.Collections.CachedCollection(Of T).this[](Integer)
  name.vb: this[](Integer)
- uid: TMPEffects.Tags.Collections.CachedCollection`1.HasAny
  commentId: M:TMPEffects.Tags.Collections.CachedCollection`1.HasAny
  id: HasAny
  parent: TMPEffects.Tags.Collections.CachedCollection`1
  langs:
  - csharp
  - vb
  name: HasAny()
  nameWithType: CachedCollection<T>.HasAny()
  fullName: TMPEffects.Tags.Collections.CachedCollection<T>.HasAny()
  type: Method
  source:
    remote:
      path: Runtime/Tags/CachedCollection.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: HasAny
    path: ../Assets/TMPEffects OLD/Runtime/Tags/CachedCollection.cs
    startLine: 99
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags.Collections
  summary: Whether this collection has any cached tags.
  example: []
  syntax:
    content: public bool HasAny()
    return:
      type: System.Boolean
      description: true if there is at least one cached tag; false otherwise.
    content.vb: Public Function HasAny() As Boolean
  overload: TMPEffects.Tags.Collections.CachedCollection`1.HasAny*
  nameWithType.vb: CachedCollection(Of T).HasAny()
  fullName.vb: TMPEffects.Tags.Collections.CachedCollection(Of T).HasAny()
- uid: TMPEffects.Tags.Collections.CachedCollection`1.HasAnyContaining(System.Int32)
  commentId: M:TMPEffects.Tags.Collections.CachedCollection`1.HasAnyContaining(System.Int32)
  id: HasAnyContaining(System.Int32)
  parent: TMPEffects.Tags.Collections.CachedCollection`1
  langs:
  - csharp
  - vb
  name: HasAnyContaining(int)
  nameWithType: CachedCollection<T>.HasAnyContaining(int)
  fullName: TMPEffects.Tags.Collections.CachedCollection<T>.HasAnyContaining(int)
  type: Method
  source:
    remote:
      path: Runtime/Tags/CachedCollection.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: HasAnyContaining
    path: ../Assets/TMPEffects OLD/Runtime/Tags/CachedCollection.cs
    startLine: 105
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags.Collections
  summary: Whether this collection has any cached tags that contain the given text index.
  example: []
  syntax:
    content: public bool HasAnyContaining(int textIndex)
    parameters:
    - id: textIndex
      type: System.Int32
      description: The text index.
    return:
      type: System.Boolean
      description: true if there is at least one cached tag that contains the given text index; false otherwise.
    content.vb: Public Function HasAnyContaining(textIndex As Integer) As Boolean
  overload: TMPEffects.Tags.Collections.CachedCollection`1.HasAnyContaining*
  nameWithType.vb: CachedCollection(Of T).HasAnyContaining(Integer)
  fullName.vb: TMPEffects.Tags.Collections.CachedCollection(Of T).HasAnyContaining(Integer)
  name.vb: HasAnyContaining(Integer)
- uid: TMPEffects.Tags.Collections.CachedCollection`1.HasAnyAt(System.Int32)
  commentId: M:TMPEffects.Tags.Collections.CachedCollection`1.HasAnyAt(System.Int32)
  id: HasAnyAt(System.Int32)
  parent: TMPEffects.Tags.Collections.CachedCollection`1
  langs:
  - csharp
  - vb
  name: HasAnyAt(int)
  nameWithType: CachedCollection<T>.HasAnyAt(int)
  fullName: TMPEffects.Tags.Collections.CachedCollection<T>.HasAnyAt(int)
  type: Method
  source:
    remote:
      path: Runtime/Tags/CachedCollection.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: HasAnyAt
    path: ../Assets/TMPEffects OLD/Runtime/Tags/CachedCollection.cs
    startLine: 116
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags.Collections
  summary: Whether this collection has any cached tags that start at the given text index.
  example: []
  syntax:
    content: public bool HasAnyAt(int index)
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.Boolean
      description: true if there is at least one cached tag that starts at the given text index; false otherwise.
    content.vb: Public Function HasAnyAt(index As Integer) As Boolean
  overload: TMPEffects.Tags.Collections.CachedCollection`1.HasAnyAt*
  nameWithType.vb: CachedCollection(Of T).HasAnyAt(Integer)
  fullName.vb: TMPEffects.Tags.Collections.CachedCollection(Of T).HasAnyAt(Integer)
  name.vb: HasAnyAt(Integer)
- uid: TMPEffects.Tags.Collections.CachedCollection`1.GetContaining(System.Int32)
  commentId: M:TMPEffects.Tags.Collections.CachedCollection`1.GetContaining(System.Int32)
  id: GetContaining(System.Int32)
  parent: TMPEffects.Tags.Collections.CachedCollection`1
  langs:
  - csharp
  - vb
  name: GetContaining(int)
  nameWithType: CachedCollection<T>.GetContaining(int)
  fullName: TMPEffects.Tags.Collections.CachedCollection<T>.GetContaining(int)
  type: Method
  source:
    remote:
      path: Runtime/Tags/CachedCollection.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: GetContaining
    path: ../Assets/TMPEffects OLD/Runtime/Tags/CachedCollection.cs
    startLine: 136
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags.Collections
  summary: Enumerates all cached tags that contain the given text index.
  example: []
  syntax:
    content: public IEnumerable<T> GetContaining(int textIndex)
    parameters:
    - id: textIndex
      type: System.Int32
      description: The text index.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: All cached tags that contain the given text index.
    content.vb: Public Function GetContaining(textIndex As Integer) As IEnumerable(Of T)
  overload: TMPEffects.Tags.Collections.CachedCollection`1.GetContaining*
  nameWithType.vb: CachedCollection(Of T).GetContaining(Integer)
  fullName.vb: TMPEffects.Tags.Collections.CachedCollection(Of T).GetContaining(Integer)
  name.vb: GetContaining(Integer)
- uid: TMPEffects.Tags.Collections.CachedCollection`1.GetAt(System.Int32)
  commentId: M:TMPEffects.Tags.Collections.CachedCollection`1.GetAt(System.Int32)
  id: GetAt(System.Int32)
  parent: TMPEffects.Tags.Collections.CachedCollection`1
  langs:
  - csharp
  - vb
  name: GetAt(int)
  nameWithType: CachedCollection<T>.GetAt(int)
  fullName: TMPEffects.Tags.Collections.CachedCollection<T>.GetAt(int)
  type: Method
  source:
    remote:
      path: Runtime/Tags/CachedCollection.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: GetAt
    path: ../Assets/TMPEffects OLD/Runtime/Tags/CachedCollection.cs
    startLine: 157
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags.Collections
  summary: Enumerates all cached tags that start at the given text index.
  example: []
  syntax:
    content: public IEnumerable<T> GetAt(int textIndex)
    parameters:
    - id: textIndex
      type: System.Int32
      description: The text index.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: All cached tags that start at the given text index.
    content.vb: Public Function GetAt(textIndex As Integer) As IEnumerable(Of T)
  overload: TMPEffects.Tags.Collections.CachedCollection`1.GetAt*
  nameWithType.vb: CachedCollection(Of T).GetAt(Integer)
  fullName.vb: TMPEffects.Tags.Collections.CachedCollection(Of T).GetAt(Integer)
  name.vb: GetAt(Integer)
- uid: TMPEffects.Tags.Collections.CachedCollection`1.GetContaining_NonAlloc(System.Int32)
  commentId: M:TMPEffects.Tags.Collections.CachedCollection`1.GetContaining_NonAlloc(System.Int32)
  id: GetContaining_NonAlloc(System.Int32)
  parent: TMPEffects.Tags.Collections.CachedCollection`1
  langs:
  - csharp
  - vb
  name: GetContaining_NonAlloc(int)
  nameWithType: CachedCollection<T>.GetContaining_NonAlloc(int)
  fullName: TMPEffects.Tags.Collections.CachedCollection<T>.GetContaining_NonAlloc(int)
  type: Method
  source:
    remote:
      path: Runtime/Tags/CachedCollection.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: GetContaining_NonAlloc
    path: ../Assets/TMPEffects OLD/Runtime/Tags/CachedCollection.cs
    startLine: 184
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags.Collections
  summary: Enumerates all cached tags that contain the given text index, without allocating any memory.
  example: []
  syntax:
    content: public CachedCollection<T>.StructContainingEnumerable GetContaining_NonAlloc(int textIndex)
    parameters:
    - id: textIndex
      type: System.Int32
      description: The text index.
    return:
      type: TMPEffects.Tags.Collections.CachedCollection`1.StructContainingEnumerable
      description: All cached tags that contain the given text index.
    content.vb: Public Function GetContaining_NonAlloc(textIndex As Integer) As CachedCollection(Of T).StructContainingEnumerable
  overload: TMPEffects.Tags.Collections.CachedCollection`1.GetContaining_NonAlloc*
  nameWithType.vb: CachedCollection(Of T).GetContaining_NonAlloc(Integer)
  fullName.vb: TMPEffects.Tags.Collections.CachedCollection(Of T).GetContaining_NonAlloc(Integer)
  name.vb: GetContaining_NonAlloc(Integer)
- uid: TMPEffects.Tags.Collections.CachedCollection`1.GetContainingReversed_NonAlloc(System.Int32)
  commentId: M:TMPEffects.Tags.Collections.CachedCollection`1.GetContainingReversed_NonAlloc(System.Int32)
  id: GetContainingReversed_NonAlloc(System.Int32)
  parent: TMPEffects.Tags.Collections.CachedCollection`1
  langs:
  - csharp
  - vb
  name: GetContainingReversed_NonAlloc(int)
  nameWithType: CachedCollection<T>.GetContainingReversed_NonAlloc(int)
  fullName: TMPEffects.Tags.Collections.CachedCollection<T>.GetContainingReversed_NonAlloc(int)
  type: Method
  source:
    remote:
      path: Runtime/Tags/CachedCollection.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: GetContainingReversed_NonAlloc
    path: ../Assets/TMPEffects OLD/Runtime/Tags/CachedCollection.cs
    startLine: 198
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags.Collections
  summary: Enumerates all cached tags that contain the given text index in reversed order, without allocating any memory.
  example: []
  syntax:
    content: public CachedCollection<T>.StructReversedContainingEnumerable GetContainingReversed_NonAlloc(int textIndex)
    parameters:
    - id: textIndex
      type: System.Int32
      description: The text index.
    return:
      type: TMPEffects.Tags.Collections.CachedCollection`1.StructReversedContainingEnumerable
      description: All cached tags that contain the given text index.
    content.vb: Public Function GetContainingReversed_NonAlloc(textIndex As Integer) As CachedCollection(Of T).StructReversedContainingEnumerable
  overload: TMPEffects.Tags.Collections.CachedCollection`1.GetContainingReversed_NonAlloc*
  nameWithType.vb: CachedCollection(Of T).GetContainingReversed_NonAlloc(Integer)
  fullName.vb: TMPEffects.Tags.Collections.CachedCollection(Of T).GetContainingReversed_NonAlloc(Integer)
  name.vb: GetContainingReversed_NonAlloc(Integer)
- uid: TMPEffects.Tags.Collections.CachedCollection`1.GetEnumerator
  commentId: M:TMPEffects.Tags.Collections.CachedCollection`1.GetEnumerator
  id: GetEnumerator
  parent: TMPEffects.Tags.Collections.CachedCollection`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: CachedCollection<T>.GetEnumerator()
  fullName: TMPEffects.Tags.Collections.CachedCollection<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Runtime/Tags/CachedCollection.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: GetEnumerator
    path: ../Assets/TMPEffects OLD/Runtime/Tags/CachedCollection.cs
    startLine: 517
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags.Collections
  example: []
  syntax:
    content: public IEnumerator<T> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
    content.vb: Public Function GetEnumerator() As IEnumerator(Of T)
  overload: TMPEffects.Tags.Collections.CachedCollection`1.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  nameWithType.vb: CachedCollection(Of T).GetEnumerator()
  fullName.vb: TMPEffects.Tags.Collections.CachedCollection(Of T).GetEnumerator()
references:
- uid: TMPEffects.Tags.ITagWrapper
  commentId: T:TMPEffects.Tags.ITagWrapper
  href: TMPEffects.Tags.ITagWrapper.html
  name: ITagWrapper
  nameWithType: ITagWrapper
  fullName: TMPEffects.Tags.ITagWrapper
- uid: TMPEffects.Tags.Collections.ObservableTagCollection
  commentId: T:TMPEffects.Tags.Collections.ObservableTagCollection
  parent: TMPEffects.Tags.Collections
  href: TMPEffects.Tags.Collections.ObservableTagCollection.html
  name: ObservableTagCollection
  nameWithType: ObservableTagCollection
  fullName: TMPEffects.Tags.Collections.ObservableTagCollection
- uid: TMPEffects.Tags.Collections.TagCollectionManager`1
  commentId: T:TMPEffects.Tags.Collections.TagCollectionManager`1
  href: TMPEffects.Tags.Collections.TagCollectionManager-1.html
  name: TagCollectionManager<TKey>
  nameWithType: TagCollectionManager<TKey>
  fullName: TMPEffects.Tags.Collections.TagCollectionManager<TKey>
  nameWithType.vb: TagCollectionManager(Of TKey)
  fullName.vb: TMPEffects.Tags.Collections.TagCollectionManager(Of TKey)
  name.vb: TagCollectionManager(Of TKey)
  spec.csharp:
  - uid: TMPEffects.Tags.Collections.TagCollectionManager`1
    name: TagCollectionManager
    href: TMPEffects.Tags.Collections.TagCollectionManager-1.html
  - name: <
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: TMPEffects.Tags.Collections.TagCollectionManager`1
    name: TagCollectionManager
    href: TMPEffects.Tags.Collections.TagCollectionManager-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
- uid: TMPEffects.Components.TMPAnimator
  commentId: T:TMPEffects.Components.TMPAnimator
  parent: TMPEffects.Components
  href: TMPEffects.Components.TMPAnimator.html
  name: TMPAnimator
  nameWithType: TMPAnimator
  fullName: TMPEffects.Components.TMPAnimator
- uid: TMPEffects.Components.TMPWriter
  commentId: T:TMPEffects.Components.TMPWriter
  parent: TMPEffects.Components
  href: TMPEffects.Components.TMPWriter.html
  name: TMPWriter
  nameWithType: TMPWriter
  fullName: TMPEffects.Components.TMPWriter
- uid: TMPEffects.Tags.Collections
  commentId: N:TMPEffects.Tags.Collections
  href: TMPEffects.html
  name: TMPEffects.Tags.Collections
  nameWithType: TMPEffects.Tags.Collections
  fullName: TMPEffects.Tags.Collections
  spec.csharp:
  - uid: TMPEffects
    name: TMPEffects
    href: TMPEffects.html
  - name: .
  - uid: TMPEffects.Tags
    name: Tags
    href: TMPEffects.Tags.html
  - name: .
  - uid: TMPEffects.Tags.Collections
    name: Collections
    href: TMPEffects.Tags.Collections.html
  spec.vb:
  - uid: TMPEffects
    name: TMPEffects
    href: TMPEffects.html
  - name: .
  - uid: TMPEffects.Tags
    name: Tags
    href: TMPEffects.Tags.html
  - name: .
  - uid: TMPEffects.Tags.Collections
    name: Collections
    href: TMPEffects.Tags.Collections.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.ienumerable
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: TMPEffects.Components
  commentId: N:TMPEffects.Components
  href: TMPEffects.html
  name: TMPEffects.Components
  nameWithType: TMPEffects.Components
  fullName: TMPEffects.Components
  spec.csharp:
  - uid: TMPEffects
    name: TMPEffects
    href: TMPEffects.html
  - name: .
  - uid: TMPEffects.Components
    name: Components
    href: TMPEffects.Components.html
  spec.vb:
  - uid: TMPEffects
    name: TMPEffects
    href: TMPEffects.html
  - name: .
  - uid: TMPEffects.Components
    name: Components
    href: TMPEffects.Components.html
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
- uid: TMPEffects.Tags.Collections.CachedCollection`1.Count*
  commentId: Overload:TMPEffects.Tags.Collections.CachedCollection`1.Count
  href: TMPEffects.Tags.Collections.CachedCollection-1.html#TMPEffects_Tags_Collections_CachedCollection_1_Count
  name: Count
  nameWithType: CachedCollection<T>.Count
  fullName: TMPEffects.Tags.Collections.CachedCollection<T>.Count
  nameWithType.vb: CachedCollection(Of T).Count
  fullName.vb: TMPEffects.Tags.Collections.CachedCollection(Of T).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: TMPEffects.Tags.Collections.CachedCollection`1.#ctor*
  commentId: Overload:TMPEffects.Tags.Collections.CachedCollection`1.#ctor
  href: TMPEffects.Tags.Collections.CachedCollection-1.html#TMPEffects_Tags_Collections_CachedCollection_1__ctor_TMPEffects_Tags_ITagCacher__0__TMPEffects_Tags_Collections_ObservableTagCollection_
  name: CachedCollection
  nameWithType: CachedCollection<T>.CachedCollection
  fullName: TMPEffects.Tags.Collections.CachedCollection<T>.CachedCollection
  nameWithType.vb: CachedCollection(Of T).New
  fullName.vb: TMPEffects.Tags.Collections.CachedCollection(Of T).New
  name.vb: New
- uid: TMPEffects.Tags.ITagCacher{{T}}
  commentId: T:TMPEffects.Tags.ITagCacher{`0}
  parent: TMPEffects.Tags
  definition: TMPEffects.Tags.ITagCacher`1
  href: TMPEffects.Tags.ITagCacher-1.html
  name: ITagCacher<T>
  nameWithType: ITagCacher<T>
  fullName: TMPEffects.Tags.ITagCacher<T>
  nameWithType.vb: ITagCacher(Of T)
  fullName.vb: TMPEffects.Tags.ITagCacher(Of T)
  name.vb: ITagCacher(Of T)
  spec.csharp:
  - uid: TMPEffects.Tags.ITagCacher`1
    name: ITagCacher
    href: TMPEffects.Tags.ITagCacher-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: TMPEffects.Tags.ITagCacher`1
    name: ITagCacher
    href: TMPEffects.Tags.ITagCacher-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TMPEffects.Tags.ITagCacher`1
  commentId: T:TMPEffects.Tags.ITagCacher`1
  href: TMPEffects.Tags.ITagCacher-1.html
  name: ITagCacher<T>
  nameWithType: ITagCacher<T>
  fullName: TMPEffects.Tags.ITagCacher<T>
  nameWithType.vb: ITagCacher(Of T)
  fullName.vb: TMPEffects.Tags.ITagCacher(Of T)
  name.vb: ITagCacher(Of T)
  spec.csharp:
  - uid: TMPEffects.Tags.ITagCacher`1
    name: ITagCacher
    href: TMPEffects.Tags.ITagCacher-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: TMPEffects.Tags.ITagCacher`1
    name: ITagCacher
    href: TMPEffects.Tags.ITagCacher-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: TMPEffects.Tags
  commentId: N:TMPEffects.Tags
  href: TMPEffects.html
  name: TMPEffects.Tags
  nameWithType: TMPEffects.Tags
  fullName: TMPEffects.Tags
  spec.csharp:
  - uid: TMPEffects
    name: TMPEffects
    href: TMPEffects.html
  - name: .
  - uid: TMPEffects.Tags
    name: Tags
    href: TMPEffects.Tags.html
  spec.vb:
  - uid: TMPEffects
    name: TMPEffects
    href: TMPEffects.html
  - name: .
  - uid: TMPEffects.Tags
    name: Tags
    href: TMPEffects.Tags.html
- uid: TMPEffects.Tags.Collections.CachedCollection`1.MinMax
  commentId: T:TMPEffects.Tags.Collections.CachedCollection`1.MinMax
  parent: TMPEffects.Tags.Collections
  href: TMPEffects.Tags.Collections.CachedCollection-1.html
  name: CachedCollection<T>.MinMax
  nameWithType: CachedCollection<T>.MinMax
  fullName: TMPEffects.Tags.Collections.CachedCollection<T>.MinMax
  nameWithType.vb: CachedCollection(Of T).MinMax
  fullName.vb: TMPEffects.Tags.Collections.CachedCollection(Of T).MinMax
  name.vb: CachedCollection(Of T).MinMax
  spec.csharp:
  - uid: TMPEffects.Tags.Collections.CachedCollection`1
    name: CachedCollection
    href: TMPEffects.Tags.Collections.CachedCollection-1.html
  - name: <
  - name: T
  - name: '>'
  - name: .
  - uid: TMPEffects.Tags.Collections.CachedCollection`1.MinMax
    name: MinMax
    href: TMPEffects.Tags.Collections.CachedCollection-1.MinMax.html
  spec.vb:
  - uid: TMPEffects.Tags.Collections.CachedCollection`1
    name: CachedCollection
    href: TMPEffects.Tags.Collections.CachedCollection-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: .
  - uid: TMPEffects.Tags.Collections.CachedCollection`1.MinMax
    name: MinMax
    href: TMPEffects.Tags.Collections.CachedCollection-1.MinMax.html
- uid: TMPEffects.Tags.Collections.CachedCollection`1.MinMaxAt*
  commentId: Overload:TMPEffects.Tags.Collections.CachedCollection`1.MinMaxAt
  href: TMPEffects.Tags.Collections.CachedCollection-1.html#TMPEffects_Tags_Collections_CachedCollection_1_MinMaxAt_System_Int32_
  name: MinMaxAt
  nameWithType: CachedCollection<T>.MinMaxAt
  fullName: TMPEffects.Tags.Collections.CachedCollection<T>.MinMaxAt
  nameWithType.vb: CachedCollection(Of T).MinMaxAt
  fullName.vb: TMPEffects.Tags.Collections.CachedCollection(Of T).MinMaxAt
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: TMPEffects.Tags.Collections.CachedCollection`1.Item*
  commentId: Overload:TMPEffects.Tags.Collections.CachedCollection`1.Item
  href: TMPEffects.Tags.Collections.CachedCollection-1.html#TMPEffects_Tags_Collections_CachedCollection_1_Item_System_Int32_
  name: this
  nameWithType: CachedCollection<T>.this
  fullName: TMPEffects.Tags.Collections.CachedCollection<T>.this
  nameWithType.vb: CachedCollection(Of T).this[]
  fullName.vb: TMPEffects.Tags.Collections.CachedCollection(Of T).this[]
  name.vb: this[]
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TMPEffects.Tags.Collections.CachedCollection`1.HasAny*
  commentId: Overload:TMPEffects.Tags.Collections.CachedCollection`1.HasAny
  href: TMPEffects.Tags.Collections.CachedCollection-1.html#TMPEffects_Tags_Collections_CachedCollection_1_HasAny
  name: HasAny
  nameWithType: CachedCollection<T>.HasAny
  fullName: TMPEffects.Tags.Collections.CachedCollection<T>.HasAny
  nameWithType.vb: CachedCollection(Of T).HasAny
  fullName.vb: TMPEffects.Tags.Collections.CachedCollection(Of T).HasAny
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TMPEffects.Tags.Collections.CachedCollection`1.HasAnyContaining*
  commentId: Overload:TMPEffects.Tags.Collections.CachedCollection`1.HasAnyContaining
  href: TMPEffects.Tags.Collections.CachedCollection-1.html#TMPEffects_Tags_Collections_CachedCollection_1_HasAnyContaining_System_Int32_
  name: HasAnyContaining
  nameWithType: CachedCollection<T>.HasAnyContaining
  fullName: TMPEffects.Tags.Collections.CachedCollection<T>.HasAnyContaining
  nameWithType.vb: CachedCollection(Of T).HasAnyContaining
  fullName.vb: TMPEffects.Tags.Collections.CachedCollection(Of T).HasAnyContaining
- uid: TMPEffects.Tags.Collections.CachedCollection`1.HasAnyAt*
  commentId: Overload:TMPEffects.Tags.Collections.CachedCollection`1.HasAnyAt
  href: TMPEffects.Tags.Collections.CachedCollection-1.html#TMPEffects_Tags_Collections_CachedCollection_1_HasAnyAt_System_Int32_
  name: HasAnyAt
  nameWithType: CachedCollection<T>.HasAnyAt
  fullName: TMPEffects.Tags.Collections.CachedCollection<T>.HasAnyAt
  nameWithType.vb: CachedCollection(Of T).HasAnyAt
  fullName.vb: TMPEffects.Tags.Collections.CachedCollection(Of T).HasAnyAt
- uid: TMPEffects.Tags.Collections.CachedCollection`1.GetContaining*
  commentId: Overload:TMPEffects.Tags.Collections.CachedCollection`1.GetContaining
  href: TMPEffects.Tags.Collections.CachedCollection-1.html#TMPEffects_Tags_Collections_CachedCollection_1_GetContaining_System_Int32_
  name: GetContaining
  nameWithType: CachedCollection<T>.GetContaining
  fullName: TMPEffects.Tags.Collections.CachedCollection<T>.GetContaining
  nameWithType.vb: CachedCollection(Of T).GetContaining
  fullName.vb: TMPEffects.Tags.Collections.CachedCollection(Of T).GetContaining
- uid: TMPEffects.Tags.Collections.CachedCollection`1.GetAt*
  commentId: Overload:TMPEffects.Tags.Collections.CachedCollection`1.GetAt
  href: TMPEffects.Tags.Collections.CachedCollection-1.html#TMPEffects_Tags_Collections_CachedCollection_1_GetAt_System_Int32_
  name: GetAt
  nameWithType: CachedCollection<T>.GetAt
  fullName: TMPEffects.Tags.Collections.CachedCollection<T>.GetAt
  nameWithType.vb: CachedCollection(Of T).GetAt
  fullName.vb: TMPEffects.Tags.Collections.CachedCollection(Of T).GetAt
- uid: TMPEffects.Tags.Collections.CachedCollection`1.GetContaining_NonAlloc*
  commentId: Overload:TMPEffects.Tags.Collections.CachedCollection`1.GetContaining_NonAlloc
  href: TMPEffects.Tags.Collections.CachedCollection-1.html#TMPEffects_Tags_Collections_CachedCollection_1_GetContaining_NonAlloc_System_Int32_
  name: GetContaining_NonAlloc
  nameWithType: CachedCollection<T>.GetContaining_NonAlloc
  fullName: TMPEffects.Tags.Collections.CachedCollection<T>.GetContaining_NonAlloc
  nameWithType.vb: CachedCollection(Of T).GetContaining_NonAlloc
  fullName.vb: TMPEffects.Tags.Collections.CachedCollection(Of T).GetContaining_NonAlloc
- uid: TMPEffects.Tags.Collections.CachedCollection`1.StructContainingEnumerable
  commentId: T:TMPEffects.Tags.Collections.CachedCollection`1.StructContainingEnumerable
  parent: TMPEffects.Tags.Collections
  href: TMPEffects.Tags.Collections.CachedCollection-1.html
  name: CachedCollection<T>.StructContainingEnumerable
  nameWithType: CachedCollection<T>.StructContainingEnumerable
  fullName: TMPEffects.Tags.Collections.CachedCollection<T>.StructContainingEnumerable
  nameWithType.vb: CachedCollection(Of T).StructContainingEnumerable
  fullName.vb: TMPEffects.Tags.Collections.CachedCollection(Of T).StructContainingEnumerable
  name.vb: CachedCollection(Of T).StructContainingEnumerable
  spec.csharp:
  - uid: TMPEffects.Tags.Collections.CachedCollection`1
    name: CachedCollection
    href: TMPEffects.Tags.Collections.CachedCollection-1.html
  - name: <
  - name: T
  - name: '>'
  - name: .
  - uid: TMPEffects.Tags.Collections.CachedCollection`1.StructContainingEnumerable
    name: StructContainingEnumerable
    href: TMPEffects.Tags.Collections.CachedCollection-1.StructContainingEnumerable.html
  spec.vb:
  - uid: TMPEffects.Tags.Collections.CachedCollection`1
    name: CachedCollection
    href: TMPEffects.Tags.Collections.CachedCollection-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: .
  - uid: TMPEffects.Tags.Collections.CachedCollection`1.StructContainingEnumerable
    name: StructContainingEnumerable
    href: TMPEffects.Tags.Collections.CachedCollection-1.StructContainingEnumerable.html
- uid: TMPEffects.Tags.Collections.CachedCollection`1.GetContainingReversed_NonAlloc*
  commentId: Overload:TMPEffects.Tags.Collections.CachedCollection`1.GetContainingReversed_NonAlloc
  href: TMPEffects.Tags.Collections.CachedCollection-1.html#TMPEffects_Tags_Collections_CachedCollection_1_GetContainingReversed_NonAlloc_System_Int32_
  name: GetContainingReversed_NonAlloc
  nameWithType: CachedCollection<T>.GetContainingReversed_NonAlloc
  fullName: TMPEffects.Tags.Collections.CachedCollection<T>.GetContainingReversed_NonAlloc
  nameWithType.vb: CachedCollection(Of T).GetContainingReversed_NonAlloc
  fullName.vb: TMPEffects.Tags.Collections.CachedCollection(Of T).GetContainingReversed_NonAlloc
- uid: TMPEffects.Tags.Collections.CachedCollection`1.StructReversedContainingEnumerable
  commentId: T:TMPEffects.Tags.Collections.CachedCollection`1.StructReversedContainingEnumerable
  parent: TMPEffects.Tags.Collections
  href: TMPEffects.Tags.Collections.CachedCollection-1.html
  name: CachedCollection<T>.StructReversedContainingEnumerable
  nameWithType: CachedCollection<T>.StructReversedContainingEnumerable
  fullName: TMPEffects.Tags.Collections.CachedCollection<T>.StructReversedContainingEnumerable
  nameWithType.vb: CachedCollection(Of T).StructReversedContainingEnumerable
  fullName.vb: TMPEffects.Tags.Collections.CachedCollection(Of T).StructReversedContainingEnumerable
  name.vb: CachedCollection(Of T).StructReversedContainingEnumerable
  spec.csharp:
  - uid: TMPEffects.Tags.Collections.CachedCollection`1
    name: CachedCollection
    href: TMPEffects.Tags.Collections.CachedCollection-1.html
  - name: <
  - name: T
  - name: '>'
  - name: .
  - uid: TMPEffects.Tags.Collections.CachedCollection`1.StructReversedContainingEnumerable
    name: StructReversedContainingEnumerable
    href: TMPEffects.Tags.Collections.CachedCollection-1.StructReversedContainingEnumerable.html
  spec.vb:
  - uid: TMPEffects.Tags.Collections.CachedCollection`1
    name: CachedCollection
    href: TMPEffects.Tags.Collections.CachedCollection-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: .
  - uid: TMPEffects.Tags.Collections.CachedCollection`1.StructReversedContainingEnumerable
    name: StructReversedContainingEnumerable
    href: TMPEffects.Tags.Collections.CachedCollection-1.StructReversedContainingEnumerable.html
- uid: TMPEffects.Tags.Collections.CachedCollection`1.GetEnumerator*
  commentId: Overload:TMPEffects.Tags.Collections.CachedCollection`1.GetEnumerator
  href: TMPEffects.Tags.Collections.CachedCollection-1.html#TMPEffects_Tags_Collections_CachedCollection_1_GetEnumerator
  name: GetEnumerator
  nameWithType: CachedCollection<T>.GetEnumerator
  fullName: TMPEffects.Tags.Collections.CachedCollection<T>.GetEnumerator
  nameWithType.vb: CachedCollection(Of T).GetEnumerator
  fullName.vb: TMPEffects.Tags.Collections.CachedCollection(Of T).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable{`0}.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable{`0}.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
