### YamlMime:ManagedReference
items:
- uid: TMPEffects.Tags.TMPEffectTagIndices
  commentId: T:TMPEffects.Tags.TMPEffectTagIndices
  id: TMPEffectTagIndices
  parent: TMPEffects.Tags
  children:
  - TMPEffects.Tags.TMPEffectTagIndices.#ctor(System.Int32,System.Int32,System.Int32)
  - TMPEffects.Tags.TMPEffectTagIndices.CompareTo(TMPEffects.Tags.TMPEffectTagIndices)
  - TMPEffects.Tags.TMPEffectTagIndices.ContainedIndices
  - TMPEffects.Tags.TMPEffectTagIndices.Contains(System.Int32)
  - TMPEffects.Tags.TMPEffectTagIndices.EndIndex
  - TMPEffects.Tags.TMPEffectTagIndices.Equals(System.Object)
  - TMPEffects.Tags.TMPEffectTagIndices.Equals(TMPEffects.Tags.TMPEffectTagIndices)
  - TMPEffects.Tags.TMPEffectTagIndices.GetHashCode
  - TMPEffects.Tags.TMPEffectTagIndices.IsOpen
  - TMPEffects.Tags.TMPEffectTagIndices.Length
  - TMPEffects.Tags.TMPEffectTagIndices.OrderAtIndex
  - TMPEffects.Tags.TMPEffectTagIndices.StartIndex
  - TMPEffects.Tags.TMPEffectTagIndices.op_Equality(TMPEffects.Tags.TMPEffectTagIndices,TMPEffects.Tags.TMPEffectTagIndices)
  - TMPEffects.Tags.TMPEffectTagIndices.op_GreaterThan(TMPEffects.Tags.TMPEffectTagIndices,TMPEffects.Tags.TMPEffectTagIndices)
  - TMPEffects.Tags.TMPEffectTagIndices.op_Inequality(TMPEffects.Tags.TMPEffectTagIndices,TMPEffects.Tags.TMPEffectTagIndices)
  - TMPEffects.Tags.TMPEffectTagIndices.op_LessThan(TMPEffects.Tags.TMPEffectTagIndices,TMPEffects.Tags.TMPEffectTagIndices)
  langs:
  - csharp
  - vb
  name: TMPEffectTagIndices
  nameWithType: TMPEffectTagIndices
  fullName: TMPEffects.Tags.TMPEffectTagIndices
  type: Struct
  source:
    remote:
      path: Runtime/Tags/TMPEffectTagIndices.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: TMPEffectTagIndices
    path: ../Assets/TMPEffects OLD/Runtime/Tags/TMPEffectTagIndices.cs
    startLine: 12
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags
  summary: >-
    The indices of an <xref href="TMPEffects.Tags.TMPEffectTag" data-throw-if-not-resolved="false"></xref>.<br />

    The indices can be regarded as a half-open interval of [<xref href="TMPEffects.Tags.TMPEffectTagIndices.StartIndex" data-throw-if-not-resolved="false"></xref>, <xref href="TMPEffects.Tags.TMPEffectTagIndices.EndIndex" data-throw-if-not-resolved="false"></xref>).<br />

    For example, an instance with <xref href="TMPEffects.Tags.TMPEffectTagIndices.StartIndex" data-throw-if-not-resolved="false"></xref> == 5 and <xref href="TMPEffects.Tags.TMPEffectTagIndices.EndIndex" data-throw-if-not-resolved="false"></xref> == 10 "contains" the indices 5, 6, 7, 8 and 9.
  example: []
  syntax:
    content: 'public struct TMPEffectTagIndices : IComparable<TMPEffectTagIndices>, IEquatable<TMPEffectTagIndices>'
    content.vb: Public Structure TMPEffectTagIndices Implements IComparable(Of TMPEffectTagIndices), IEquatable(Of TMPEffectTagIndices)
  implements:
  - System.IComparable{TMPEffects.Tags.TMPEffectTagIndices}
  - System.IEquatable{TMPEffects.Tags.TMPEffectTagIndices}
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
- uid: TMPEffects.Tags.TMPEffectTagIndices.StartIndex
  commentId: P:TMPEffects.Tags.TMPEffectTagIndices.StartIndex
  id: StartIndex
  parent: TMPEffects.Tags.TMPEffectTagIndices
  langs:
  - csharp
  - vb
  name: StartIndex
  nameWithType: TMPEffectTagIndices.StartIndex
  fullName: TMPEffects.Tags.TMPEffectTagIndices.StartIndex
  type: Property
  source:
    remote:
      path: Runtime/Tags/TMPEffectTagIndices.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: StartIndex
    path: ../Assets/TMPEffects OLD/Runtime/Tags/TMPEffectTagIndices.cs
    startLine: 17
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags
  summary: The (inclusive) start index of the tag.
  example: []
  syntax:
    content: public int StartIndex { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property StartIndex As Integer
  overload: TMPEffects.Tags.TMPEffectTagIndices.StartIndex*
- uid: TMPEffects.Tags.TMPEffectTagIndices.EndIndex
  commentId: P:TMPEffects.Tags.TMPEffectTagIndices.EndIndex
  id: EndIndex
  parent: TMPEffects.Tags.TMPEffectTagIndices
  langs:
  - csharp
  - vb
  name: EndIndex
  nameWithType: TMPEffectTagIndices.EndIndex
  fullName: TMPEffects.Tags.TMPEffectTagIndices.EndIndex
  type: Property
  source:
    remote:
      path: Runtime/Tags/TMPEffectTagIndices.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: EndIndex
    path: ../Assets/TMPEffects OLD/Runtime/Tags/TMPEffectTagIndices.cs
    startLine: 21
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags
  summary: The (exclusive) end index of the tag.
  example: []
  syntax:
    content: public int EndIndex { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property EndIndex As Integer
  overload: TMPEffects.Tags.TMPEffectTagIndices.EndIndex*
- uid: TMPEffects.Tags.TMPEffectTagIndices.OrderAtIndex
  commentId: P:TMPEffects.Tags.TMPEffectTagIndices.OrderAtIndex
  id: OrderAtIndex
  parent: TMPEffects.Tags.TMPEffectTagIndices
  langs:
  - csharp
  - vb
  name: OrderAtIndex
  nameWithType: TMPEffectTagIndices.OrderAtIndex
  fullName: TMPEffects.Tags.TMPEffectTagIndices.OrderAtIndex
  type: Property
  source:
    remote:
      path: Runtime/Tags/TMPEffectTagIndices.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: OrderAtIndex
    path: ../Assets/TMPEffects OLD/Runtime/Tags/TMPEffectTagIndices.cs
    startLine: 28
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags
  summary: >-
    The order at the start index.<br />

    If there are multiple tags with the same start index, this will define their order:<br />

    tags with lower order come first, tags with higher index come later.<br />

    Note that the order may have gaps (e.g. there are three tags at a given index, with order -5, 4 and 10 respectively).
  example: []
  syntax:
    content: public int OrderAtIndex { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property OrderAtIndex As Integer
  overload: TMPEffects.Tags.TMPEffectTagIndices.OrderAtIndex*
- uid: TMPEffects.Tags.TMPEffectTagIndices.IsOpen
  commentId: P:TMPEffects.Tags.TMPEffectTagIndices.IsOpen
  id: IsOpen
  parent: TMPEffects.Tags.TMPEffectTagIndices
  langs:
  - csharp
  - vb
  name: IsOpen
  nameWithType: TMPEffectTagIndices.IsOpen
  fullName: TMPEffects.Tags.TMPEffectTagIndices.IsOpen
  type: Property
  source:
    remote:
      path: Runtime/Tags/TMPEffectTagIndices.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: IsOpen
    path: ../Assets/TMPEffects OLD/Runtime/Tags/TMPEffectTagIndices.cs
    startLine: 34
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags
  summary: >-
    Whether the tag is open, meaning it is never closed and therefore does not have a defined end index;<br />

    the tag's index interval ranges from the <xref href="TMPEffects.Tags.TMPEffectTagIndices.StartIndex" data-throw-if-not-resolved="false"></xref> to the end of whatever text it is applied to.
  example: []
  syntax:
    content: public bool IsOpen { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsOpen As Boolean
  overload: TMPEffects.Tags.TMPEffectTagIndices.IsOpen*
- uid: TMPEffects.Tags.TMPEffectTagIndices.Length
  commentId: P:TMPEffects.Tags.TMPEffectTagIndices.Length
  id: Length
  parent: TMPEffects.Tags.TMPEffectTagIndices
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: TMPEffectTagIndices.Length
  fullName: TMPEffects.Tags.TMPEffectTagIndices.Length
  type: Property
  source:
    remote:
      path: Runtime/Tags/TMPEffectTagIndices.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: Length
    path: ../Assets/TMPEffects OLD/Runtime/Tags/TMPEffectTagIndices.cs
    startLine: 39
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags
  summary: >-
    The length of the interval, meaning the difference between <xref href="TMPEffects.Tags.TMPEffectTagIndices.EndIndex" data-throw-if-not-resolved="false"></xref> and <xref href="TMPEffects.Tags.TMPEffectTagIndices.StartIndex" data-throw-if-not-resolved="false"></xref>.<br />

    Is -1 if the tag is open.
  example: []
  syntax:
    content: public int Length { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Length As Integer
  overload: TMPEffects.Tags.TMPEffectTagIndices.Length*
- uid: TMPEffects.Tags.TMPEffectTagIndices.Contains(System.Int32)
  commentId: M:TMPEffects.Tags.TMPEffectTagIndices.Contains(System.Int32)
  id: Contains(System.Int32)
  parent: TMPEffects.Tags.TMPEffectTagIndices
  langs:
  - csharp
  - vb
  name: Contains(int)
  nameWithType: TMPEffectTagIndices.Contains(int)
  fullName: TMPEffects.Tags.TMPEffectTagIndices.Contains(int)
  type: Method
  source:
    remote:
      path: Runtime/Tags/TMPEffectTagIndices.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: Contains
    path: ../Assets/TMPEffects OLD/Runtime/Tags/TMPEffectTagIndices.cs
    startLine: 45
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags
  summary: Whether the indices contain the given index.
  example: []
  syntax:
    content: public bool Contains(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The index.
    return:
      type: System.Boolean
      description: true if the indices containg the given index; false otherwise.
    content.vb: Public Function Contains(index As Integer) As Boolean
  overload: TMPEffects.Tags.TMPEffectTagIndices.Contains*
  nameWithType.vb: TMPEffectTagIndices.Contains(Integer)
  fullName.vb: TMPEffects.Tags.TMPEffectTagIndices.Contains(Integer)
  name.vb: Contains(Integer)
- uid: TMPEffects.Tags.TMPEffectTagIndices.ContainedIndices
  commentId: P:TMPEffects.Tags.TMPEffectTagIndices.ContainedIndices
  id: ContainedIndices
  parent: TMPEffects.Tags.TMPEffectTagIndices
  langs:
  - csharp
  - vb
  name: ContainedIndices
  nameWithType: TMPEffectTagIndices.ContainedIndices
  fullName: TMPEffects.Tags.TMPEffectTagIndices.ContainedIndices
  type: Property
  source:
    remote:
      path: Runtime/Tags/TMPEffectTagIndices.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: ContainedIndices
    path: ../Assets/TMPEffects OLD/Runtime/Tags/TMPEffectTagIndices.cs
    startLine: 49
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags
  summary: Enumeration of all contained indices.
  example: []
  syntax:
    content: public IEnumerable<int> ContainedIndices { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Int32}
    content.vb: Public ReadOnly Property ContainedIndices As IEnumerable(Of Integer)
  overload: TMPEffects.Tags.TMPEffectTagIndices.ContainedIndices*
- uid: TMPEffects.Tags.TMPEffectTagIndices.#ctor(System.Int32,System.Int32,System.Int32)
  commentId: M:TMPEffects.Tags.TMPEffectTagIndices.#ctor(System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32)'
  parent: TMPEffects.Tags.TMPEffectTagIndices
  langs:
  - csharp
  - vb
  name: TMPEffectTagIndices(int, int, int)
  nameWithType: TMPEffectTagIndices.TMPEffectTagIndices(int, int, int)
  fullName: TMPEffects.Tags.TMPEffectTagIndices.TMPEffectTagIndices(int, int, int)
  type: Constructor
  source:
    remote:
      path: Runtime/Tags/TMPEffectTagIndices.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: .ctor
    path: ../Assets/TMPEffects OLD/Runtime/Tags/TMPEffectTagIndices.cs
    startLine: 64
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags
  syntax:
    content: public TMPEffectTagIndices(int startIndex, int endIndex, int orderAtIndex)
    parameters:
    - id: startIndex
      type: System.Int32
    - id: endIndex
      type: System.Int32
    - id: orderAtIndex
      type: System.Int32
    content.vb: Public Sub New(startIndex As Integer, endIndex As Integer, orderAtIndex As Integer)
  overload: TMPEffects.Tags.TMPEffectTagIndices.#ctor*
  nameWithType.vb: TMPEffectTagIndices.New(Integer, Integer, Integer)
  fullName.vb: TMPEffects.Tags.TMPEffectTagIndices.New(Integer, Integer, Integer)
  name.vb: New(Integer, Integer, Integer)
- uid: TMPEffects.Tags.TMPEffectTagIndices.CompareTo(TMPEffects.Tags.TMPEffectTagIndices)
  commentId: M:TMPEffects.Tags.TMPEffectTagIndices.CompareTo(TMPEffects.Tags.TMPEffectTagIndices)
  id: CompareTo(TMPEffects.Tags.TMPEffectTagIndices)
  parent: TMPEffects.Tags.TMPEffectTagIndices
  langs:
  - csharp
  - vb
  name: CompareTo(TMPEffectTagIndices)
  nameWithType: TMPEffectTagIndices.CompareTo(TMPEffectTagIndices)
  fullName: TMPEffects.Tags.TMPEffectTagIndices.CompareTo(TMPEffects.Tags.TMPEffectTagIndices)
  type: Method
  source:
    remote:
      path: Runtime/Tags/TMPEffectTagIndices.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: CompareTo
    path: ../Assets/TMPEffects OLD/Runtime/Tags/TMPEffectTagIndices.cs
    startLine: 84
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags
  summary: >-
    Compares this instance to another instance of <xref href="TMPEffects.Tags.TMPEffectTagIndices" data-throw-if-not-resolved="false"></xref>.<br />

    First compares <xref href="TMPEffects.Tags.TMPEffectTagIndices.StartIndex" data-throw-if-not-resolved="false"></xref>. If those are equal, compares <xref href="TMPEffects.Tags.TMPEffectTagIndices.OrderAtIndex" data-throw-if-not-resolved="false"></xref>. The <xref href="TMPEffects.Tags.TMPEffectTagIndices.EndIndex" data-throw-if-not-resolved="false"></xref> is not considered.
  example: []
  syntax:
    content: public int CompareTo(TMPEffectTagIndices other)
    parameters:
    - id: other
      type: TMPEffects.Tags.TMPEffectTagIndices
      description: The instance to compare this instance to.
    return:
      type: System.Int32
      description: >-
        Less than zero =&gt; This instance precedes <code class="paramref">other</code> in the sort order.<br /> 

        Zero =&gt; This instance occurs in the same position in the sort order as <code class="paramref">other</code>.<br />

        Greater than zero =&gt; This instance follows <code class="paramref">other</code> in the sort order.
    content.vb: Public Function CompareTo(other As TMPEffectTagIndices) As Integer
  overload: TMPEffects.Tags.TMPEffectTagIndices.CompareTo*
  implements:
  - System.IComparable{TMPEffects.Tags.TMPEffectTagIndices}.CompareTo(TMPEffects.Tags.TMPEffectTagIndices)
- uid: TMPEffects.Tags.TMPEffectTagIndices.op_Equality(TMPEffects.Tags.TMPEffectTagIndices,TMPEffects.Tags.TMPEffectTagIndices)
  commentId: M:TMPEffects.Tags.TMPEffectTagIndices.op_Equality(TMPEffects.Tags.TMPEffectTagIndices,TMPEffects.Tags.TMPEffectTagIndices)
  id: op_Equality(TMPEffects.Tags.TMPEffectTagIndices,TMPEffects.Tags.TMPEffectTagIndices)
  parent: TMPEffects.Tags.TMPEffectTagIndices
  langs:
  - csharp
  - vb
  name: operator ==(TMPEffectTagIndices, TMPEffectTagIndices)
  nameWithType: TMPEffectTagIndices.operator ==(TMPEffectTagIndices, TMPEffectTagIndices)
  fullName: TMPEffects.Tags.TMPEffectTagIndices.operator ==(TMPEffects.Tags.TMPEffectTagIndices, TMPEffects.Tags.TMPEffectTagIndices)
  type: Operator
  source:
    remote:
      path: Runtime/Tags/TMPEffectTagIndices.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: op_Equality
    path: ../Assets/TMPEffects OLD/Runtime/Tags/TMPEffectTagIndices.cs
    startLine: 91
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags
  syntax:
    content: public static bool operator ==(TMPEffectTagIndices c1, TMPEffectTagIndices c2)
    parameters:
    - id: c1
      type: TMPEffects.Tags.TMPEffectTagIndices
    - id: c2
      type: TMPEffects.Tags.TMPEffectTagIndices
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(c1 As TMPEffectTagIndices, c2 As TMPEffectTagIndices) As Boolean
  overload: TMPEffects.Tags.TMPEffectTagIndices.op_Equality*
  nameWithType.vb: TMPEffectTagIndices.=(TMPEffectTagIndices, TMPEffectTagIndices)
  fullName.vb: TMPEffects.Tags.TMPEffectTagIndices.=(TMPEffects.Tags.TMPEffectTagIndices, TMPEffects.Tags.TMPEffectTagIndices)
  name.vb: =(TMPEffectTagIndices, TMPEffectTagIndices)
- uid: TMPEffects.Tags.TMPEffectTagIndices.op_Inequality(TMPEffects.Tags.TMPEffectTagIndices,TMPEffects.Tags.TMPEffectTagIndices)
  commentId: M:TMPEffects.Tags.TMPEffectTagIndices.op_Inequality(TMPEffects.Tags.TMPEffectTagIndices,TMPEffects.Tags.TMPEffectTagIndices)
  id: op_Inequality(TMPEffects.Tags.TMPEffectTagIndices,TMPEffects.Tags.TMPEffectTagIndices)
  parent: TMPEffects.Tags.TMPEffectTagIndices
  langs:
  - csharp
  - vb
  name: operator !=(TMPEffectTagIndices, TMPEffectTagIndices)
  nameWithType: TMPEffectTagIndices.operator !=(TMPEffectTagIndices, TMPEffectTagIndices)
  fullName: TMPEffects.Tags.TMPEffectTagIndices.operator !=(TMPEffects.Tags.TMPEffectTagIndices, TMPEffects.Tags.TMPEffectTagIndices)
  type: Operator
  source:
    remote:
      path: Runtime/Tags/TMPEffectTagIndices.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: op_Inequality
    path: ../Assets/TMPEffects OLD/Runtime/Tags/TMPEffectTagIndices.cs
    startLine: 96
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags
  syntax:
    content: public static bool operator !=(TMPEffectTagIndices c1, TMPEffectTagIndices c2)
    parameters:
    - id: c1
      type: TMPEffects.Tags.TMPEffectTagIndices
    - id: c2
      type: TMPEffects.Tags.TMPEffectTagIndices
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(c1 As TMPEffectTagIndices, c2 As TMPEffectTagIndices) As Boolean
  overload: TMPEffects.Tags.TMPEffectTagIndices.op_Inequality*
  nameWithType.vb: TMPEffectTagIndices.<>(TMPEffectTagIndices, TMPEffectTagIndices)
  fullName.vb: TMPEffects.Tags.TMPEffectTagIndices.<>(TMPEffects.Tags.TMPEffectTagIndices, TMPEffects.Tags.TMPEffectTagIndices)
  name.vb: <>(TMPEffectTagIndices, TMPEffectTagIndices)
- uid: TMPEffects.Tags.TMPEffectTagIndices.op_GreaterThan(TMPEffects.Tags.TMPEffectTagIndices,TMPEffects.Tags.TMPEffectTagIndices)
  commentId: M:TMPEffects.Tags.TMPEffectTagIndices.op_GreaterThan(TMPEffects.Tags.TMPEffectTagIndices,TMPEffects.Tags.TMPEffectTagIndices)
  id: op_GreaterThan(TMPEffects.Tags.TMPEffectTagIndices,TMPEffects.Tags.TMPEffectTagIndices)
  parent: TMPEffects.Tags.TMPEffectTagIndices
  langs:
  - csharp
  - vb
  name: operator >(TMPEffectTagIndices, TMPEffectTagIndices)
  nameWithType: TMPEffectTagIndices.operator >(TMPEffectTagIndices, TMPEffectTagIndices)
  fullName: TMPEffects.Tags.TMPEffectTagIndices.operator >(TMPEffects.Tags.TMPEffectTagIndices, TMPEffects.Tags.TMPEffectTagIndices)
  type: Operator
  source:
    remote:
      path: Runtime/Tags/TMPEffectTagIndices.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: op_GreaterThan
    path: ../Assets/TMPEffects OLD/Runtime/Tags/TMPEffectTagIndices.cs
    startLine: 101
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags
  syntax:
    content: public static bool operator >(TMPEffectTagIndices c1, TMPEffectTagIndices c2)
    parameters:
    - id: c1
      type: TMPEffects.Tags.TMPEffectTagIndices
    - id: c2
      type: TMPEffects.Tags.TMPEffectTagIndices
    return:
      type: System.Boolean
    content.vb: Public Shared Operator >(c1 As TMPEffectTagIndices, c2 As TMPEffectTagIndices) As Boolean
  overload: TMPEffects.Tags.TMPEffectTagIndices.op_GreaterThan*
  nameWithType.vb: TMPEffectTagIndices.>(TMPEffectTagIndices, TMPEffectTagIndices)
  fullName.vb: TMPEffects.Tags.TMPEffectTagIndices.>(TMPEffects.Tags.TMPEffectTagIndices, TMPEffects.Tags.TMPEffectTagIndices)
  name.vb: '>(TMPEffectTagIndices, TMPEffectTagIndices)'
- uid: TMPEffects.Tags.TMPEffectTagIndices.op_LessThan(TMPEffects.Tags.TMPEffectTagIndices,TMPEffects.Tags.TMPEffectTagIndices)
  commentId: M:TMPEffects.Tags.TMPEffectTagIndices.op_LessThan(TMPEffects.Tags.TMPEffectTagIndices,TMPEffects.Tags.TMPEffectTagIndices)
  id: op_LessThan(TMPEffects.Tags.TMPEffectTagIndices,TMPEffects.Tags.TMPEffectTagIndices)
  parent: TMPEffects.Tags.TMPEffectTagIndices
  langs:
  - csharp
  - vb
  name: operator <(TMPEffectTagIndices, TMPEffectTagIndices)
  nameWithType: TMPEffectTagIndices.operator <(TMPEffectTagIndices, TMPEffectTagIndices)
  fullName: TMPEffects.Tags.TMPEffectTagIndices.operator <(TMPEffects.Tags.TMPEffectTagIndices, TMPEffects.Tags.TMPEffectTagIndices)
  type: Operator
  source:
    remote:
      path: Runtime/Tags/TMPEffectTagIndices.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: op_LessThan
    path: ../Assets/TMPEffects OLD/Runtime/Tags/TMPEffectTagIndices.cs
    startLine: 106
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags
  syntax:
    content: public static bool operator <(TMPEffectTagIndices c1, TMPEffectTagIndices c2)
    parameters:
    - id: c1
      type: TMPEffects.Tags.TMPEffectTagIndices
    - id: c2
      type: TMPEffects.Tags.TMPEffectTagIndices
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <(c1 As TMPEffectTagIndices, c2 As TMPEffectTagIndices) As Boolean
  overload: TMPEffects.Tags.TMPEffectTagIndices.op_LessThan*
  nameWithType.vb: TMPEffectTagIndices.<(TMPEffectTagIndices, TMPEffectTagIndices)
  fullName.vb: TMPEffects.Tags.TMPEffectTagIndices.<(TMPEffects.Tags.TMPEffectTagIndices, TMPEffects.Tags.TMPEffectTagIndices)
  name.vb: <(TMPEffectTagIndices, TMPEffectTagIndices)
- uid: TMPEffects.Tags.TMPEffectTagIndices.Equals(System.Object)
  commentId: M:TMPEffects.Tags.TMPEffectTagIndices.Equals(System.Object)
  id: Equals(System.Object)
  parent: TMPEffects.Tags.TMPEffectTagIndices
  langs:
  - csharp
  - vb
  name: Equals(object)
  nameWithType: TMPEffectTagIndices.Equals(object)
  fullName: TMPEffects.Tags.TMPEffectTagIndices.Equals(object)
  type: Method
  source:
    remote:
      path: Runtime/Tags/TMPEffectTagIndices.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: Equals
    path: ../Assets/TMPEffects OLD/Runtime/Tags/TMPEffectTagIndices.cs
    startLine: 111
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: TMPEffects.Tags.TMPEffectTagIndices.Equals*
  nameWithType.vb: TMPEffectTagIndices.Equals(Object)
  fullName.vb: TMPEffects.Tags.TMPEffectTagIndices.Equals(Object)
  name.vb: Equals(Object)
- uid: TMPEffects.Tags.TMPEffectTagIndices.Equals(TMPEffects.Tags.TMPEffectTagIndices)
  commentId: M:TMPEffects.Tags.TMPEffectTagIndices.Equals(TMPEffects.Tags.TMPEffectTagIndices)
  id: Equals(TMPEffects.Tags.TMPEffectTagIndices)
  parent: TMPEffects.Tags.TMPEffectTagIndices
  langs:
  - csharp
  - vb
  name: Equals(TMPEffectTagIndices)
  nameWithType: TMPEffectTagIndices.Equals(TMPEffectTagIndices)
  fullName: TMPEffects.Tags.TMPEffectTagIndices.Equals(TMPEffects.Tags.TMPEffectTagIndices)
  type: Method
  source:
    remote:
      path: Runtime/Tags/TMPEffectTagIndices.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: Equals
    path: ../Assets/TMPEffects OLD/Runtime/Tags/TMPEffectTagIndices.cs
    startLine: 119
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags
  example: []
  syntax:
    content: public bool Equals(TMPEffectTagIndices other)
    parameters:
    - id: other
      type: TMPEffects.Tags.TMPEffectTagIndices
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As TMPEffectTagIndices) As Boolean
  overload: TMPEffects.Tags.TMPEffectTagIndices.Equals*
  implements:
  - System.IEquatable{TMPEffects.Tags.TMPEffectTagIndices}.Equals(TMPEffects.Tags.TMPEffectTagIndices)
- uid: TMPEffects.Tags.TMPEffectTagIndices.GetHashCode
  commentId: M:TMPEffects.Tags.TMPEffectTagIndices.GetHashCode
  id: GetHashCode
  parent: TMPEffects.Tags.TMPEffectTagIndices
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: TMPEffectTagIndices.GetHashCode()
  fullName: TMPEffects.Tags.TMPEffectTagIndices.GetHashCode()
  type: Method
  source:
    remote:
      path: Runtime/Tags/TMPEffectTagIndices.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: GetHashCode
    path: ../Assets/TMPEffects OLD/Runtime/Tags/TMPEffectTagIndices.cs
    startLine: 124
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Tags
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.ValueType.GetHashCode
  overload: TMPEffects.Tags.TMPEffectTagIndices.GetHashCode*
references:
- uid: TMPEffects.Tags.TMPEffectTag
  commentId: T:TMPEffects.Tags.TMPEffectTag
  parent: TMPEffects.Tags
  href: TMPEffects.Tags.TMPEffectTag.html
  name: TMPEffectTag
  nameWithType: TMPEffectTag
  fullName: TMPEffects.Tags.TMPEffectTag
- uid: TMPEffects.Tags.TMPEffectTagIndices.StartIndex
  commentId: P:TMPEffects.Tags.TMPEffectTagIndices.StartIndex
  href: TMPEffects.Tags.TMPEffectTagIndices.html#TMPEffects_Tags_TMPEffectTagIndices_StartIndex
  name: StartIndex
  nameWithType: TMPEffectTagIndices.StartIndex
  fullName: TMPEffects.Tags.TMPEffectTagIndices.StartIndex
- uid: TMPEffects.Tags.TMPEffectTagIndices.EndIndex
  commentId: P:TMPEffects.Tags.TMPEffectTagIndices.EndIndex
  href: TMPEffects.Tags.TMPEffectTagIndices.html#TMPEffects_Tags_TMPEffectTagIndices_EndIndex
  name: EndIndex
  nameWithType: TMPEffectTagIndices.EndIndex
  fullName: TMPEffects.Tags.TMPEffectTagIndices.EndIndex
- uid: TMPEffects.Tags
  commentId: N:TMPEffects.Tags
  href: TMPEffects.html
  name: TMPEffects.Tags
  nameWithType: TMPEffects.Tags
  fullName: TMPEffects.Tags
  spec.csharp:
  - uid: TMPEffects
    name: TMPEffects
    href: TMPEffects.html
  - name: .
  - uid: TMPEffects.Tags
    name: Tags
    href: TMPEffects.Tags.html
  spec.vb:
  - uid: TMPEffects
    name: TMPEffects
    href: TMPEffects.html
  - name: .
  - uid: TMPEffects.Tags
    name: Tags
    href: TMPEffects.Tags.html
- uid: System.IComparable{TMPEffects.Tags.TMPEffectTagIndices}
  commentId: T:System.IComparable{TMPEffects.Tags.TMPEffectTagIndices}
  parent: System
  definition: System.IComparable`1
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  name: IComparable<TMPEffectTagIndices>
  nameWithType: IComparable<TMPEffectTagIndices>
  fullName: System.IComparable<TMPEffects.Tags.TMPEffectTagIndices>
  nameWithType.vb: IComparable(Of TMPEffectTagIndices)
  fullName.vb: System.IComparable(Of TMPEffects.Tags.TMPEffectTagIndices)
  name.vb: IComparable(Of TMPEffectTagIndices)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: <
  - uid: TMPEffects.Tags.TMPEffectTagIndices
    name: TMPEffectTagIndices
    href: TMPEffects.Tags.TMPEffectTagIndices.html
  - name: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TMPEffects.Tags.TMPEffectTagIndices
    name: TMPEffectTagIndices
    href: TMPEffects.Tags.TMPEffectTagIndices.html
  - name: )
- uid: System.IEquatable{TMPEffects.Tags.TMPEffectTagIndices}
  commentId: T:System.IEquatable{TMPEffects.Tags.TMPEffectTagIndices}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<TMPEffectTagIndices>
  nameWithType: IEquatable<TMPEffectTagIndices>
  fullName: System.IEquatable<TMPEffects.Tags.TMPEffectTagIndices>
  nameWithType.vb: IEquatable(Of TMPEffectTagIndices)
  fullName.vb: System.IEquatable(Of TMPEffects.Tags.TMPEffectTagIndices)
  name.vb: IEquatable(Of TMPEffectTagIndices)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - uid: TMPEffects.Tags.TMPEffectTagIndices
    name: TMPEffectTagIndices
    href: TMPEffects.Tags.TMPEffectTagIndices.html
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TMPEffects.Tags.TMPEffectTagIndices
    name: TMPEffectTagIndices
    href: TMPEffects.Tags.TMPEffectTagIndices.html
  - name: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: TMPEffects.Tags.TMPEffectTagIndices.StartIndex*
  commentId: Overload:TMPEffects.Tags.TMPEffectTagIndices.StartIndex
  href: TMPEffects.Tags.TMPEffectTagIndices.html#TMPEffects_Tags_TMPEffectTagIndices_StartIndex
  name: StartIndex
  nameWithType: TMPEffectTagIndices.StartIndex
  fullName: TMPEffects.Tags.TMPEffectTagIndices.StartIndex
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: TMPEffects.Tags.TMPEffectTagIndices.EndIndex*
  commentId: Overload:TMPEffects.Tags.TMPEffectTagIndices.EndIndex
  href: TMPEffects.Tags.TMPEffectTagIndices.html#TMPEffects_Tags_TMPEffectTagIndices_EndIndex
  name: EndIndex
  nameWithType: TMPEffectTagIndices.EndIndex
  fullName: TMPEffects.Tags.TMPEffectTagIndices.EndIndex
- uid: TMPEffects.Tags.TMPEffectTagIndices.OrderAtIndex*
  commentId: Overload:TMPEffects.Tags.TMPEffectTagIndices.OrderAtIndex
  href: TMPEffects.Tags.TMPEffectTagIndices.html#TMPEffects_Tags_TMPEffectTagIndices_OrderAtIndex
  name: OrderAtIndex
  nameWithType: TMPEffectTagIndices.OrderAtIndex
  fullName: TMPEffects.Tags.TMPEffectTagIndices.OrderAtIndex
- uid: TMPEffects.Tags.TMPEffectTagIndices.IsOpen*
  commentId: Overload:TMPEffects.Tags.TMPEffectTagIndices.IsOpen
  href: TMPEffects.Tags.TMPEffectTagIndices.html#TMPEffects_Tags_TMPEffectTagIndices_IsOpen
  name: IsOpen
  nameWithType: TMPEffectTagIndices.IsOpen
  fullName: TMPEffects.Tags.TMPEffectTagIndices.IsOpen
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TMPEffects.Tags.TMPEffectTagIndices.Length*
  commentId: Overload:TMPEffects.Tags.TMPEffectTagIndices.Length
  href: TMPEffects.Tags.TMPEffectTagIndices.html#TMPEffects_Tags_TMPEffectTagIndices_Length
  name: Length
  nameWithType: TMPEffectTagIndices.Length
  fullName: TMPEffects.Tags.TMPEffectTagIndices.Length
- uid: TMPEffects.Tags.TMPEffectTagIndices.Contains*
  commentId: Overload:TMPEffects.Tags.TMPEffectTagIndices.Contains
  href: TMPEffects.Tags.TMPEffectTagIndices.html#TMPEffects_Tags_TMPEffectTagIndices_Contains_System_Int32_
  name: Contains
  nameWithType: TMPEffectTagIndices.Contains
  fullName: TMPEffects.Tags.TMPEffectTagIndices.Contains
- uid: TMPEffects.Tags.TMPEffectTagIndices.ContainedIndices*
  commentId: Overload:TMPEffects.Tags.TMPEffectTagIndices.ContainedIndices
  href: TMPEffects.Tags.TMPEffectTagIndices.html#TMPEffects_Tags_TMPEffectTagIndices_ContainedIndices
  name: ContainedIndices
  nameWithType: TMPEffectTagIndices.ContainedIndices
  fullName: TMPEffects.Tags.TMPEffectTagIndices.ContainedIndices
- uid: System.Collections.Generic.IEnumerable{System.Int32}
  commentId: T:System.Collections.Generic.IEnumerable{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<int>
  nameWithType: IEnumerable<int>
  fullName: System.Collections.Generic.IEnumerable<int>
  nameWithType.vb: IEnumerable(Of Integer)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Integer)
  name.vb: IEnumerable(Of Integer)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: TMPEffects.Tags.TMPEffectTagIndices.#ctor*
  commentId: Overload:TMPEffects.Tags.TMPEffectTagIndices.#ctor
  href: TMPEffects.Tags.TMPEffectTagIndices.html#TMPEffects_Tags_TMPEffectTagIndices__ctor_System_Int32_System_Int32_System_Int32_
  name: TMPEffectTagIndices
  nameWithType: TMPEffectTagIndices.TMPEffectTagIndices
  fullName: TMPEffects.Tags.TMPEffectTagIndices.TMPEffectTagIndices
  nameWithType.vb: TMPEffectTagIndices.New
  fullName.vb: TMPEffects.Tags.TMPEffectTagIndices.New
  name.vb: New
- uid: TMPEffects.Tags.TMPEffectTagIndices
  commentId: T:TMPEffects.Tags.TMPEffectTagIndices
  parent: TMPEffects.Tags
  href: TMPEffects.Tags.TMPEffectTagIndices.html
  name: TMPEffectTagIndices
  nameWithType: TMPEffectTagIndices
  fullName: TMPEffects.Tags.TMPEffectTagIndices
- uid: TMPEffects.Tags.TMPEffectTagIndices.OrderAtIndex
  commentId: P:TMPEffects.Tags.TMPEffectTagIndices.OrderAtIndex
  href: TMPEffects.Tags.TMPEffectTagIndices.html#TMPEffects_Tags_TMPEffectTagIndices_OrderAtIndex
  name: OrderAtIndex
  nameWithType: TMPEffectTagIndices.OrderAtIndex
  fullName: TMPEffects.Tags.TMPEffectTagIndices.OrderAtIndex
- uid: TMPEffects.Tags.TMPEffectTagIndices.CompareTo*
  commentId: Overload:TMPEffects.Tags.TMPEffectTagIndices.CompareTo
  href: TMPEffects.Tags.TMPEffectTagIndices.html#TMPEffects_Tags_TMPEffectTagIndices_CompareTo_TMPEffects_Tags_TMPEffectTagIndices_
  name: CompareTo
  nameWithType: TMPEffectTagIndices.CompareTo
  fullName: TMPEffects.Tags.TMPEffectTagIndices.CompareTo
- uid: System.IComparable{TMPEffects.Tags.TMPEffectTagIndices}.CompareTo(TMPEffects.Tags.TMPEffectTagIndices)
  commentId: M:System.IComparable{TMPEffects.Tags.TMPEffectTagIndices}.CompareTo(TMPEffects.Tags.TMPEffectTagIndices)
  parent: System.IComparable{TMPEffects.Tags.TMPEffectTagIndices}
  definition: System.IComparable`1.CompareTo(`0)
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  name: CompareTo(TMPEffectTagIndices)
  nameWithType: IComparable<TMPEffectTagIndices>.CompareTo(TMPEffectTagIndices)
  fullName: System.IComparable<TMPEffects.Tags.TMPEffectTagIndices>.CompareTo(TMPEffects.Tags.TMPEffectTagIndices)
  nameWithType.vb: IComparable(Of TMPEffectTagIndices).CompareTo(TMPEffectTagIndices)
  fullName.vb: System.IComparable(Of TMPEffects.Tags.TMPEffectTagIndices).CompareTo(TMPEffects.Tags.TMPEffectTagIndices)
  spec.csharp:
  - uid: System.IComparable{TMPEffects.Tags.TMPEffectTagIndices}.CompareTo(TMPEffects.Tags.TMPEffectTagIndices)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - uid: TMPEffects.Tags.TMPEffectTagIndices
    name: TMPEffectTagIndices
    href: TMPEffects.Tags.TMPEffectTagIndices.html
  - name: )
  spec.vb:
  - uid: System.IComparable{TMPEffects.Tags.TMPEffectTagIndices}.CompareTo(TMPEffects.Tags.TMPEffectTagIndices)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - uid: TMPEffects.Tags.TMPEffectTagIndices
    name: TMPEffectTagIndices
    href: TMPEffects.Tags.TMPEffectTagIndices.html
  - name: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icomparable-1.compareto
  - name: (
  - name: T
  - name: )
- uid: TMPEffects.Tags.TMPEffectTagIndices.op_Equality*
  commentId: Overload:TMPEffects.Tags.TMPEffectTagIndices.op_Equality
  href: TMPEffects.Tags.TMPEffectTagIndices.html#TMPEffects_Tags_TMPEffectTagIndices_op_Equality_TMPEffects_Tags_TMPEffectTagIndices_TMPEffects_Tags_TMPEffectTagIndices_
  name: operator ==
  nameWithType: TMPEffectTagIndices.operator ==
  fullName: TMPEffects.Tags.TMPEffectTagIndices.operator ==
  nameWithType.vb: TMPEffectTagIndices.=
  fullName.vb: TMPEffects.Tags.TMPEffectTagIndices.=
  name.vb: =
  spec.csharp:
  - name: operator
  - name: " "
  - uid: TMPEffects.Tags.TMPEffectTagIndices.op_Equality*
    name: ==
    href: TMPEffects.Tags.TMPEffectTagIndices.html#TMPEffects_Tags_TMPEffectTagIndices_op_Equality_TMPEffects_Tags_TMPEffectTagIndices_TMPEffects_Tags_TMPEffectTagIndices_
- uid: TMPEffects.Tags.TMPEffectTagIndices.op_Inequality*
  commentId: Overload:TMPEffects.Tags.TMPEffectTagIndices.op_Inequality
  href: TMPEffects.Tags.TMPEffectTagIndices.html#TMPEffects_Tags_TMPEffectTagIndices_op_Inequality_TMPEffects_Tags_TMPEffectTagIndices_TMPEffects_Tags_TMPEffectTagIndices_
  name: operator !=
  nameWithType: TMPEffectTagIndices.operator !=
  fullName: TMPEffects.Tags.TMPEffectTagIndices.operator !=
  nameWithType.vb: TMPEffectTagIndices.<>
  fullName.vb: TMPEffects.Tags.TMPEffectTagIndices.<>
  name.vb: <>
  spec.csharp:
  - name: operator
  - name: " "
  - uid: TMPEffects.Tags.TMPEffectTagIndices.op_Inequality*
    name: '!='
    href: TMPEffects.Tags.TMPEffectTagIndices.html#TMPEffects_Tags_TMPEffectTagIndices_op_Inequality_TMPEffects_Tags_TMPEffectTagIndices_TMPEffects_Tags_TMPEffectTagIndices_
- uid: TMPEffects.Tags.TMPEffectTagIndices.op_GreaterThan*
  commentId: Overload:TMPEffects.Tags.TMPEffectTagIndices.op_GreaterThan
  href: TMPEffects.Tags.TMPEffectTagIndices.html#TMPEffects_Tags_TMPEffectTagIndices_op_GreaterThan_TMPEffects_Tags_TMPEffectTagIndices_TMPEffects_Tags_TMPEffectTagIndices_
  name: operator >
  nameWithType: TMPEffectTagIndices.operator >
  fullName: TMPEffects.Tags.TMPEffectTagIndices.operator >
  nameWithType.vb: TMPEffectTagIndices.>
  fullName.vb: TMPEffects.Tags.TMPEffectTagIndices.>
  name.vb: '>'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: TMPEffects.Tags.TMPEffectTagIndices.op_GreaterThan*
    name: '>'
    href: TMPEffects.Tags.TMPEffectTagIndices.html#TMPEffects_Tags_TMPEffectTagIndices_op_GreaterThan_TMPEffects_Tags_TMPEffectTagIndices_TMPEffects_Tags_TMPEffectTagIndices_
- uid: TMPEffects.Tags.TMPEffectTagIndices.op_LessThan*
  commentId: Overload:TMPEffects.Tags.TMPEffectTagIndices.op_LessThan
  href: TMPEffects.Tags.TMPEffectTagIndices.html#TMPEffects_Tags_TMPEffectTagIndices_op_LessThan_TMPEffects_Tags_TMPEffectTagIndices_TMPEffects_Tags_TMPEffectTagIndices_
  name: operator <
  nameWithType: TMPEffectTagIndices.operator <
  fullName: TMPEffects.Tags.TMPEffectTagIndices.operator <
  nameWithType.vb: TMPEffectTagIndices.<
  fullName.vb: TMPEffects.Tags.TMPEffectTagIndices.<
  name.vb: <
  spec.csharp:
  - name: operator
  - name: " "
  - uid: TMPEffects.Tags.TMPEffectTagIndices.op_LessThan*
    name: <
    href: TMPEffects.Tags.TMPEffectTagIndices.html#TMPEffects_Tags_TMPEffectTagIndices_op_LessThan_TMPEffects_Tags_TMPEffectTagIndices_TMPEffects_Tags_TMPEffectTagIndices_
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: TMPEffects.Tags.TMPEffectTagIndices.Equals*
  commentId: Overload:TMPEffects.Tags.TMPEffectTagIndices.Equals
  href: TMPEffects.Tags.TMPEffectTagIndices.html#TMPEffects_Tags_TMPEffectTagIndices_Equals_System_Object_
  name: Equals
  nameWithType: TMPEffectTagIndices.Equals
  fullName: TMPEffects.Tags.TMPEffectTagIndices.Equals
- uid: System.IEquatable{TMPEffects.Tags.TMPEffectTagIndices}.Equals(TMPEffects.Tags.TMPEffectTagIndices)
  commentId: M:System.IEquatable{TMPEffects.Tags.TMPEffectTagIndices}.Equals(TMPEffects.Tags.TMPEffectTagIndices)
  parent: System.IEquatable{TMPEffects.Tags.TMPEffectTagIndices}
  definition: System.IEquatable`1.Equals(`0)
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(TMPEffectTagIndices)
  nameWithType: IEquatable<TMPEffectTagIndices>.Equals(TMPEffectTagIndices)
  fullName: System.IEquatable<TMPEffects.Tags.TMPEffectTagIndices>.Equals(TMPEffects.Tags.TMPEffectTagIndices)
  nameWithType.vb: IEquatable(Of TMPEffectTagIndices).Equals(TMPEffectTagIndices)
  fullName.vb: System.IEquatable(Of TMPEffects.Tags.TMPEffectTagIndices).Equals(TMPEffects.Tags.TMPEffectTagIndices)
  spec.csharp:
  - uid: System.IEquatable{TMPEffects.Tags.TMPEffectTagIndices}.Equals(TMPEffects.Tags.TMPEffectTagIndices)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: TMPEffects.Tags.TMPEffectTagIndices
    name: TMPEffectTagIndices
    href: TMPEffects.Tags.TMPEffectTagIndices.html
  - name: )
  spec.vb:
  - uid: System.IEquatable{TMPEffects.Tags.TMPEffectTagIndices}.Equals(TMPEffects.Tags.TMPEffectTagIndices)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: TMPEffects.Tags.TMPEffectTagIndices
    name: TMPEffectTagIndices
    href: TMPEffects.Tags.TMPEffectTagIndices.html
  - name: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: TMPEffects.Tags.TMPEffectTagIndices.GetHashCode*
  commentId: Overload:TMPEffects.Tags.TMPEffectTagIndices.GetHashCode
  href: TMPEffects.Tags.TMPEffectTagIndices.html#TMPEffects_Tags_TMPEffectTagIndices_GetHashCode
  name: GetHashCode
  nameWithType: TMPEffectTagIndices.GetHashCode
  fullName: TMPEffects.Tags.TMPEffectTagIndices.GetHashCode
