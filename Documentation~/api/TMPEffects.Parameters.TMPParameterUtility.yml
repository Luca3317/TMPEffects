### YamlMime:ManagedReference
items:
- uid: TMPEffects.Parameters.TMPParameterUtility
  commentId: T:TMPEffects.Parameters.TMPParameterUtility
  id: TMPParameterUtility
  parent: TMPEffects.Parameters
  children:
  - TMPEffects.Parameters.TMPParameterUtility.HasArrayParameter(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String[])
  - TMPEffects.Parameters.TMPParameterUtility.HasArrayParameter``1(System.Collections.Generic.IDictionary{System.String,System.String},TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,``0,TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean},System.String,System.String[])
  - TMPEffects.Parameters.TMPParameterUtility.HasArrayParameter``1(System.Collections.Generic.IDictionary{System.String,System.String},TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,``0,TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean},TMPEffects.Databases.ITMPKeywordDatabase,System.String,System.String[])
  - TMPEffects.Parameters.TMPParameterUtility.HasNonArrayParameter(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String[])
  - TMPEffects.Parameters.TMPParameterUtility.HasNonArrayParameter``1(System.Collections.Generic.IDictionary{System.String,System.String},TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,``0,TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean},System.String,System.String[])
  - TMPEffects.Parameters.TMPParameterUtility.HasNonArrayParameter``1(System.Collections.Generic.IDictionary{System.String,System.String},TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,``0,TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean},TMPEffects.Databases.ITMPKeywordDatabase,System.String,System.String[])
  - TMPEffects.Parameters.TMPParameterUtility.ParameterDefined(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String[])
  - TMPEffects.Parameters.TMPParameterUtility.TryGetArrayParameter(System.String[]@,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String[])
  - TMPEffects.Parameters.TMPParameterUtility.TryGetArrayParameter``1(``0[]@,System.Collections.Generic.IDictionary{System.String,System.String},TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,``0,TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean},System.String,System.String[])
  - TMPEffects.Parameters.TMPParameterUtility.TryGetArrayParameter``1(``0[]@,System.Collections.Generic.IDictionary{System.String,System.String},TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,``0,TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean},TMPEffects.Databases.ITMPKeywordDatabase,System.String,System.String[])
  - TMPEffects.Parameters.TMPParameterUtility.TryGetDefinedParameter(System.String@,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String[])
  langs:
  - csharp
  - vb
  name: TMPParameterUtility
  nameWithType: TMPParameterUtility
  fullName: TMPEffects.Parameters.TMPParameterUtility
  type: Class
  source:
    remote:
      path: Package/Runtime/Parameters/TMPParameterUtility.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: TMPParameterUtility
    path: ../Package/Runtime/Parameters/TMPParameterUtility.cs
    startLine: 9
  namespace: TMPEffects.Parameters
  summary: Utility class for easy parameter handling.
  example: []
  syntax:
    content: public static class TMPParameterUtility
    content.vb: Public Module TMPParameterUtility
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: TMPEffects.Parameters.TMPParameterUtility.TryGetDefinedParameter(System.String@,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String[])
  commentId: M:TMPEffects.Parameters.TMPParameterUtility.TryGetDefinedParameter(System.String@,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String[])
  id: TryGetDefinedParameter(System.String@,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String[])
  parent: TMPEffects.Parameters.TMPParameterUtility
  langs:
  - csharp
  - vb
  name: TryGetDefinedParameter(out string, IDictionary<string, string>, string, params string[])
  nameWithType: TMPParameterUtility.TryGetDefinedParameter(out string, IDictionary<string, string>, string, params string[])
  fullName: TMPEffects.Parameters.TMPParameterUtility.TryGetDefinedParameter(out string, System.Collections.Generic.IDictionary<string, string>, string, params string[])
  type: Method
  source:
    remote:
      path: Package/Runtime/Parameters/TMPParameterUtility.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: TryGetDefinedParameter
    path: ../Package/Runtime/Parameters/TMPParameterUtility.cs
    startLine: 21
  namespace: TMPEffects.Parameters
  summary: >-
    Check if there is a well-defined parameter of the given name or aliases.<br />

    A parameter is well-defined if there is exactly one of the given aliases (including the name) present in the parameters.
  example: []
  syntax:
    content: public static bool TryGetDefinedParameter(out string value, IDictionary<string, string> parameters, string name, params string[] aliases)
    parameters:
    - id: value
      type: System.String
      description: Set to the name of the defined parameter if successful.
    - id: parameters
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: The parameters to check.
    - id: name
      type: System.String
      description: The name to check.
    - id: aliases
      type: System.String[]
      description: The aliases (alternative names) to check.
    return:
      type: System.Boolean
      description: true if the parameter is well-defined, false otherwise.
    content.vb: Public Shared Function TryGetDefinedParameter(value As String, parameters As IDictionary(Of String, String), name As String, ParamArray aliases As String()) As Boolean
  overload: TMPEffects.Parameters.TMPParameterUtility.TryGetDefinedParameter*
  nameWithType.vb: TMPParameterUtility.TryGetDefinedParameter(String, IDictionary(Of String, String), String, ParamArray String())
  fullName.vb: TMPEffects.Parameters.TMPParameterUtility.TryGetDefinedParameter(String, System.Collections.Generic.IDictionary(Of String, String), String, ParamArray String())
  name.vb: TryGetDefinedParameter(String, IDictionary(Of String, String), String, ParamArray String())
- uid: TMPEffects.Parameters.TMPParameterUtility.ParameterDefined(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String[])
  commentId: M:TMPEffects.Parameters.TMPParameterUtility.ParameterDefined(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String[])
  id: ParameterDefined(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String[])
  parent: TMPEffects.Parameters.TMPParameterUtility
  langs:
  - csharp
  - vb
  name: ParameterDefined(IDictionary<string, string>, string, params string[])
  nameWithType: TMPParameterUtility.ParameterDefined(IDictionary<string, string>, string, params string[])
  fullName: TMPEffects.Parameters.TMPParameterUtility.ParameterDefined(System.Collections.Generic.IDictionary<string, string>, string, params string[])
  type: Method
  source:
    remote:
      path: Package/Runtime/Parameters/TMPParameterUtility.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: ParameterDefined
    path: ../Package/Runtime/Parameters/TMPParameterUtility.cs
    startLine: 51
  namespace: TMPEffects.Parameters
  summary: >-
    Check if there is a well-defined parameter of the given name or aliases.<br />

    A parameter is well-defined if there is exactly one of the given aliases (including the name) present in the parameters.
  example: []
  syntax:
    content: public static bool ParameterDefined(IDictionary<string, string> parameters, string name, params string[] aliases)
    parameters:
    - id: parameters
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: The parameters to check.
    - id: name
      type: System.String
      description: The name to check.
    - id: aliases
      type: System.String[]
      description: The aliases (alternative names) to check.
    return:
      type: System.Boolean
      description: true if the parameter is well-defined, false otherwise.
    content.vb: Public Shared Function ParameterDefined(parameters As IDictionary(Of String, String), name As String, ParamArray aliases As String()) As Boolean
  overload: TMPEffects.Parameters.TMPParameterUtility.ParameterDefined*
  nameWithType.vb: TMPParameterUtility.ParameterDefined(IDictionary(Of String, String), String, ParamArray String())
  fullName.vb: TMPEffects.Parameters.TMPParameterUtility.ParameterDefined(System.Collections.Generic.IDictionary(Of String, String), String, ParamArray String())
  name.vb: ParameterDefined(IDictionary(Of String, String), String, ParamArray String())
- uid: TMPEffects.Parameters.TMPParameterUtility.HasNonArrayParameter(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String[])
  commentId: M:TMPEffects.Parameters.TMPParameterUtility.HasNonArrayParameter(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String[])
  id: HasNonArrayParameter(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String[])
  parent: TMPEffects.Parameters.TMPParameterUtility
  langs:
  - csharp
  - vb
  name: HasNonArrayParameter(IDictionary<string, string>, string, params string[])
  nameWithType: TMPParameterUtility.HasNonArrayParameter(IDictionary<string, string>, string, params string[])
  fullName: TMPEffects.Parameters.TMPParameterUtility.HasNonArrayParameter(System.Collections.Generic.IDictionary<string, string>, string, params string[])
  type: Method
  source:
    remote:
      path: Package/Runtime/Parameters/TMPParameterUtility.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: HasNonArrayParameter
    path: ../Package/Runtime/Parameters/TMPParameterUtility.cs
    startLine: 65
  namespace: TMPEffects.Parameters
  summary: Check if there is a well-defined parameter of the given name or aliases that is not of type Array&lt;T&gt; (=&gt; can not be converted to Array&lt;T&gt;).
  example: []
  syntax:
    content: public static bool HasNonArrayParameter(IDictionary<string, string> parameters, string name, params string[] aliases)
    parameters:
    - id: parameters
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: The parameters to check.
    - id: name
      type: System.String
      description: The name to check.
    - id: aliases
      type: System.String[]
      description: The aliases (alternative names) to check.
    return:
      type: System.Boolean
      description: true if there is a well-defined parameter that is not of type Array&lt;T&gt;, false otherwise.
    content.vb: Public Shared Function HasNonArrayParameter(parameters As IDictionary(Of String, String), name As String, ParamArray aliases As String()) As Boolean
  overload: TMPEffects.Parameters.TMPParameterUtility.HasNonArrayParameter*
  nameWithType.vb: TMPParameterUtility.HasNonArrayParameter(IDictionary(Of String, String), String, ParamArray String())
  fullName.vb: TMPEffects.Parameters.TMPParameterUtility.HasNonArrayParameter(System.Collections.Generic.IDictionary(Of String, String), String, ParamArray String())
  name.vb: HasNonArrayParameter(IDictionary(Of String, String), String, ParamArray String())
- uid: TMPEffects.Parameters.TMPParameterUtility.HasArrayParameter(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String[])
  commentId: M:TMPEffects.Parameters.TMPParameterUtility.HasArrayParameter(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String[])
  id: HasArrayParameter(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String[])
  parent: TMPEffects.Parameters.TMPParameterUtility
  langs:
  - csharp
  - vb
  name: HasArrayParameter(IDictionary<string, string>, string, params string[])
  nameWithType: TMPParameterUtility.HasArrayParameter(IDictionary<string, string>, string, params string[])
  fullName: TMPEffects.Parameters.TMPParameterUtility.HasArrayParameter(System.Collections.Generic.IDictionary<string, string>, string, params string[])
  type: Method
  source:
    remote:
      path: Package/Runtime/Parameters/TMPParameterUtility.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: HasArrayParameter
    path: ../Package/Runtime/Parameters/TMPParameterUtility.cs
    startLine: 79
  namespace: TMPEffects.Parameters
  summary: Check if there is a well-defined parameter of the given name or aliases that is of type Array&lt;T&gt; (=&gt; can no be converted to Array&lt;T&gt;).
  example: []
  syntax:
    content: public static bool HasArrayParameter(IDictionary<string, string> parameters, string name, params string[] aliases)
    parameters:
    - id: parameters
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: The parameters to check.
    - id: name
      type: System.String
      description: The name to check.
    - id: aliases
      type: System.String[]
      description: The aliases (alternative names) to check.
    return:
      type: System.Boolean
      description: true if there is a well-defined parameter that is of type Array&lt;T&gt;, false otherwise.
    content.vb: Public Shared Function HasArrayParameter(parameters As IDictionary(Of String, String), name As String, ParamArray aliases As String()) As Boolean
  overload: TMPEffects.Parameters.TMPParameterUtility.HasArrayParameter*
  nameWithType.vb: TMPParameterUtility.HasArrayParameter(IDictionary(Of String, String), String, ParamArray String())
  fullName.vb: TMPEffects.Parameters.TMPParameterUtility.HasArrayParameter(System.Collections.Generic.IDictionary(Of String, String), String, ParamArray String())
  name.vb: HasArrayParameter(IDictionary(Of String, String), String, ParamArray String())
- uid: TMPEffects.Parameters.TMPParameterUtility.TryGetArrayParameter(System.String[]@,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String[])
  commentId: M:TMPEffects.Parameters.TMPParameterUtility.TryGetArrayParameter(System.String[]@,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String[])
  id: TryGetArrayParameter(System.String[]@,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String[])
  parent: TMPEffects.Parameters.TMPParameterUtility
  langs:
  - csharp
  - vb
  name: TryGetArrayParameter(out string[], IDictionary<string, string>, string, params string[])
  nameWithType: TMPParameterUtility.TryGetArrayParameter(out string[], IDictionary<string, string>, string, params string[])
  fullName: TMPEffects.Parameters.TMPParameterUtility.TryGetArrayParameter(out string[], System.Collections.Generic.IDictionary<string, string>, string, params string[])
  type: Method
  source:
    remote:
      path: Package/Runtime/Parameters/TMPParameterUtility.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: TryGetArrayParameter
    path: ../Package/Runtime/Parameters/TMPParameterUtility.cs
    startLine: 93
  namespace: TMPEffects.Parameters
  summary: Check if there is a well-defined parameter of the given name or aliases that is of type Array&lt;T&gt; (=&gt; can be converted to Array&lt;T&gt;).<br />
  example: []
  syntax:
    content: public static bool TryGetArrayParameter(out string[] value, IDictionary<string, string> parameters, string name, params string[] aliases)
    parameters:
    - id: value
      type: System.String[]
      description: Set to the value of the parameter if successful.
    - id: parameters
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: The parameters to check.
    - id: name
      type: System.String
      description: The name to check.
    - id: aliases
      type: System.String[]
      description: The aliases (alternative names) to check.
    return:
      type: System.Boolean
      description: true if there is a well-defined parameter that is of type Array&lt;T&gt;, false otherwise.
    content.vb: Public Shared Function TryGetArrayParameter(value As String(), parameters As IDictionary(Of String, String), name As String, ParamArray aliases As String()) As Boolean
  overload: TMPEffects.Parameters.TMPParameterUtility.TryGetArrayParameter*
  nameWithType.vb: TMPParameterUtility.TryGetArrayParameter(String(), IDictionary(Of String, String), String, ParamArray String())
  fullName.vb: TMPEffects.Parameters.TMPParameterUtility.TryGetArrayParameter(String(), System.Collections.Generic.IDictionary(Of String, String), String, ParamArray String())
  name.vb: TryGetArrayParameter(String(), IDictionary(Of String, String), String, ParamArray String())
- uid: TMPEffects.Parameters.TMPParameterUtility.HasNonArrayParameter``1(System.Collections.Generic.IDictionary{System.String,System.String},TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,``0,TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean},System.String,System.String[])
  commentId: M:TMPEffects.Parameters.TMPParameterUtility.HasNonArrayParameter``1(System.Collections.Generic.IDictionary{System.String,System.String},TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,``0,TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean},System.String,System.String[])
  id: HasNonArrayParameter``1(System.Collections.Generic.IDictionary{System.String,System.String},TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,``0,TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean},System.String,System.String[])
  parent: TMPEffects.Parameters.TMPParameterUtility
  langs:
  - csharp
  - vb
  name: HasNonArrayParameter<T>(IDictionary<string, string>, ParseDelegate<string, T, ITMPKeywordDatabase, bool>, string, params string[])
  nameWithType: TMPParameterUtility.HasNonArrayParameter<T>(IDictionary<string, string>, TMPParameterUtility.ParseDelegate<string, T, ITMPKeywordDatabase, bool>, string, params string[])
  fullName: TMPEffects.Parameters.TMPParameterUtility.HasNonArrayParameter<T>(System.Collections.Generic.IDictionary<string, string>, TMPEffects.Parameters.TMPParameterUtility.ParseDelegate<string, T, TMPEffects.Databases.ITMPKeywordDatabase, bool>, string, params string[])
  type: Method
  source:
    remote:
      path: Package/Runtime/Parameters/TMPParameterUtility.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: HasNonArrayParameter
    path: ../Package/Runtime/Parameters/TMPParameterUtility.cs
    startLine: 113
  namespace: TMPEffects.Parameters
  summary: Check if there is a well-defined parameter of the given name or aliases that is not of type Array&lt;T&gt; (=&gt; can not be converted to Array&lt;T&gt;).
  example: []
  syntax:
    content: public static bool HasNonArrayParameter<T>(IDictionary<string, string> parameters, TMPParameterUtility.ParseDelegate<string, T, ITMPKeywordDatabase, bool> func, string name, params string[] aliases)
    parameters:
    - id: parameters
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: The parameters to check.
    - id: func
      type: TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,{T},TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean}
    - id: name
      type: System.String
      description: The name to check.
    - id: aliases
      type: System.String[]
      description: The aliases (alternative names) to check.
    typeParameters:
    - id: T
    return:
      type: System.Boolean
      description: true if there is a well-defined parameter that is not of type Array&lt;T&gt;, false otherwise.
    content.vb: Public Shared Function HasNonArrayParameter(Of T)(parameters As IDictionary(Of String, String), func As TMPParameterUtility.ParseDelegate(Of String, T, ITMPKeywordDatabase, Boolean), name As String, ParamArray aliases As String()) As Boolean
  overload: TMPEffects.Parameters.TMPParameterUtility.HasNonArrayParameter*
  nameWithType.vb: TMPParameterUtility.HasNonArrayParameter(Of T)(IDictionary(Of String, String), TMPParameterUtility.ParseDelegate(Of String, T, ITMPKeywordDatabase, Boolean), String, ParamArray String())
  fullName.vb: TMPEffects.Parameters.TMPParameterUtility.HasNonArrayParameter(Of T)(System.Collections.Generic.IDictionary(Of String, String), TMPEffects.Parameters.TMPParameterUtility.ParseDelegate(Of String, T, TMPEffects.Databases.ITMPKeywordDatabase, Boolean), String, ParamArray String())
  name.vb: HasNonArrayParameter(Of T)(IDictionary(Of String, String), ParseDelegate(Of String, T, ITMPKeywordDatabase, Boolean), String, ParamArray String())
- uid: TMPEffects.Parameters.TMPParameterUtility.HasNonArrayParameter``1(System.Collections.Generic.IDictionary{System.String,System.String},TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,``0,TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean},TMPEffects.Databases.ITMPKeywordDatabase,System.String,System.String[])
  commentId: M:TMPEffects.Parameters.TMPParameterUtility.HasNonArrayParameter``1(System.Collections.Generic.IDictionary{System.String,System.String},TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,``0,TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean},TMPEffects.Databases.ITMPKeywordDatabase,System.String,System.String[])
  id: HasNonArrayParameter``1(System.Collections.Generic.IDictionary{System.String,System.String},TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,``0,TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean},TMPEffects.Databases.ITMPKeywordDatabase,System.String,System.String[])
  parent: TMPEffects.Parameters.TMPParameterUtility
  langs:
  - csharp
  - vb
  name: HasNonArrayParameter<T>(IDictionary<string, string>, ParseDelegate<string, T, ITMPKeywordDatabase, bool>, ITMPKeywordDatabase, string, params string[])
  nameWithType: TMPParameterUtility.HasNonArrayParameter<T>(IDictionary<string, string>, TMPParameterUtility.ParseDelegate<string, T, ITMPKeywordDatabase, bool>, ITMPKeywordDatabase, string, params string[])
  fullName: TMPEffects.Parameters.TMPParameterUtility.HasNonArrayParameter<T>(System.Collections.Generic.IDictionary<string, string>, TMPEffects.Parameters.TMPParameterUtility.ParseDelegate<string, T, TMPEffects.Databases.ITMPKeywordDatabase, bool>, TMPEffects.Databases.ITMPKeywordDatabase, string, params string[])
  type: Method
  source:
    remote:
      path: Package/Runtime/Parameters/TMPParameterUtility.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: HasNonArrayParameter
    path: ../Package/Runtime/Parameters/TMPParameterUtility.cs
    startLine: 128
  namespace: TMPEffects.Parameters
  summary: Check if there is a well-defined parameter of the given name or aliases that is not of type Array&lt;T&gt; (=&gt; can not be converted to Array&lt;T&gt;).
  example: []
  syntax:
    content: public static bool HasNonArrayParameter<T>(IDictionary<string, string> parameters, TMPParameterUtility.ParseDelegate<string, T, ITMPKeywordDatabase, bool> func, ITMPKeywordDatabase keywords, string name, params string[] aliases)
    parameters:
    - id: parameters
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: The parameters to check.
    - id: func
      type: TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,{T},TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean}
      description: The delegate used to parse the array items.
    - id: keywords
      type: TMPEffects.Databases.ITMPKeywordDatabase
      description: The keyword database to use.
    - id: name
      type: System.String
      description: The name to check.
    - id: aliases
      type: System.String[]
      description: The aliases (alternative names) to check.
    typeParameters:
    - id: T
    return:
      type: System.Boolean
      description: true if there is a well-defined parameter that is not of type Array&lt;T&gt;, false otherwise.
    content.vb: Public Shared Function HasNonArrayParameter(Of T)(parameters As IDictionary(Of String, String), func As TMPParameterUtility.ParseDelegate(Of String, T, ITMPKeywordDatabase, Boolean), keywords As ITMPKeywordDatabase, name As String, ParamArray aliases As String()) As Boolean
  overload: TMPEffects.Parameters.TMPParameterUtility.HasNonArrayParameter*
  nameWithType.vb: TMPParameterUtility.HasNonArrayParameter(Of T)(IDictionary(Of String, String), TMPParameterUtility.ParseDelegate(Of String, T, ITMPKeywordDatabase, Boolean), ITMPKeywordDatabase, String, ParamArray String())
  fullName.vb: TMPEffects.Parameters.TMPParameterUtility.HasNonArrayParameter(Of T)(System.Collections.Generic.IDictionary(Of String, String), TMPEffects.Parameters.TMPParameterUtility.ParseDelegate(Of String, T, TMPEffects.Databases.ITMPKeywordDatabase, Boolean), TMPEffects.Databases.ITMPKeywordDatabase, String, ParamArray String())
  name.vb: HasNonArrayParameter(Of T)(IDictionary(Of String, String), ParseDelegate(Of String, T, ITMPKeywordDatabase, Boolean), ITMPKeywordDatabase, String, ParamArray String())
- uid: TMPEffects.Parameters.TMPParameterUtility.HasArrayParameter``1(System.Collections.Generic.IDictionary{System.String,System.String},TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,``0,TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean},System.String,System.String[])
  commentId: M:TMPEffects.Parameters.TMPParameterUtility.HasArrayParameter``1(System.Collections.Generic.IDictionary{System.String,System.String},TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,``0,TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean},System.String,System.String[])
  id: HasArrayParameter``1(System.Collections.Generic.IDictionary{System.String,System.String},TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,``0,TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean},System.String,System.String[])
  parent: TMPEffects.Parameters.TMPParameterUtility
  langs:
  - csharp
  - vb
  name: HasArrayParameter<T>(IDictionary<string, string>, ParseDelegate<string, T, ITMPKeywordDatabase, bool>, string, params string[])
  nameWithType: TMPParameterUtility.HasArrayParameter<T>(IDictionary<string, string>, TMPParameterUtility.ParseDelegate<string, T, ITMPKeywordDatabase, bool>, string, params string[])
  fullName: TMPEffects.Parameters.TMPParameterUtility.HasArrayParameter<T>(System.Collections.Generic.IDictionary<string, string>, TMPEffects.Parameters.TMPParameterUtility.ParseDelegate<string, T, TMPEffects.Databases.ITMPKeywordDatabase, bool>, string, params string[])
  type: Method
  source:
    remote:
      path: Package/Runtime/Parameters/TMPParameterUtility.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: HasArrayParameter
    path: ../Package/Runtime/Parameters/TMPParameterUtility.cs
    startLine: 144
  namespace: TMPEffects.Parameters
  summary: Check if there is a well-defined parameter of the given name or aliases that is of type Array&lt;T&gt; (=&gt; can no be converted to Array&lt;T&gt;).
  example: []
  syntax:
    content: public static bool HasArrayParameter<T>(IDictionary<string, string> parameters, TMPParameterUtility.ParseDelegate<string, T, ITMPKeywordDatabase, bool> func, string name, params string[] aliases)
    parameters:
    - id: parameters
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: The parameters to check.
    - id: func
      type: TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,{T},TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean}
      description: The delegate used to parse the array items.
    - id: name
      type: System.String
      description: The name to check.
    - id: aliases
      type: System.String[]
      description: The aliases (alternative names) to check.
    typeParameters:
    - id: T
    return:
      type: System.Boolean
      description: true if there is a well-defined parameter that is of type Array&lt;T&gt;, false otherwise.
    content.vb: Public Shared Function HasArrayParameter(Of T)(parameters As IDictionary(Of String, String), func As TMPParameterUtility.ParseDelegate(Of String, T, ITMPKeywordDatabase, Boolean), name As String, ParamArray aliases As String()) As Boolean
  overload: TMPEffects.Parameters.TMPParameterUtility.HasArrayParameter*
  nameWithType.vb: TMPParameterUtility.HasArrayParameter(Of T)(IDictionary(Of String, String), TMPParameterUtility.ParseDelegate(Of String, T, ITMPKeywordDatabase, Boolean), String, ParamArray String())
  fullName.vb: TMPEffects.Parameters.TMPParameterUtility.HasArrayParameter(Of T)(System.Collections.Generic.IDictionary(Of String, String), TMPEffects.Parameters.TMPParameterUtility.ParseDelegate(Of String, T, TMPEffects.Databases.ITMPKeywordDatabase, Boolean), String, ParamArray String())
  name.vb: HasArrayParameter(Of T)(IDictionary(Of String, String), ParseDelegate(Of String, T, ITMPKeywordDatabase, Boolean), String, ParamArray String())
- uid: TMPEffects.Parameters.TMPParameterUtility.HasArrayParameter``1(System.Collections.Generic.IDictionary{System.String,System.String},TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,``0,TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean},TMPEffects.Databases.ITMPKeywordDatabase,System.String,System.String[])
  commentId: M:TMPEffects.Parameters.TMPParameterUtility.HasArrayParameter``1(System.Collections.Generic.IDictionary{System.String,System.String},TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,``0,TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean},TMPEffects.Databases.ITMPKeywordDatabase,System.String,System.String[])
  id: HasArrayParameter``1(System.Collections.Generic.IDictionary{System.String,System.String},TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,``0,TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean},TMPEffects.Databases.ITMPKeywordDatabase,System.String,System.String[])
  parent: TMPEffects.Parameters.TMPParameterUtility
  langs:
  - csharp
  - vb
  name: HasArrayParameter<T>(IDictionary<string, string>, ParseDelegate<string, T, ITMPKeywordDatabase, bool>, ITMPKeywordDatabase, string, params string[])
  nameWithType: TMPParameterUtility.HasArrayParameter<T>(IDictionary<string, string>, TMPParameterUtility.ParseDelegate<string, T, ITMPKeywordDatabase, bool>, ITMPKeywordDatabase, string, params string[])
  fullName: TMPEffects.Parameters.TMPParameterUtility.HasArrayParameter<T>(System.Collections.Generic.IDictionary<string, string>, TMPEffects.Parameters.TMPParameterUtility.ParseDelegate<string, T, TMPEffects.Databases.ITMPKeywordDatabase, bool>, TMPEffects.Databases.ITMPKeywordDatabase, string, params string[])
  type: Method
  source:
    remote:
      path: Package/Runtime/Parameters/TMPParameterUtility.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: HasArrayParameter
    path: ../Package/Runtime/Parameters/TMPParameterUtility.cs
    startLine: 159
  namespace: TMPEffects.Parameters
  summary: Check if there is a well-defined parameter of the given name or aliases that is of type Array&lt;T&gt; (=&gt; can no be converted to Array&lt;T&gt;).
  example: []
  syntax:
    content: public static bool HasArrayParameter<T>(IDictionary<string, string> parameters, TMPParameterUtility.ParseDelegate<string, T, ITMPKeywordDatabase, bool> func, ITMPKeywordDatabase keywords, string name, params string[] aliases)
    parameters:
    - id: parameters
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: The parameters to check.
    - id: func
      type: TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,{T},TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean}
      description: The delegate used to parse the array items.
    - id: keywords
      type: TMPEffects.Databases.ITMPKeywordDatabase
      description: The keyword database to use.
    - id: name
      type: System.String
      description: The name to check.
    - id: aliases
      type: System.String[]
      description: The aliases (alternative names) to check.
    typeParameters:
    - id: T
    return:
      type: System.Boolean
      description: true if there is a well-defined parameter that is of type Array&lt;T&gt;, false otherwise.
    content.vb: Public Shared Function HasArrayParameter(Of T)(parameters As IDictionary(Of String, String), func As TMPParameterUtility.ParseDelegate(Of String, T, ITMPKeywordDatabase, Boolean), keywords As ITMPKeywordDatabase, name As String, ParamArray aliases As String()) As Boolean
  overload: TMPEffects.Parameters.TMPParameterUtility.HasArrayParameter*
  nameWithType.vb: TMPParameterUtility.HasArrayParameter(Of T)(IDictionary(Of String, String), TMPParameterUtility.ParseDelegate(Of String, T, ITMPKeywordDatabase, Boolean), ITMPKeywordDatabase, String, ParamArray String())
  fullName.vb: TMPEffects.Parameters.TMPParameterUtility.HasArrayParameter(Of T)(System.Collections.Generic.IDictionary(Of String, String), TMPEffects.Parameters.TMPParameterUtility.ParseDelegate(Of String, T, TMPEffects.Databases.ITMPKeywordDatabase, Boolean), TMPEffects.Databases.ITMPKeywordDatabase, String, ParamArray String())
  name.vb: HasArrayParameter(Of T)(IDictionary(Of String, String), ParseDelegate(Of String, T, ITMPKeywordDatabase, Boolean), ITMPKeywordDatabase, String, ParamArray String())
- uid: TMPEffects.Parameters.TMPParameterUtility.TryGetArrayParameter``1(``0[]@,System.Collections.Generic.IDictionary{System.String,System.String},TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,``0,TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean},System.String,System.String[])
  commentId: M:TMPEffects.Parameters.TMPParameterUtility.TryGetArrayParameter``1(``0[]@,System.Collections.Generic.IDictionary{System.String,System.String},TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,``0,TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean},System.String,System.String[])
  id: TryGetArrayParameter``1(``0[]@,System.Collections.Generic.IDictionary{System.String,System.String},TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,``0,TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean},System.String,System.String[])
  parent: TMPEffects.Parameters.TMPParameterUtility
  langs:
  - csharp
  - vb
  name: TryGetArrayParameter<T>(out T[], IDictionary<string, string>, ParseDelegate<string, T, ITMPKeywordDatabase, bool>, string, params string[])
  nameWithType: TMPParameterUtility.TryGetArrayParameter<T>(out T[], IDictionary<string, string>, TMPParameterUtility.ParseDelegate<string, T, ITMPKeywordDatabase, bool>, string, params string[])
  fullName: TMPEffects.Parameters.TMPParameterUtility.TryGetArrayParameter<T>(out T[], System.Collections.Generic.IDictionary<string, string>, TMPEffects.Parameters.TMPParameterUtility.ParseDelegate<string, T, TMPEffects.Databases.ITMPKeywordDatabase, bool>, string, params string[])
  type: Method
  source:
    remote:
      path: Package/Runtime/Parameters/TMPParameterUtility.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: TryGetArrayParameter
    path: ../Package/Runtime/Parameters/TMPParameterUtility.cs
    startLine: 175
  namespace: TMPEffects.Parameters
  summary: Check if there is a well-defined parameter of the given name or aliases that is of type Array&lt;T&gt; (=&gt; can be converted to Array&lt;T&gt;).<br />
  example: []
  syntax:
    content: public static bool TryGetArrayParameter<T>(out T[] value, IDictionary<string, string> parameters, TMPParameterUtility.ParseDelegate<string, T, ITMPKeywordDatabase, bool> func, string name, params string[] aliases)
    parameters:
    - id: value
      type: '{T}[]'
      description: Set to the value of the parameter if successful.
    - id: parameters
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: The parameters to check.
    - id: func
      type: TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,{T},TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean}
      description: The delegate used to parse the array items.
    - id: name
      type: System.String
      description: The name to check.
    - id: aliases
      type: System.String[]
      description: The aliases (alternative names) to check.
    typeParameters:
    - id: T
    return:
      type: System.Boolean
      description: true if there is a well-defined parameter that is of type Array&lt;T&gt;, false otherwise.
    content.vb: Public Shared Function TryGetArrayParameter(Of T)(value As T(), parameters As IDictionary(Of String, String), func As TMPParameterUtility.ParseDelegate(Of String, T, ITMPKeywordDatabase, Boolean), name As String, ParamArray aliases As String()) As Boolean
  overload: TMPEffects.Parameters.TMPParameterUtility.TryGetArrayParameter*
  nameWithType.vb: TMPParameterUtility.TryGetArrayParameter(Of T)(T(), IDictionary(Of String, String), TMPParameterUtility.ParseDelegate(Of String, T, ITMPKeywordDatabase, Boolean), String, ParamArray String())
  fullName.vb: TMPEffects.Parameters.TMPParameterUtility.TryGetArrayParameter(Of T)(T(), System.Collections.Generic.IDictionary(Of String, String), TMPEffects.Parameters.TMPParameterUtility.ParseDelegate(Of String, T, TMPEffects.Databases.ITMPKeywordDatabase, Boolean), String, ParamArray String())
  name.vb: TryGetArrayParameter(Of T)(T(), IDictionary(Of String, String), ParseDelegate(Of String, T, ITMPKeywordDatabase, Boolean), String, ParamArray String())
- uid: TMPEffects.Parameters.TMPParameterUtility.TryGetArrayParameter``1(``0[]@,System.Collections.Generic.IDictionary{System.String,System.String},TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,``0,TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean},TMPEffects.Databases.ITMPKeywordDatabase,System.String,System.String[])
  commentId: M:TMPEffects.Parameters.TMPParameterUtility.TryGetArrayParameter``1(``0[]@,System.Collections.Generic.IDictionary{System.String,System.String},TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,``0,TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean},TMPEffects.Databases.ITMPKeywordDatabase,System.String,System.String[])
  id: TryGetArrayParameter``1(``0[]@,System.Collections.Generic.IDictionary{System.String,System.String},TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,``0,TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean},TMPEffects.Databases.ITMPKeywordDatabase,System.String,System.String[])
  parent: TMPEffects.Parameters.TMPParameterUtility
  langs:
  - csharp
  - vb
  name: TryGetArrayParameter<T>(out T[], IDictionary<string, string>, ParseDelegate<string, T, ITMPKeywordDatabase, bool>, ITMPKeywordDatabase, string, params string[])
  nameWithType: TMPParameterUtility.TryGetArrayParameter<T>(out T[], IDictionary<string, string>, TMPParameterUtility.ParseDelegate<string, T, ITMPKeywordDatabase, bool>, ITMPKeywordDatabase, string, params string[])
  fullName: TMPEffects.Parameters.TMPParameterUtility.TryGetArrayParameter<T>(out T[], System.Collections.Generic.IDictionary<string, string>, TMPEffects.Parameters.TMPParameterUtility.ParseDelegate<string, T, TMPEffects.Databases.ITMPKeywordDatabase, bool>, TMPEffects.Databases.ITMPKeywordDatabase, string, params string[])
  type: Method
  source:
    remote:
      path: Package/Runtime/Parameters/TMPParameterUtility.cs
      branch: docs
      repo: https://github.com/Luca3317/TMPEffects.git
    id: TryGetArrayParameter
    path: ../Package/Runtime/Parameters/TMPParameterUtility.cs
    startLine: 191
  namespace: TMPEffects.Parameters
  summary: Check if there is a well-defined parameter of the given name or aliases that is of type Array&lt;T&gt; (=&gt; can be converted to Array&lt;T&gt;).<br />
  example: []
  syntax:
    content: public static bool TryGetArrayParameter<T>(out T[] value, IDictionary<string, string> parameters, TMPParameterUtility.ParseDelegate<string, T, ITMPKeywordDatabase, bool> func, ITMPKeywordDatabase keywords, string name, params string[] aliases)
    parameters:
    - id: value
      type: '{T}[]'
      description: Set to the value of the parameter if successful.
    - id: parameters
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: The parameters to check.
    - id: func
      type: TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,{T},TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean}
      description: The delegate used to parse the array items.
    - id: keywords
      type: TMPEffects.Databases.ITMPKeywordDatabase
      description: The keyword database to use.
    - id: name
      type: System.String
      description: The name to check.
    - id: aliases
      type: System.String[]
      description: The aliases (alternative names) to check.
    typeParameters:
    - id: T
    return:
      type: System.Boolean
      description: true if there is a well-defined parameter that is of type Array&lt;T&gt;, false otherwise.
    content.vb: Public Shared Function TryGetArrayParameter(Of T)(value As T(), parameters As IDictionary(Of String, String), func As TMPParameterUtility.ParseDelegate(Of String, T, ITMPKeywordDatabase, Boolean), keywords As ITMPKeywordDatabase, name As String, ParamArray aliases As String()) As Boolean
  overload: TMPEffects.Parameters.TMPParameterUtility.TryGetArrayParameter*
  nameWithType.vb: TMPParameterUtility.TryGetArrayParameter(Of T)(T(), IDictionary(Of String, String), TMPParameterUtility.ParseDelegate(Of String, T, ITMPKeywordDatabase, Boolean), ITMPKeywordDatabase, String, ParamArray String())
  fullName.vb: TMPEffects.Parameters.TMPParameterUtility.TryGetArrayParameter(Of T)(T(), System.Collections.Generic.IDictionary(Of String, String), TMPEffects.Parameters.TMPParameterUtility.ParseDelegate(Of String, T, TMPEffects.Databases.ITMPKeywordDatabase, Boolean), TMPEffects.Databases.ITMPKeywordDatabase, String, ParamArray String())
  name.vb: TryGetArrayParameter(Of T)(T(), IDictionary(Of String, String), ParseDelegate(Of String, T, ITMPKeywordDatabase, Boolean), ITMPKeywordDatabase, String, ParamArray String())
references:
- uid: TMPEffects.Parameters
  commentId: N:TMPEffects.Parameters
  href: TMPEffects.html
  name: TMPEffects.Parameters
  nameWithType: TMPEffects.Parameters
  fullName: TMPEffects.Parameters
  spec.csharp:
  - uid: TMPEffects
    name: TMPEffects
    href: TMPEffects.html
  - name: .
  - uid: TMPEffects.Parameters
    name: Parameters
    href: TMPEffects.Parameters.html
  spec.vb:
  - uid: TMPEffects
    name: TMPEffects
    href: TMPEffects.html
  - name: .
  - uid: TMPEffects.Parameters
    name: Parameters
    href: TMPEffects.Parameters.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: TMPEffects.Parameters.TMPParameterUtility.TryGetDefinedParameter*
  commentId: Overload:TMPEffects.Parameters.TMPParameterUtility.TryGetDefinedParameter
  href: TMPEffects.Parameters.TMPParameterUtility.html#TMPEffects_Parameters_TMPParameterUtility_TryGetDefinedParameter_System_String__System_Collections_Generic_IDictionary_System_String_System_String__System_String_System_String___
  name: TryGetDefinedParameter
  nameWithType: TMPParameterUtility.TryGetDefinedParameter
  fullName: TMPEffects.Parameters.TMPParameterUtility.TryGetDefinedParameter
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<string, string>
  nameWithType: IDictionary<string, string>
  fullName: System.Collections.Generic.IDictionary<string, string>
  nameWithType.vb: IDictionary(Of String, String)
  fullName.vb: System.Collections.Generic.IDictionary(Of String, String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: TMPEffects.Parameters.TMPParameterUtility.ParameterDefined*
  commentId: Overload:TMPEffects.Parameters.TMPParameterUtility.ParameterDefined
  href: TMPEffects.Parameters.TMPParameterUtility.html#TMPEffects_Parameters_TMPParameterUtility_ParameterDefined_System_Collections_Generic_IDictionary_System_String_System_String__System_String_System_String___
  name: ParameterDefined
  nameWithType: TMPParameterUtility.ParameterDefined
  fullName: TMPEffects.Parameters.TMPParameterUtility.ParameterDefined
- uid: TMPEffects.Parameters.TMPParameterUtility.HasNonArrayParameter*
  commentId: Overload:TMPEffects.Parameters.TMPParameterUtility.HasNonArrayParameter
  href: TMPEffects.Parameters.TMPParameterUtility.html#TMPEffects_Parameters_TMPParameterUtility_HasNonArrayParameter_System_Collections_Generic_IDictionary_System_String_System_String__System_String_System_String___
  name: HasNonArrayParameter
  nameWithType: TMPParameterUtility.HasNonArrayParameter
  fullName: TMPEffects.Parameters.TMPParameterUtility.HasNonArrayParameter
- uid: TMPEffects.Parameters.TMPParameterUtility.HasArrayParameter*
  commentId: Overload:TMPEffects.Parameters.TMPParameterUtility.HasArrayParameter
  href: TMPEffects.Parameters.TMPParameterUtility.html#TMPEffects_Parameters_TMPParameterUtility_HasArrayParameter_System_Collections_Generic_IDictionary_System_String_System_String__System_String_System_String___
  name: HasArrayParameter
  nameWithType: TMPParameterUtility.HasArrayParameter
  fullName: TMPEffects.Parameters.TMPParameterUtility.HasArrayParameter
- uid: TMPEffects.Parameters.TMPParameterUtility.TryGetArrayParameter*
  commentId: Overload:TMPEffects.Parameters.TMPParameterUtility.TryGetArrayParameter
  href: TMPEffects.Parameters.TMPParameterUtility.html#TMPEffects_Parameters_TMPParameterUtility_TryGetArrayParameter_System_String____System_Collections_Generic_IDictionary_System_String_System_String__System_String_System_String___
  name: TryGetArrayParameter
  nameWithType: TMPParameterUtility.TryGetArrayParameter
  fullName: TMPEffects.Parameters.TMPParameterUtility.TryGetArrayParameter
- uid: TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,{T},TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean}
  commentId: T:TMPEffects.Parameters.TMPParameterUtility.ParseDelegate{System.String,``0,TMPEffects.Databases.ITMPKeywordDatabase,System.Boolean}
  parent: TMPEffects.Parameters
  definition: TMPEffects.Parameters.TMPParameterUtility.ParseDelegate`4
  href: TMPEffects.Parameters.TMPParameterUtility.html
  name: TMPParameterUtility.ParseDelegate<string, T, ITMPKeywordDatabase, bool>
  nameWithType: TMPParameterUtility.ParseDelegate<string, T, ITMPKeywordDatabase, bool>
  fullName: TMPEffects.Parameters.TMPParameterUtility.ParseDelegate<string, T, TMPEffects.Databases.ITMPKeywordDatabase, bool>
  nameWithType.vb: TMPParameterUtility.ParseDelegate(Of String, T, ITMPKeywordDatabase, Boolean)
  fullName.vb: TMPEffects.Parameters.TMPParameterUtility.ParseDelegate(Of String, T, TMPEffects.Databases.ITMPKeywordDatabase, Boolean)
  name.vb: TMPParameterUtility.ParseDelegate(Of String, T, ITMPKeywordDatabase, Boolean)
  spec.csharp:
  - uid: TMPEffects.Parameters.TMPParameterUtility
    name: TMPParameterUtility
    href: TMPEffects.Parameters.TMPParameterUtility.html
  - name: .
  - uid: TMPEffects.Parameters.TMPParameterUtility.ParseDelegate`4
    name: ParseDelegate
    href: TMPEffects.Parameters.TMPParameterUtility.ParseDelegate-4.html
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: TMPEffects.Databases.ITMPKeywordDatabase
    name: ITMPKeywordDatabase
    href: TMPEffects.Databases.ITMPKeywordDatabase.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: TMPEffects.Parameters.TMPParameterUtility
    name: TMPParameterUtility
    href: TMPEffects.Parameters.TMPParameterUtility.html
  - name: .
  - uid: TMPEffects.Parameters.TMPParameterUtility.ParseDelegate`4
    name: ParseDelegate
    href: TMPEffects.Parameters.TMPParameterUtility.ParseDelegate-4.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: TMPEffects.Databases.ITMPKeywordDatabase
    name: ITMPKeywordDatabase
    href: TMPEffects.Databases.ITMPKeywordDatabase.html
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: TMPEffects.Parameters.TMPParameterUtility.ParseDelegate`4
  commentId: T:TMPEffects.Parameters.TMPParameterUtility.ParseDelegate`4
  href: TMPEffects.Parameters.TMPParameterUtility.html
  name: TMPParameterUtility.ParseDelegate<T, U, V, W>
  nameWithType: TMPParameterUtility.ParseDelegate<T, U, V, W>
  fullName: TMPEffects.Parameters.TMPParameterUtility.ParseDelegate<T, U, V, W>
  nameWithType.vb: TMPParameterUtility.ParseDelegate(Of T, U, V, W)
  fullName.vb: TMPEffects.Parameters.TMPParameterUtility.ParseDelegate(Of T, U, V, W)
  name.vb: TMPParameterUtility.ParseDelegate(Of T, U, V, W)
  spec.csharp:
  - uid: TMPEffects.Parameters.TMPParameterUtility
    name: TMPParameterUtility
    href: TMPEffects.Parameters.TMPParameterUtility.html
  - name: .
  - uid: TMPEffects.Parameters.TMPParameterUtility.ParseDelegate`4
    name: ParseDelegate
    href: TMPEffects.Parameters.TMPParameterUtility.ParseDelegate-4.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: U
  - name: ','
  - name: " "
  - name: V
  - name: ','
  - name: " "
  - name: W
  - name: '>'
  spec.vb:
  - uid: TMPEffects.Parameters.TMPParameterUtility
    name: TMPParameterUtility
    href: TMPEffects.Parameters.TMPParameterUtility.html
  - name: .
  - uid: TMPEffects.Parameters.TMPParameterUtility.ParseDelegate`4
    name: ParseDelegate
    href: TMPEffects.Parameters.TMPParameterUtility.ParseDelegate-4.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: U
  - name: ','
  - name: " "
  - name: V
  - name: ','
  - name: " "
  - name: W
  - name: )
- uid: TMPEffects.Databases.ITMPKeywordDatabase
  commentId: T:TMPEffects.Databases.ITMPKeywordDatabase
  parent: TMPEffects.Databases
  href: TMPEffects.Databases.ITMPKeywordDatabase.html
  name: ITMPKeywordDatabase
  nameWithType: ITMPKeywordDatabase
  fullName: TMPEffects.Databases.ITMPKeywordDatabase
- uid: TMPEffects.Databases
  commentId: N:TMPEffects.Databases
  href: TMPEffects.html
  name: TMPEffects.Databases
  nameWithType: TMPEffects.Databases
  fullName: TMPEffects.Databases
  spec.csharp:
  - uid: TMPEffects
    name: TMPEffects
    href: TMPEffects.html
  - name: .
  - uid: TMPEffects.Databases
    name: Databases
    href: TMPEffects.Databases.html
  spec.vb:
  - uid: TMPEffects
    name: TMPEffects
    href: TMPEffects.html
  - name: .
  - uid: TMPEffects.Databases
    name: Databases
    href: TMPEffects.Databases.html
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
