### YamlMime:ManagedReference
items:
- uid: TMPEffects.Intervaltree.IIntervalTree`2
  commentId: T:TMPEffects.Intervaltree.IIntervalTree`2
  id: IIntervalTree`2
  parent: TMPEffects.Intervaltree
  children:
  - TMPEffects.Intervaltree.IIntervalTree`2.Add(`0,`0,`1)
  - TMPEffects.Intervaltree.IIntervalTree`2.Clear
  - TMPEffects.Intervaltree.IIntervalTree`2.Count
  - TMPEffects.Intervaltree.IIntervalTree`2.Query(`0)
  - TMPEffects.Intervaltree.IIntervalTree`2.Query(`0,`0)
  - TMPEffects.Intervaltree.IIntervalTree`2.Remove(System.Collections.Generic.IEnumerable{`1})
  - TMPEffects.Intervaltree.IIntervalTree`2.Remove(`1)
  - TMPEffects.Intervaltree.IIntervalTree`2.Values
  langs:
  - csharp
  - vb
  name: IIntervalTree<TKey, TValue>
  nameWithType: IIntervalTree<TKey, TValue>
  fullName: TMPEffects.Intervaltree.IIntervalTree<TKey, TValue>
  type: Interface
  source:
    remote:
      path: Runtime/IntervalTree/IntervalTree.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: IIntervalTree
    path: ../Assets/TMPEffects OLD/Runtime/IntervalTree/IntervalTree.cs
    startLine: 249
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Intervaltree
  summary: >-
    The standard interval tree implementation. Keeps a root node and forwards all queries to it.

    Whenever new items are added or items are removed, the tree goes temporarily "out of sync", which means that the

    internal index is not updated immediately, but upon the next query operation.
  example: []
  syntax:
    content: 'public interface IIntervalTree<TKey, TValue> : IEnumerable<RangeValuePair<TKey, TValue>>, IEnumerable'
    typeParameters:
    - id: TKey
      description: The type of the range.
    - id: TValue
      description: The type of the data items.
    content.vb: Public Interface IIntervalTree(Of TKey, TValue) Inherits IEnumerable(Of RangeValuePair(Of TKey, TValue)), IEnumerable
  inheritedMembers:
  - System.Collections.Generic.IEnumerable{TMPEffects.Intervaltree.RangeValuePair{{TKey},{TValue}}}.GetEnumerator
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: IIntervalTree(Of TKey, TValue)
  fullName.vb: TMPEffects.Intervaltree.IIntervalTree(Of TKey, TValue)
  name.vb: IIntervalTree(Of TKey, TValue)
- uid: TMPEffects.Intervaltree.IIntervalTree`2.Values
  commentId: P:TMPEffects.Intervaltree.IIntervalTree`2.Values
  id: Values
  parent: TMPEffects.Intervaltree.IIntervalTree`2
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: IIntervalTree<TKey, TValue>.Values
  fullName: TMPEffects.Intervaltree.IIntervalTree<TKey, TValue>.Values
  type: Property
  source:
    remote:
      path: Runtime/IntervalTree/IntervalTree.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: Values
    path: ../Assets/TMPEffects OLD/Runtime/IntervalTree/IntervalTree.cs
    startLine: 254
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Intervaltree
  summary: Returns all items contained in the tree.
  example: []
  syntax:
    content: IEnumerable<TValue> Values { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{{TValue}}
    content.vb: ReadOnly Property Values As IEnumerable(Of TValue)
  overload: TMPEffects.Intervaltree.IIntervalTree`2.Values*
  nameWithType.vb: IIntervalTree(Of TKey, TValue).Values
  fullName.vb: TMPEffects.Intervaltree.IIntervalTree(Of TKey, TValue).Values
- uid: TMPEffects.Intervaltree.IIntervalTree`2.Count
  commentId: P:TMPEffects.Intervaltree.IIntervalTree`2.Count
  id: Count
  parent: TMPEffects.Intervaltree.IIntervalTree`2
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: IIntervalTree<TKey, TValue>.Count
  fullName: TMPEffects.Intervaltree.IIntervalTree<TKey, TValue>.Count
  type: Property
  source:
    remote:
      path: Runtime/IntervalTree/IntervalTree.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: Count
    path: ../Assets/TMPEffects OLD/Runtime/IntervalTree/IntervalTree.cs
    startLine: 259
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Intervaltree
  summary: Gets the number of elements contained in the tree.
  example: []
  syntax:
    content: int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property Count As Integer
  overload: TMPEffects.Intervaltree.IIntervalTree`2.Count*
  nameWithType.vb: IIntervalTree(Of TKey, TValue).Count
  fullName.vb: TMPEffects.Intervaltree.IIntervalTree(Of TKey, TValue).Count
- uid: TMPEffects.Intervaltree.IIntervalTree`2.Query(`0)
  commentId: M:TMPEffects.Intervaltree.IIntervalTree`2.Query(`0)
  id: Query(`0)
  parent: TMPEffects.Intervaltree.IIntervalTree`2
  langs:
  - csharp
  - vb
  name: Query(TKey)
  nameWithType: IIntervalTree<TKey, TValue>.Query(TKey)
  fullName: TMPEffects.Intervaltree.IIntervalTree<TKey, TValue>.Query(TKey)
  type: Method
  source:
    remote:
      path: Runtime/IntervalTree/IntervalTree.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: Query
    path: ../Assets/TMPEffects OLD/Runtime/IntervalTree/IntervalTree.cs
    startLine: 264
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Intervaltree
  summary: Performs a point query with a single value. All items with overlapping ranges are returned.
  example: []
  syntax:
    content: IEnumerable<TValue> Query(TKey value)
    parameters:
    - id: value
      type: '{TKey}'
    return:
      type: System.Collections.Generic.IEnumerable{{TValue}}
    content.vb: Function Query(value As TKey) As IEnumerable(Of TValue)
  overload: TMPEffects.Intervaltree.IIntervalTree`2.Query*
  nameWithType.vb: IIntervalTree(Of TKey, TValue).Query(TKey)
  fullName.vb: TMPEffects.Intervaltree.IIntervalTree(Of TKey, TValue).Query(TKey)
- uid: TMPEffects.Intervaltree.IIntervalTree`2.Query(`0,`0)
  commentId: M:TMPEffects.Intervaltree.IIntervalTree`2.Query(`0,`0)
  id: Query(`0,`0)
  parent: TMPEffects.Intervaltree.IIntervalTree`2
  langs:
  - csharp
  - vb
  name: Query(TKey, TKey)
  nameWithType: IIntervalTree<TKey, TValue>.Query(TKey, TKey)
  fullName: TMPEffects.Intervaltree.IIntervalTree<TKey, TValue>.Query(TKey, TKey)
  type: Method
  source:
    remote:
      path: Runtime/IntervalTree/IntervalTree.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: Query
    path: ../Assets/TMPEffects OLD/Runtime/IntervalTree/IntervalTree.cs
    startLine: 269
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Intervaltree
  summary: Performs a range query. All items with overlapping ranges are returned.
  example: []
  syntax:
    content: IEnumerable<TValue> Query(TKey from, TKey to)
    parameters:
    - id: from
      type: '{TKey}'
    - id: to
      type: '{TKey}'
    return:
      type: System.Collections.Generic.IEnumerable{{TValue}}
    content.vb: Function Query(from As TKey, [to] As TKey) As IEnumerable(Of TValue)
  overload: TMPEffects.Intervaltree.IIntervalTree`2.Query*
  nameWithType.vb: IIntervalTree(Of TKey, TValue).Query(TKey, TKey)
  fullName.vb: TMPEffects.Intervaltree.IIntervalTree(Of TKey, TValue).Query(TKey, TKey)
- uid: TMPEffects.Intervaltree.IIntervalTree`2.Add(`0,`0,`1)
  commentId: M:TMPEffects.Intervaltree.IIntervalTree`2.Add(`0,`0,`1)
  id: Add(`0,`0,`1)
  parent: TMPEffects.Intervaltree.IIntervalTree`2
  langs:
  - csharp
  - vb
  name: Add(TKey, TKey, TValue)
  nameWithType: IIntervalTree<TKey, TValue>.Add(TKey, TKey, TValue)
  fullName: TMPEffects.Intervaltree.IIntervalTree<TKey, TValue>.Add(TKey, TKey, TValue)
  type: Method
  source:
    remote:
      path: Runtime/IntervalTree/IntervalTree.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: Add
    path: ../Assets/TMPEffects OLD/Runtime/IntervalTree/IntervalTree.cs
    startLine: 274
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Intervaltree
  summary: Adds the specified item.
  example: []
  syntax:
    content: void Add(TKey from, TKey to, TValue value)
    parameters:
    - id: from
      type: '{TKey}'
    - id: to
      type: '{TKey}'
    - id: value
      type: '{TValue}'
    content.vb: Sub Add(from As TKey, [to] As TKey, value As TValue)
  overload: TMPEffects.Intervaltree.IIntervalTree`2.Add*
  nameWithType.vb: IIntervalTree(Of TKey, TValue).Add(TKey, TKey, TValue)
  fullName.vb: TMPEffects.Intervaltree.IIntervalTree(Of TKey, TValue).Add(TKey, TKey, TValue)
- uid: TMPEffects.Intervaltree.IIntervalTree`2.Remove(`1)
  commentId: M:TMPEffects.Intervaltree.IIntervalTree`2.Remove(`1)
  id: Remove(`1)
  parent: TMPEffects.Intervaltree.IIntervalTree`2
  langs:
  - csharp
  - vb
  name: Remove(TValue)
  nameWithType: IIntervalTree<TKey, TValue>.Remove(TValue)
  fullName: TMPEffects.Intervaltree.IIntervalTree<TKey, TValue>.Remove(TValue)
  type: Method
  source:
    remote:
      path: Runtime/IntervalTree/IntervalTree.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: Remove
    path: ../Assets/TMPEffects OLD/Runtime/IntervalTree/IntervalTree.cs
    startLine: 279
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Intervaltree
  summary: Removes the specified item.
  example: []
  syntax:
    content: void Remove(TValue item)
    parameters:
    - id: item
      type: '{TValue}'
    content.vb: Sub Remove(item As TValue)
  overload: TMPEffects.Intervaltree.IIntervalTree`2.Remove*
  nameWithType.vb: IIntervalTree(Of TKey, TValue).Remove(TValue)
  fullName.vb: TMPEffects.Intervaltree.IIntervalTree(Of TKey, TValue).Remove(TValue)
- uid: TMPEffects.Intervaltree.IIntervalTree`2.Remove(System.Collections.Generic.IEnumerable{`1})
  commentId: M:TMPEffects.Intervaltree.IIntervalTree`2.Remove(System.Collections.Generic.IEnumerable{`1})
  id: Remove(System.Collections.Generic.IEnumerable{`1})
  parent: TMPEffects.Intervaltree.IIntervalTree`2
  langs:
  - csharp
  - vb
  name: Remove(IEnumerable<TValue>)
  nameWithType: IIntervalTree<TKey, TValue>.Remove(IEnumerable<TValue>)
  fullName: TMPEffects.Intervaltree.IIntervalTree<TKey, TValue>.Remove(System.Collections.Generic.IEnumerable<TValue>)
  type: Method
  source:
    remote:
      path: Runtime/IntervalTree/IntervalTree.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: Remove
    path: ../Assets/TMPEffects OLD/Runtime/IntervalTree/IntervalTree.cs
    startLine: 284
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Intervaltree
  summary: Removes the specified items.
  example: []
  syntax:
    content: void Remove(IEnumerable<TValue> items)
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{{TValue}}
    content.vb: Sub Remove(items As IEnumerable(Of TValue))
  overload: TMPEffects.Intervaltree.IIntervalTree`2.Remove*
  nameWithType.vb: IIntervalTree(Of TKey, TValue).Remove(IEnumerable(Of TValue))
  fullName.vb: TMPEffects.Intervaltree.IIntervalTree(Of TKey, TValue).Remove(System.Collections.Generic.IEnumerable(Of TValue))
  name.vb: Remove(IEnumerable(Of TValue))
- uid: TMPEffects.Intervaltree.IIntervalTree`2.Clear
  commentId: M:TMPEffects.Intervaltree.IIntervalTree`2.Clear
  id: Clear
  parent: TMPEffects.Intervaltree.IIntervalTree`2
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: IIntervalTree<TKey, TValue>.Clear()
  fullName: TMPEffects.Intervaltree.IIntervalTree<TKey, TValue>.Clear()
  type: Method
  source:
    remote:
      path: Runtime/IntervalTree/IntervalTree.cs
      branch: main
      repo: https://github.com/Luca3317/TMPEffects-Fork.git
    id: Clear
    path: ../Assets/TMPEffects OLD/Runtime/IntervalTree/IntervalTree.cs
    startLine: 289
  assemblies:
  - Luca3317.TMPEffects
  namespace: TMPEffects.Intervaltree
  summary: Removes all elements from the range tree.
  example: []
  syntax:
    content: void Clear()
    content.vb: Sub Clear()
  overload: TMPEffects.Intervaltree.IIntervalTree`2.Clear*
  nameWithType.vb: IIntervalTree(Of TKey, TValue).Clear()
  fullName.vb: TMPEffects.Intervaltree.IIntervalTree(Of TKey, TValue).Clear()
references:
- uid: TMPEffects.Intervaltree
  commentId: N:TMPEffects.Intervaltree
  href: TMPEffects.html
  name: TMPEffects.Intervaltree
  nameWithType: TMPEffects.Intervaltree
  fullName: TMPEffects.Intervaltree
  spec.csharp:
  - uid: TMPEffects
    name: TMPEffects
    href: TMPEffects.html
  - name: .
  - uid: TMPEffects.Intervaltree
    name: Intervaltree
    href: TMPEffects.Intervaltree.html
  spec.vb:
  - uid: TMPEffects
    name: TMPEffects
    href: TMPEffects.html
  - name: .
  - uid: TMPEffects.Intervaltree
    name: Intervaltree
    href: TMPEffects.Intervaltree.html
- uid: System.Collections.Generic.IEnumerable{TMPEffects.Intervaltree.RangeValuePair{{TKey},{TValue}}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{TMPEffects.Intervaltree.RangeValuePair{`0,`1}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{TMPEffects.Intervaltree.RangeValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<RangeValuePair<TKey, TValue>>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<TMPEffects.Intervaltree.RangeValuePair<TKey, TValue>>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of RangeValuePair(Of TKey, TValue)).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of TMPEffects.Intervaltree.RangeValuePair(Of TKey, TValue)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable{TMPEffects.Intervaltree.RangeValuePair{`0,`1}}.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable{TMPEffects.Intervaltree.RangeValuePair{`0,`1}}.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.ienumerable.getenumerator
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.ienumerable.getenumerator
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.ienumerable.getenumerator
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerable{TMPEffects.Intervaltree.RangeValuePair{{TKey},{TValue}}}
  commentId: T:System.Collections.Generic.IEnumerable{TMPEffects.Intervaltree.RangeValuePair{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<RangeValuePair<TKey, TValue>>
  nameWithType: IEnumerable<RangeValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IEnumerable<TMPEffects.Intervaltree.RangeValuePair<TKey, TValue>>
  nameWithType.vb: IEnumerable(Of RangeValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.IEnumerable(Of TMPEffects.Intervaltree.RangeValuePair(Of TKey, TValue))
  name.vb: IEnumerable(Of RangeValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: TMPEffects.Intervaltree.RangeValuePair`2
    name: RangeValuePair
    href: TMPEffects.Intervaltree.RangeValuePair-2.html
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: TMPEffects.Intervaltree.RangeValuePair`2
    name: RangeValuePair
    href: TMPEffects.Intervaltree.RangeValuePair-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.ienumerable
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
- uid: TMPEffects.Intervaltree.IIntervalTree`2.Values*
  commentId: Overload:TMPEffects.Intervaltree.IIntervalTree`2.Values
  href: TMPEffects.Intervaltree.IIntervalTree-2.html#TMPEffects_Intervaltree_IIntervalTree_2_Values
  name: Values
  nameWithType: IIntervalTree<TKey, TValue>.Values
  fullName: TMPEffects.Intervaltree.IIntervalTree<TKey, TValue>.Values
  nameWithType.vb: IIntervalTree(Of TKey, TValue).Values
  fullName.vb: TMPEffects.Intervaltree.IIntervalTree(Of TKey, TValue).Values
- uid: System.Collections.Generic.IEnumerable{{TValue}}
  commentId: T:System.Collections.Generic.IEnumerable{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<TValue>
  nameWithType: IEnumerable<TValue>
  fullName: System.Collections.Generic.IEnumerable<TValue>
  nameWithType.vb: IEnumerable(Of TValue)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TValue)
  name.vb: IEnumerable(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
- uid: TMPEffects.Intervaltree.IIntervalTree`2.Count*
  commentId: Overload:TMPEffects.Intervaltree.IIntervalTree`2.Count
  href: TMPEffects.Intervaltree.IIntervalTree-2.html#TMPEffects_Intervaltree_IIntervalTree_2_Count
  name: Count
  nameWithType: IIntervalTree<TKey, TValue>.Count
  fullName: TMPEffects.Intervaltree.IIntervalTree<TKey, TValue>.Count
  nameWithType.vb: IIntervalTree(Of TKey, TValue).Count
  fullName.vb: TMPEffects.Intervaltree.IIntervalTree(Of TKey, TValue).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: TMPEffects.Intervaltree.IIntervalTree`2.Query*
  commentId: Overload:TMPEffects.Intervaltree.IIntervalTree`2.Query
  href: TMPEffects.Intervaltree.IIntervalTree-2.html#TMPEffects_Intervaltree_IIntervalTree_2_Query__0_
  name: Query
  nameWithType: IIntervalTree<TKey, TValue>.Query
  fullName: TMPEffects.Intervaltree.IIntervalTree<TKey, TValue>.Query
  nameWithType.vb: IIntervalTree(Of TKey, TValue).Query
  fullName.vb: TMPEffects.Intervaltree.IIntervalTree(Of TKey, TValue).Query
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TMPEffects.Intervaltree.IIntervalTree`2.Add*
  commentId: Overload:TMPEffects.Intervaltree.IIntervalTree`2.Add
  href: TMPEffects.Intervaltree.IIntervalTree-2.html#TMPEffects_Intervaltree_IIntervalTree_2_Add__0__0__1_
  name: Add
  nameWithType: IIntervalTree<TKey, TValue>.Add
  fullName: TMPEffects.Intervaltree.IIntervalTree<TKey, TValue>.Add
  nameWithType.vb: IIntervalTree(Of TKey, TValue).Add
  fullName.vb: TMPEffects.Intervaltree.IIntervalTree(Of TKey, TValue).Add
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TMPEffects.Intervaltree.IIntervalTree`2.Remove*
  commentId: Overload:TMPEffects.Intervaltree.IIntervalTree`2.Remove
  href: TMPEffects.Intervaltree.IIntervalTree-2.html#TMPEffects_Intervaltree_IIntervalTree_2_Remove__1_
  name: Remove
  nameWithType: IIntervalTree<TKey, TValue>.Remove
  fullName: TMPEffects.Intervaltree.IIntervalTree<TKey, TValue>.Remove
  nameWithType.vb: IIntervalTree(Of TKey, TValue).Remove
  fullName.vb: TMPEffects.Intervaltree.IIntervalTree(Of TKey, TValue).Remove
- uid: TMPEffects.Intervaltree.IIntervalTree`2.Clear*
  commentId: Overload:TMPEffects.Intervaltree.IIntervalTree`2.Clear
  href: TMPEffects.Intervaltree.IIntervalTree-2.html#TMPEffects_Intervaltree_IIntervalTree_2_Clear
  name: Clear
  nameWithType: IIntervalTree<TKey, TValue>.Clear
  fullName: TMPEffects.Intervaltree.IIntervalTree<TKey, TValue>.Clear
  nameWithType.vb: IIntervalTree(Of TKey, TValue).Clear
  fullName.vb: TMPEffects.Intervaltree.IIntervalTree(Of TKey, TValue).Clear
